<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[web.xml配置详解]]></title>
      <url>http://zhengdehua.github.io/2016/06/16/web-xml-configuration/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://wiki.metawerx.net/wiki/Web.xml" target="_blank" rel="external">metawerx</a> </p>
<p>本文主要介绍 Tomcat 中 web.xml 的配置。</p>
<p>>> <a href="/web-xml详细参考">web.xml元素详细参考</a></p>
</blockquote>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>web.xml 文件用于描述如何在 servlet 容器中(如 Tomcat) 部署 web 应用。在很多 web 应用中，比如 WAR 文件，都包含 web.xml 文件。</p>
<p>web.xml 文件的位置总是在 <code>application root/WEB-INF/web.xml</code>.</p>
<p>在 web.xml 文件中，至少要包含一个 XML 描述 和 一个 <code>&lt;web-app&gt;</code> 标签。</p>
<p>下面是一个精简的 Tomcat6.0 中的 web.xml 示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;</span><br><span class="line">     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">     xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><br><span class="line">     version=&quot;2.5&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p>下面介绍在 <code>&lt;web-app&gt;</code> 标签中可以添加的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; </span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot; </span><br><span class="line">        version=&quot;2.4&quot;&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- General --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- 给应用命名，名称在 tomcat 控制台可以看到 --&gt; </span><br><span class="line">        &lt;display-name&gt;Example App&lt;/display-name&gt; </span><br><span class="line">        &lt;description&gt;An example application which is used to play with some of the features of Tomcat&lt;/description&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- 设置这个标签表示应用可以用于分布式环境 --&gt; </span><br><span class="line">        &lt;distributable /&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- 设置超时时间为 120分钟 --&gt; </span><br><span class="line">        &lt;session-config&gt; </span><br><span class="line">                &lt;session-timeout&gt;120&lt;/session-timeout&gt; </span><br><span class="line">        &lt;/session-config&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Custom Tag Libraries --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- 注意 Taglib 标签从 JSP2.0 起就不再需要了，可以参考详细解释 --&gt;</span><br><span class="line">        &lt;!-- 在早起版本中 &lt;taglib&gt; 不一定得是 &lt;jsp-config&gt; 的子节点，但从 Tomcat7 开始，这是必须的了。  --&gt;</span><br><span class="line">        &lt;!-- 注意在每个 web.xml 文件中只能有一个 &lt;jsp-config&gt; 元素 --&gt;</span><br><span class="line">        &lt;!-- </span><br><span class="line">        &lt;jsp-config&gt; </span><br><span class="line">                &lt;taglib&gt; </span><br><span class="line">                        &lt;taglib-uri&gt;mytags&lt;/taglib-uri&gt; </span><br><span class="line">                        &lt;taglib-location&gt;/WEB-INF/jsp/mytaglib.tld&lt;/taglib-location&gt; </span><br><span class="line">                &lt;/taglib&gt; </span><br><span class="line">        &lt;/jsp-config&gt; </span><br><span class="line">        --&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- JSP 配置 --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;jsp-config&gt; </span><br><span class="line">                &lt;jsp-property-group&gt; </span><br><span class="line">                        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; </span><br><span class="line">                        &lt;include-prelude&gt;/WEB-INF/jspf/prelude1.jspf&lt;/include-prelude&gt; </span><br><span class="line">                        &lt;include-coda&gt;/WEB-INF/jspf/coda1.jspf&lt;/include-coda&gt; </span><br><span class="line">                &lt;/jsp-property-group&gt; </span><br><span class="line">        &lt;/jsp-config&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Context Parameters --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;context-param&gt; </span><br><span class="line">                &lt;description&gt;Enable debugging for the application&lt;/description&gt; </span><br><span class="line">                &lt;param-name&gt;debug&lt;/param-name&gt; </span><br><span class="line">                &lt;param-value&gt;true&lt;/param-value&gt; </span><br><span class="line">        &lt;/context-param&gt; </span><br><span class="line">        &lt;context-param&gt; </span><br><span class="line">                &lt;description&gt;The email address of the administrator, used to send error reports.&lt;/description&gt; </span><br><span class="line">                &lt;param-name&gt;webmaster&lt;/param-name&gt; </span><br><span class="line">                &lt;param-value&gt;address@somedomain.com&lt;/param-value&gt; </span><br><span class="line">        &lt;/context-param&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- JNDI Environment Variables --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;env-entry&gt; </span><br><span class="line">                &lt;env-entry-name&gt;webmasterName&lt;/env-entry-name&gt; </span><br><span class="line">                &lt;env-entry-value&gt;Ms. W. Master&lt;/env-entry-value&gt; </span><br><span class="line">                &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt; </span><br><span class="line">        &lt;/env-entry&gt; </span><br><span class="line">        &lt;env-entry&gt; </span><br><span class="line">                &lt;env-entry-name&gt;cms/defaultUserSettings/recordsPerPage&lt;/env-entry-name&gt; </span><br><span class="line">                &lt;env-entry-value&gt;30&lt;/env-entry-value&gt; </span><br><span class="line">                &lt;env-entry-type&gt;java.lang.Integer&lt;/env-entry-type&gt; </span><br><span class="line">        &lt;/env-entry&gt; </span><br><span class="line">        &lt;env-entry&gt; </span><br><span class="line">                &lt;env-entry-name&gt;cms/enableXMLExport&lt;/env-entry-name&gt; </span><br><span class="line">                &lt;env-entry-value&gt;false&lt;/env-entry-value&gt; </span><br><span class="line">                &lt;env-entry-type&gt;java.lang.Boolean&lt;/env-entry-type&gt; </span><br><span class="line">        &lt;/env-entry&gt; </span><br><span class="line">        &lt;env-entry&gt; </span><br><span class="line">                &lt;env-entry-name&gt;cms/enableEmailNotifications&lt;/env-entry-name&gt; </span><br><span class="line">                &lt;env-entry-value&gt;true&lt;/env-entry-value&gt; </span><br><span class="line">                &lt;env-entry-type&gt;java.lang.Boolean&lt;/env-entry-type&gt; </span><br><span class="line">        &lt;/env-entry&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Servlets --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Simple Servlet, provide a name, class, description and map to URL /servlet/SimpleServlet --&gt; </span><br><span class="line">        &lt;servlet&gt; </span><br><span class="line">                &lt;servlet-name&gt;Simple&lt;/servlet-name&gt; </span><br><span class="line">                &lt;servlet-class&gt;SimpleServlet&lt;/servlet-class&gt; </span><br><span class="line">                &lt;description&gt;This is a simple Hello World servlet&lt;/description&gt; </span><br><span class="line">        &lt;/servlet&gt; </span><br><span class="line">        &lt;servlet-mapping&gt; </span><br><span class="line">                &lt;servlet-name&gt;Simple&lt;/servlet-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;/servlet/SimpleServlet&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/servlet-mapping&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- CMS Servlet, responds to *.cms URL&apos;s --&gt; </span><br><span class="line">        &lt;servlet&gt; </span><br><span class="line">                &lt;!-- Identification --&gt; </span><br><span class="line">                &lt;servlet-name&gt;cms&lt;/servlet-name&gt; </span><br><span class="line">                &lt;servlet-class&gt;com.metawerx.servlets.ContentManagementSystem&lt;/servlet-class&gt; </span><br><span class="line">                &lt;description&gt;This servlet handles requests for the CMS (it is a controller in an MVC architecture)&lt;/description&gt; </span><br><span class="line"></span><br><span class="line">                &lt;!-- This servlet has two parameters --&gt; </span><br><span class="line">                &lt;init-param&gt; </span><br><span class="line">                        &lt;param-name&gt;debug&lt;/param-name&gt; </span><br><span class="line">                        &lt;param-value&gt;true&lt;/param-value&gt; </span><br><span class="line">                &lt;/init-param&gt; </span><br><span class="line">                &lt;init-param&gt; </span><br><span class="line">                        &lt;param-name&gt;detail&lt;/param-name&gt; </span><br><span class="line">                        &lt;param-value&gt;2&lt;/param-value&gt; </span><br><span class="line">                &lt;/init-param&gt; </span><br><span class="line"></span><br><span class="line">                &lt;!-- Load this servlet when the application starts (call the init() method of the servlet) --&gt; </span><br><span class="line">                &lt;load-on-startup&gt;5&lt;/load-on-startup&gt; </span><br><span class="line">                &lt;!-- &lt;run-at&gt;0:00, 6:00, 12:00, 18:00&lt;/run-at&gt; This tag is only valid for Resin --&gt; </span><br><span class="line">        &lt;/servlet&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Map some URLs to the cms servlet (demonstrates *.extension mapping) --&gt; </span><br><span class="line">        &lt;servlet-mapping&gt; </span><br><span class="line">                &lt;!-- For any URL ending in .cms, the cms servlet will be called --&gt; </span><br><span class="line">                &lt;servlet-name&gt;cms&lt;/servlet-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;*.cms&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/servlet-mapping&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Rewriter Servlet, responds to /content/* and /admin/RewriterStatistics URL&apos;s --&gt; </span><br><span class="line">        &lt;!-- Define a servlet to respond to /content/* URL&apos;s --&gt; </span><br><span class="line">        &lt;servlet&gt; </span><br><span class="line">                &lt;servlet-name&gt;rewriter&lt;/servlet-name&gt; </span><br><span class="line">                &lt;servlet-class&gt;com.metawerx.servlets.URLRewriter&lt;/servlet-class&gt; </span><br><span class="line">        &lt;/servlet&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Map some URL&apos;s to the rewriter servlet (demonstrates /path/* and specific URL mapping) --&gt; </span><br><span class="line">        &lt;servlet-mapping&gt; </span><br><span class="line">                &lt;!-- For any URL starting with /content/, the rewriter servlet will be called --&gt; </span><br><span class="line">                &lt;servlet-name&gt;rewriter&lt;/servlet-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;/content/*&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/servlet-mapping&gt; </span><br><span class="line">        &lt;servlet-mapping&gt; </span><br><span class="line">                &lt;!-- The rewriter servlet can also be called directly as /admin/RewriterStatistics, to return stats --&gt; </span><br><span class="line">                &lt;servlet-name&gt;rewriter&lt;/servlet-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;/admin/RewriterStatistics&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/servlet-mapping&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- PathJSP Servlet, maps /shop/item/* URL&apos;s to a JSP file --&gt; </span><br><span class="line">        &lt;!-- Define a JSP file to respond to /shop/item/* URL&apos;s --&gt; </span><br><span class="line">        &lt;servlet&gt; </span><br><span class="line">                &lt;servlet-name&gt;pathjsp&lt;/servlet-name&gt; </span><br><span class="line">                &lt;jsp-file&gt;pathfinder.jsp&lt;/jsp-file&gt; </span><br><span class="line">        &lt;/servlet&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Map some URL&apos;s to the pathjsp servlet (demonstrates /long/path/* URL mapping) --&gt; </span><br><span class="line">        &lt;servlet-mapping&gt; </span><br><span class="line">                &lt;!-- For any URL starting with /shop/item/, the pathjsp servlet will be called --&gt; </span><br><span class="line">                &lt;servlet-name&gt;pathjsp&lt;/servlet-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;/shop/item/*&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/servlet-mapping&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Filters --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Example filter to set character encoding on each request (from Tomcat servlets-examples context) --&gt; </span><br><span class="line">        &lt;filter&gt; </span><br><span class="line">                &lt;filter-name&gt;Set Character Encoding&lt;/filter-name&gt; </span><br><span class="line">                &lt;filter-class&gt;filters.SetCharacterEncodingFilter&lt;/filter-class&gt; </span><br><span class="line">                &lt;init-param&gt; </span><br><span class="line">                        &lt;param-name&gt;encoding&lt;/param-name&gt; </span><br><span class="line">                        &lt;param-value&gt;EUC_JP&lt;/param-value&gt; </span><br><span class="line">                &lt;/init-param&gt; </span><br><span class="line">        &lt;/filter&gt; </span><br><span class="line">        &lt;filter-mapping&gt; </span><br><span class="line">                &lt;filter-name&gt;Set Character Encoding&lt;/filter-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;/*&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/filter-mapping&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Example filter to dump the HTTP request at the top of each page (from Tomcat servlets-examples context) --&gt; </span><br><span class="line">        &lt;filter&gt; </span><br><span class="line">                &lt;filter-name&gt;Request Dumper Filter&lt;/filter-name&gt; </span><br><span class="line">                &lt;filter-class&gt;filters.RequestDumperFilter&lt;/filter-class&gt; </span><br><span class="line">        &lt;/filter&gt; </span><br><span class="line">        &lt;filter-mapping&gt; </span><br><span class="line">                &lt;filter-name&gt;Request Dumper Filter&lt;/filter-name&gt; </span><br><span class="line">                &lt;url-pattern&gt;/*&lt;/url-pattern&gt; </span><br><span class="line">        &lt;/filter-mapping&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Listeners --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Define example application events listeners --&gt; </span><br><span class="line">        &lt;listener&gt; </span><br><span class="line">                &lt;listener-class&gt;com.metawerx.listener.ContextListener&lt;/listener-class&gt; </span><br><span class="line">        &lt;/listener&gt; </span><br><span class="line">        &lt;listener&gt; </span><br><span class="line">                &lt;listener-class&gt;com.metawerx.listener.SessionListener&lt;/listener-class&gt; </span><br><span class="line">        &lt;/listener&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Security --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Define roles --&gt; </span><br><span class="line">        &lt;security-role&gt; </span><br><span class="line">                &lt;role-name&gt;admin&lt;/role-name&gt; </span><br><span class="line">        &lt;/security-role&gt; </span><br><span class="line">        &lt;security-role&gt; </span><br><span class="line">                &lt;role-name&gt;cms_editors&lt;/role-name&gt; </span><br><span class="line">        &lt;/security-role&gt; </span><br><span class="line">         </span><br><span class="line">        &lt;!-- Define a constraint to restrict access to /private/* --&gt; </span><br><span class="line">        &lt;security-constraint&gt; </span><br><span class="line"></span><br><span class="line">                &lt;display-name&gt;Security constraint for the /private folder&lt;/display-name&gt; </span><br><span class="line"></span><br><span class="line">                &lt;web-resource-collection&gt; </span><br><span class="line">                         </span><br><span class="line">                        &lt;web-resource-name&gt;Protected Area&lt;/web-resource-name&gt; </span><br><span class="line">                        &lt;url-pattern&gt;/private/*&lt;/url-pattern&gt; </span><br><span class="line">                         </span><br><span class="line">                        &lt;!-- If you list http methods, only those methods are protected. --&gt; </span><br><span class="line">                        &lt;!-- Leave this commented out to protect all access --&gt; </span><br><span class="line">                        &lt;!-- </span><br><span class="line">                        &lt;http-method&gt;DELETE&lt;/http-method&gt; </span><br><span class="line">                        &lt;http-method&gt;GET&lt;/http-method&gt; </span><br><span class="line">                        &lt;http-method&gt;POST&lt;/http-method&gt; </span><br><span class="line">                        &lt;http-method&gt;PUT&lt;/http-method&gt; </span><br><span class="line">                        --&gt; </span><br><span class="line"></span><br><span class="line">                &lt;/web-resource-collection&gt; </span><br><span class="line"></span><br><span class="line">                &lt;auth-constraint&gt; </span><br><span class="line">                        &lt;!-- Only only administrator and CMS editors to access this area --&gt; </span><br><span class="line">                        &lt;role-name&gt;admin&lt;/role-name&gt; </span><br><span class="line">                        &lt;role-name&gt;cms_editors&lt;/role-name&gt; </span><br><span class="line">                &lt;/auth-constraint&gt; </span><br><span class="line"></span><br><span class="line">        &lt;/security-constraint&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- FORM based authentication --&gt; </span><br><span class="line">        &lt;!-- Leave this commented out, we will use BASIC (HTTP) authentication instead --&gt; </span><br><span class="line">        &lt;!-- </span><br><span class="line">        &lt;login-config&gt; </span><br><span class="line">                &lt;auth-method&gt;FORM&lt;/auth-method&gt; </span><br><span class="line">                &lt;form-login-config&gt; </span><br><span class="line">                        &lt;form-login-page&gt;/login.jsp&lt;/form-login-page&gt; </span><br><span class="line">                        &lt;form-error-page&gt;/error.jsp&lt;/form-error-page&gt; </span><br><span class="line">                &lt;/form-login-config&gt; </span><br><span class="line">        &lt;/login-config&gt; </span><br><span class="line">        --&gt; </span><br><span class="line">        &lt;!-- This application uses BASIC authentication --&gt; </span><br><span class="line">        &lt;login-config&gt; </span><br><span class="line">                &lt;auth-method&gt;BASIC&lt;/auth-method&gt; </span><br><span class="line">                &lt;realm-name&gt;Editor Login&lt;/realm-name&gt; </span><br><span class="line">        &lt;/login-config&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Define a constraint to force SSL on all pages in the application --&gt; </span><br><span class="line">        &lt;security-constraint&gt; </span><br><span class="line"></span><br><span class="line">                &lt;web-resource-collection&gt; </span><br><span class="line">                        &lt;web-resource-name&gt;Entire Application&lt;/web-resource-name&gt; </span><br><span class="line">                        &lt;url-pattern&gt;/*&lt;/url-pattern&gt; </span><br><span class="line">                &lt;/web-resource-collection&gt; </span><br><span class="line"></span><br><span class="line">                &lt;user-data-constraint&gt; </span><br><span class="line">                        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; </span><br><span class="line">                &lt;/user-data-constraint&gt; </span><br><span class="line"></span><br><span class="line">        &lt;/security-constraint&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Error Handler --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Define an error handler for 404 pages --&gt; </span><br><span class="line">        &lt;error-page&gt; </span><br><span class="line">                &lt;error-code&gt;404&lt;/error-code&gt; </span><br><span class="line">                &lt;location&gt;/error404.jsp&lt;/location&gt; </span><br><span class="line">        &lt;/error-page&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Define an error handler for java.lang.Throwable --&gt; </span><br><span class="line">        &lt;error-page&gt; </span><br><span class="line">                &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt; </span><br><span class="line">                &lt;location&gt;/errorThrowable.jsp&lt;/location&gt; </span><br><span class="line">        &lt;/error-page&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Extra MIME types --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Set XML mime-mapping so spreadsheets open properly instead of being sent as an octet/stream --&gt; </span><br><span class="line">        &lt;mime-mapping&gt; </span><br><span class="line">                &lt;extension&gt;xls&lt;/extension&gt; </span><br><span class="line">                &lt;mime-type&gt;application/vnd.ms-excel&lt;/mime-type&gt; </span><br><span class="line">        &lt;/mime-mapping&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Locale --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Set Locale Encoding --&gt; </span><br><span class="line">        &lt;locale-encoding-mapping-list&gt; </span><br><span class="line">                &lt;locale-encoding-mapping&gt; </span><br><span class="line">                        &lt;locale&gt;ja&lt;/locale&gt; </span><br><span class="line">                        &lt;encoding&gt;Shift_JIS&lt;/encoding&gt; </span><br><span class="line">                &lt;/locale-encoding-mapping&gt; </span><br><span class="line">        &lt;/locale-encoding-mapping-list&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line">        &lt;!-- Welcome Files --&gt; </span><br><span class="line">        &lt;!-- ========================================================== --&gt; </span><br><span class="line"></span><br><span class="line">        &lt;!-- Define, in order of preference, which file to show when no filename is defined in the path --&gt; </span><br><span class="line">        &lt;!-- eg: when user goes to http://yoursite.com/ or http://yoursite.com/somefolder --&gt; </span><br><span class="line">        &lt;!-- Defaults are provided in the server-wide web.xml file, such as index.jsp, index.htm --&gt; </span><br><span class="line">        &lt;!-- Note: using this tag overrides the defaults, so don&apos;t forget to add them here --&gt; </span><br><span class="line">        &lt;welcome-file-list&gt; </span><br><span class="line">                &lt;!-- Use index.swf if present, or splash.jsp, otherwise just look for the normal defaults --&gt; </span><br><span class="line">                &lt;welcome-file&gt;index.swf&lt;/welcome-file&gt; </span><br><span class="line">                &lt;welcome-file&gt;splash.jsp&lt;/welcome-file&gt; </span><br><span class="line">                &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; </span><br><span class="line">                &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; </span><br><span class="line">                &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; </span><br><span class="line">        &lt;/welcome-file-list&gt; </span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用正则表达式]]></title>
      <url>http://zhengdehua.github.io/2016/06/15/regexp-common/</url>
      <content type="html"><![CDATA[<h4 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h4><blockquote>
<p><code>^\d+$</code><br>非负整数</p>
</blockquote>
<hr>
<blockquote>
<p><code>^\d+(\.\d+)?$</code><br>非负浮点数</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code><br>正浮点数</p>
</blockquote>
<hr>
<blockquote>
<p><code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code><br>非正浮点数</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code><br>负浮点数</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(-?\d+)(\.\d+)?$</code><br>浮点数</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(-?\d+)(\.\d{0,2})?$</code><br>浮点数(两位小数)</p>
</blockquote>
<hr>
<blockquote>
<p><code>^\w+$</code><br>由数字、26个英文字母或者下划线组成的字符串</p>
</blockquote>
<hr>
<blockquote>
<p><code>^[\u4E00-\u9FFF]+$</code><br>匹配中文</p>
</blockquote>
<hr>
<blockquote>
<p><code>^[\x80-\xff]+$</code><br>中文字符(双字节)</p>
</blockquote>
<hr>
<blockquote>
<p><code>^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</code><br>email 地址</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(-?\d+)(\.\d{0,2})?$</code><br>金额</p>
</blockquote>
<hr>
<blockquote>
<p><code>^([a-zA-z]+://)?([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?$</code><br>网址</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$</code><br>IP 地址</p>
</blockquote>
<hr>
<blockquote>
<p><code>&lt;.+?&gt;</code><br>HTML 标记</p>
</blockquote>
<hr>
<blockquote>
<p><code>[1-9]\d{5}(?!\d)</code><br>中国邮政编码</p>
</blockquote>
<hr>
<blockquote>
<p><code>^\d{14}\d{3}?\w$</code><br>身份证</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(19|20)\d\d+(0[1-9]|1[012])+(0[1-9]|[12][0-9]|3[01])</code><br>日期 YYYYMMDD</p>
</blockquote>
<hr>
<blockquote>
<p><code>^((((19|20)(([02468][048])|([13579][26]))-02-29))|((20[0-9][0-9])|(19[0-9][0-9]))-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((01,3-9])|(1[0-2]))-(29|30)))))$</code><br>日期(严格匹配合法日期 YYYY-MM-DD)</p>
</blockquote>
<hr>
<blockquote>
<p><code>^([0-1]?[0-9]|2[0-3])(:([0-5][0-9])){0,2}$</code><br>时间(不含日期)</p>
</blockquote>
<hr>
<blockquote>
<p><code>^(19|20)\d{2}[/\s\-\.]*(0[1-9]|1[0-2]|[1-9])[/\s\-\.]*(0[1-9]|3[01]|[12][0-9]|[1-9])[\s] *(2[0-3]|[01]?\d)(:[0-5]\d){0,2}$</code><br>时间(含日期)</p>
</blockquote>
<hr>
<blockquote>
<p><code>^1[0-2]\d|\d{1,2}$</code><br>年龄</p>
</blockquote>
<hr>
<blockquote>
<p><code>(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</code><br>国内电话号码</p>
</blockquote>
<hr>
<blockquote>
<p><code>^[0-9]{11}$</code><br>手机号码</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式入门]]></title>
      <url>http://zhengdehua.github.io/2016/06/15/regexp-essential/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html" target="_blank" rel="external">deerchao 的博客</a></p>
</blockquote>
<h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><p><a href="#section-1">正则表达式到底是什么东西？</a><br><a href="#section-2">入门 </a><br><a href="#section-3">测试正则表达式 </a><br><a href="#section-4">元字符 </a><br><a href="#section-5">字符转义 </a><br><a href="#section-6">重复 </a><br><a href="#section-7">字符类 </a><br><a href="#section-8">分支条件 </a><br><a href="#section-9">反义 </a><br><a href="#section-10">分组 </a><br><a href="#section-11">后向引用 </a><br><a href="#section-12">零宽断言 </a><br><a href="#section-13">负向零宽断言 </a><br><a href="#section-14">注释 </a><br><a href="#section-15">贪婪与懒惰 </a><br><a href="#section-16">处理选项 </a><br><a href="#section-17">平衡组/递归匹配 </a><br><a href="#section-18">还有些什么东西没提到 </a></p>
<h1 id="section-1"></h1>

<p><strong>正则表达式到底是什么东西？</strong></p>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。<strong>正则表达式</strong>就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
<p>很可能你使用过Windows/Dos下用于文件查找的<strong>通配符(wildcard)</strong>，也就是<code>*</code>和<code>?</code>。如果你想查找某个目录下的所有的Word文档的话，你会搜索<code>*.doc</code>。在这里，<code>*</code>会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。</p>
<blockquote>
<p>字符是计算机软件处理文字时最基本的单位，可能是字母，数字，标点符号，空格，换行符，汉字等等。字符串是0个或更多个字符的序列。文本也就是文字，字符串。说某个字符串匹配某个正则表达式，通常是指这个字符串里有一部分（或几部分分别）能满足表达式给出的条件。</p>
</blockquote>
<h1 id="section-2"></h1>

<p><strong>入门</strong></p>
<p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。</p>
<p>假设你在一篇英文小说里查找hi，你可以使用正则表达式<code>hi</code>。</p>
<p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi,HI,Hi,hI这四种情况中的任意一种。</p>
<p>不幸的是，很多单词里包含hi这两个连续的字符，比如<em>him,history,high</em>等等。用<code>hi</code>来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用<code>\bhi\b</code>。</p>
<p><code>\b</code>是正则表达式规定的一个特殊代码（好吧，某些人叫它<strong>元字符，metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它只<strong>匹配一个位置</strong>。</p>
<p>假如你要找的是hi后面不远处跟着一个Lucy，你应该用<code>\bhi\b.*\bLucy\b</code>。</p>
<p>这里，.是另一个元字符，匹配除了换行符以外的任意字符。<code>*</code>同样是元字符，<br>不过它代表的不是字符，也不是位置，而是数量——它指定<code>*</code>前边的内容可以连续重复使用任意次以使整个表达式得到匹配。<br>因此，<code>.*</code>连在一起就意味着任意数量的不包含换行的字符。现在<code>\bhi\b.*\bLucy\b</code>的意思就很明显了：<br>先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。</p>
<blockquote>
<p>如果需要更精确的说法，<code>\b</code>匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)<code>\w</code>。</p>
</blockquote>
<p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：</p>
<p><code>0\d\d-\d\d\d\d\d\d\d\d</code>匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。</p>
<blockquote>
<p>换行符就是<code>&#39;\n&#39;</code>,ASCII编码为10(十六进制0x0A)的字符。</p>
</blockquote>
<p>这里的<code>\d</code>是个新的元字符，匹配一位数字(0，或1，或2，或……)。-不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。</p>
<p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<code>0\d{2}-\d{8}</code>。 这里<code>\d</code>后面的<code>{2}({8})</code>的意思是前面<code>\d</code>必须连续重复匹配2次(8次)。</p>
<h1 id="section-3"></h1>

<p><strong>测试正则表达式</strong></p>
<p>如果你不觉得正则表达式很难读写的话，要么你是一个天才，要么，你不是地球人。正则表达式的语法很令人头疼，即使对经常使用它的人来说也是如此。由于难于读写，容易出错，所以找一种工具对正则表达式进行测试是很有必要的。</p>
<p>不同的环境下正则表达式的一些细节是不相同的，本教程介绍的是微软 .Net Framework 2.0下正则表达式的行为，所以，我向你介绍一个.Net下的工具<a href="http://deerchao.net/tools/regex_tester/index.htm" target="_blank" rel="external">Regex Tester</a>。首先你确保已经安装了.Net Framework 2.0，然后下载Regex Tester。这是个绿色软件，下载完后打开压缩包,直接运行RegexTester.exe就可以了。</p>
<blockquote>
<p>其它可用的测试工具:</p>
<ul>
<li><a href="http://www.regexbuddy.com/" target="_blank" rel="external">RegexBuddy</a></li>
<li><a href="http://www.regexpal.com/" target="_blank" rel="external">Javascript正则表达式在线测试工具</a></li>
</ul>
</blockquote>
<h1 id="section-4"></h1>

<p><strong>元字符</strong></p>
<p>现在你已经知道几个很有用的元字符了，如<code>\b</code>,<code>.</code>,<code>*</code>，还有<code>\d</code>.正则表达式里还有更多的元字符，<br>比如<code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。<code>\w</code>匹配字母或数字或下划线或汉字等。</p>
<p>下面来看看更多的例子：</p>
<p><code>\ba\w*\b</code>匹配以字母a开头的单词——先是某个单词开始处(<code>\b</code>)，然后是字母a,然后是任意数量的字母或数字(<code>\w*</code>)，最后是单词结束处(<code>\b</code>)。</p>
<blockquote>
<p>对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。</p>
</blockquote>
<p><code>\d+</code>匹配1个或更多连续的数字。这里的<code>+</code>是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次(可能是0次)，而<code>+</code>则匹配重复1次或更多次。</p>
<blockquote>
<p>好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的<code>\w</code>。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)</p>
</blockquote>
<p><code>\b\w{6}\b</code> 匹配刚好6个字符的单词。</p>
<p><img src="/resources/image/png/QQ截图20160616210618.png" alt=""></p>
<p>元字符<code>^</code>（和数字6在同一个键位上的符号）和<code>$</code>都匹配一个位置，这和<code>\b</code>有点类似。<code>^</code>匹配你要用来查找的<br>字符串的开头，<code>$</code>匹配结尾。这两个代码在验证输入的内容时非常有用，<br>比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：<code>^\d{5,12}$</code>。</p>
<p>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p>
<p>因为使用了<code>^</code>和<code>$</code>，所以输入的整个字符串都要用来和<code>\d{5,12}</code>来匹配，也就是说整个输入必须是5到12个数字，<br>因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p>
<blockquote>
<p>正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用<code>^</code>和<code>$</code>的话，<br>对于<code>\d{5,12}</code>而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字。</p>
</blockquote>
<p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，<code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</p>
<h1 id="section-5"></h1>

<p><strong>字符转义</strong></p>
<p>如果你想查找元字符本身的话，比如你查找<code>.</code>,或者<code>*</code>,就出现了问题：你没办法指定它们，<br>因为它们会被解释成别的意思。这时你就得使用<code>\</code>来取消这些字符的特殊意义。因此，你应该使用<code>\.</code>和<code>\*</code>。<br>当然，要查找<code>\</code>本身，你也得用<code>\\</code>.</p>
<p>例如：<code>unibetter\.com</code> 匹配unibetter.com，<code>C:\\Windows</code> 匹配C:\Windows。</p>
<h1 id="section-6"></h1>

<p><strong>重复</strong></p>
<p>你已经看过了前面的<code>*</code>,<code>+</code>,<code>{2}</code>,<code>{5,12}</code>这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如<code>*</code>,<code>{5,12}</code>等)：</p>
<p><img src="/resources/image/png/QQ截图20160616212007.png" alt=""></p>
<p>下面是一些使用重复的例子：</p>
<p><code>Windows\d+</code> 匹配Windows后面跟1个或更多数字</p>
<p><code>^\w+</code> 匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p>
<h1 id="section-7"></h1>

<p><strong>字符类</strong></p>
<p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？</p>
<p>很简单，你只需要在方括号里列出它们就行了，像<code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!)。</p>
<p>我们也可以轻松地指定一个字符范围，像<code>[0-9]</code>代表的含意与<code>\d</code>就是完全一致的：一位数字；同理<code>[a-z0-9A-Z_]</code>也完全等同于<code>\w</code>（如果只考虑英文的话）。</p>
<p>下面是一个更复杂的表达式：<code>\(?0\d{2}[) -]?\d{8}</code>。</p>
<p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符<code>\(</code>,它能出现0次或1次(<code>?</code>),然后是一个0，后面跟着2个数字(<code>\d{2}</code>)，然后是<code>)</code>或<code>-</code>或<code>空格</code>中的一个，它出现1次或不出现(<code>?</code>)，<br>最后是8个数字(<code>\d{8}</code>)。</p>
<blockquote>
<p>“(”和“)”也是元字符，后面的<a href="#section-9">分组节</a>里会提到，所以在这里需要使用<a href="#section-5">转义</a>。</p>
</blockquote>
<h1 id="section-8"></h1>

<p><strong>分枝条件</strong></p>
<p>不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开。听不明白？没关系，看例子：</p>
<p><code>0\d{2}-\d{8}|0\d{3}-\d{7}</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</p>
<p><code>\(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}</code>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的</p>
<p><code>\d{5}-\d{4}|\d{5}</code>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：<strong>使用分枝条件时，要注意各个条件的顺序。</strong><br>如果你把它改成<code>\d{5}|\d{5}-\d{4}</code>的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p>
<h1 id="section-9"></h1>

<p><strong>分组</strong></p>
<p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。</p>
<p><code>(\d{1,3}\.){3}\d{1,3}</code>是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<br><code>\d{1,3}</code>匹配1到3位的数字，<code>(\d{1,3}\.){3}</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(<code>\d{1,3}</code>)。</p>
<p>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，<br>但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：<br><code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p>
<p>理解这个表达式的关键是理解<code>2[0-4]\d|25[0-5]|[01]?\d\d?</code>，这里我就不细说了，你自己应该能分析得出来它的意义。</p>
<blockquote>
<p>IP地址中每个数字都不能大于255，大家千万不要被《24》第三季的编剧给忽悠了……</p>
</blockquote>
<h1 id="section-10"></h1>

<p><strong>反义</strong></p>
<p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，<br>这时需要用到反义：</p>
<p><img src="/resources/image/png/QQ截图20160616214956.png" alt=""></p>
<p>例子：<code>\S+</code>匹配不包含空白符的字符串。</p>
<p><code>&lt;a[^&gt;]+&gt;</code>匹配用尖括号括起来的以a开头的字符串。</p>
<h1 id="section-11"></h1>

<p><strong>后向引用</strong></p>
<p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式的文本</strong>(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个<strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p>
<p>后向引用用于重复搜索前面某个分组匹配的文本。例如，<code>\1</code>代表分组1匹配的文本。难以理解？请看示例：</p>
<p><code>\b(\w+)\b\s+\1\b</code>可以用来匹配重复的单词，像go go, 或者kitty kitty。<br>这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(<code>\b(\w+)\b</code>)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(<code>\s+</code>)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(<code>\1</code>)。</p>
<p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：<br><code>(?&lt;Word&gt;\w+)</code>(或者把尖括号换成<code>&#39;</code>也行：<code>(?&#39;Word&#39;\w+)</code>),这样就把<code>\w+</code>的组名指定为<code>Word</code>了。<br>要反向引用这个分组捕获的内容，你可以使用<code>\k&lt;Word&gt;</code>,所以上一个例子也可以写成这样：<br><code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code>。</p>
<blockquote>
<p>呃……其实,组号分配还不像我刚说得那么简单：</p>
<p>分组0对应整个正则表达式<br>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，<br>第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号<br>你可以使用<code>(?:exp)</code>这样的语法来剥夺一个分组对组号分配的参与权．</p>
</blockquote>
<p>使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：</p>
<p><img src="/resources/image/png/QQ截图20160616220201.png" alt=""></p>
<p>我们已经讨论了前两种语法。第三个<code>(?:exp)</code>不会改变正则表达式的处理方式，<br>只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。<br>“我为什么会想要这样做？”——好问题，你觉得为什么呢？</p>
<h1 id="section-12"></h1>

<p><strong>零宽断言</strong></p>
<p>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，<br>也就是说它们像<code>\b</code>,<code>^</code>,<code>$</code>那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：</p>
<p><code>(?=exp)</code>也叫<strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式exp。<br>比如<code>\b\w+(?=ing\b)</code>，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，<br>如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p>
<p><code>(?&lt;=exp)</code>也叫<strong>零宽度正回顾后发断言</strong>，它断言自身出现的位置的前面能匹配表达式exp。<br>比如<code>(?&lt;=\bre)\w+\b</code>会匹配以re开头的单词的后半部分(除了re以外的部分)，<br>例如在查找reading a book时，它匹配ading。</p>
<p>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：<code>((?&lt;=\d)\d{3})+\b</code>，用它对1234567890进行查找时结果是234567890。</p>
<blockquote>
<p>地球人，是不是觉得这些术语名称太复杂，太难记了？我也有同感。知道有这么一种东西就行了，它叫什么，随它去吧！人若无名，便可专心练剑；物若无名，便可随意取舍……</p>
<p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。</p>
</blockquote>
<p>下面这个例子同时使用了这两种断言：<code>(?&lt;=\s)\d+(?=\s)</code>匹配以空白符间隔的数字(再次强调，不包括这些空白符)。</p>
<h1 id="section-13"></h1>

<p><strong>负向零宽断言</strong></p>
<p>前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：</p>
<p><code>\b\w*q[^u]\w*\b</code>匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为<code>[^u]</code>总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的<code>[^u]</code>将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的<code>\w*\b</code>将会匹配下一个单词，于是<code>\b\w*q[^u]\w*\b</code>就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：<code>\b\w*q(?!u)\w*\b</code>。</p>
<p><strong>零宽度负预测先行断言</strong><code>(?!exp)</code>，断言此位置的后面不能匹配表达式exp。例如：<code>\d{3}(?!\d)</code>匹配三位数字，而且这三位数字的后面不能是数字；<code>\b((?!abc)\w)+\b</code>匹配不包含连续字符串abc的单词。</p>
<p>同理，我们可以用<code>(?&lt;!exp)</code>,零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：<code>(?&lt;![a-z])\d{7}</code>匹配前面不是小写字母的七位数字。</p>
<p>一个更复杂的例子：<code>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)</code>匹配不包含属性的简单HTML标签内里的内容。<code>(?&lt;=&lt;(\w+)&gt;)</code>指定了这样的前缀：被尖括号括起来的单词(比如可能是<code>&lt;b&gt;</code>)，然后是<code>.*</code>(任意的字符串),最后是一个后缀<code>(?=&lt;\/\1&gt;)</code>。注意后缀里的<code>\/</code>，它用到了前面提过的字符转义；<code>\1</code>则是一个反向引用，引用的正是捕获的第一组，前面的<code>(\w+)</code>匹配的内容，这样如果前缀实际上是<code>&lt;b&gt;</code>的话，后缀就是<code>&lt;/b&gt;</code>了。整个表达式匹配的是<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code>之间的内容(再次提醒，不包括前缀和后缀本身)。</p>
<blockquote>
<p>请详细分析表达式<code>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)</code>，这个表达式最能表现零宽断言的真正用途。</p>
</blockquote>
<h1 id="section-14"></h1>

<p><strong>注释</strong></p>
<p>小括号的另一种用途是通过语法<code>(?#comment)</code>来包含注释。例如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code>。</p>
<p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=    # 断言要匹配的文本的前缀</span><br><span class="line">&lt;(\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签)</span><br><span class="line">)       # 前缀结束</span><br><span class="line">.*      # 匹配任意文本</span><br><span class="line">(?=     # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\/\1&gt;  # 查找尖括号括起来的内容：前面是一个&quot;/&quot;，后面是先前捕获的标签</span><br><span class="line">)       # 后缀结束</span><br></pre></td></tr></table></figure></p>
<h1 id="section-15"></h1>

<p><strong>贪婪与懒惰</strong></p>
<p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。<br>以这个表达式为例：<code>a.*b</code>，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，<br>它会匹配整个字符串aabab。这被称为<strong>贪婪</strong>匹配。</p>
<p>有时，我们更需要<strong>懒惰</strong>匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，<br>只要在它后面加上一个问号<code>?</code>。这样<code>.*?</code>就意味着 <u>匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复</u>。现在看看懒惰版的例子吧：</p>
<p><code>a.*?b</code>匹配 <u>最短的，以a开始，以b结束的字符串</u>。如果把它应用于aabab的话，它会匹配 <u>aab（第一到第三个字符）</u> 和 <u>ab（第四到第五个字符）</u>。</p>
<p><img src="/resources/image/png/QQ截图20160616223509.png" alt=""></p>
<blockquote>
<p>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。</p>
</blockquote>
<h1 id="section-16"></h1>

<p><strong>处理选项</strong></p>
<p>上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：</p>
<p><img src="/resources/image/png/QQ截图20160616223902.png" alt=""></p>
<blockquote>
<p>在C#中，你可以使用<a href="http://msdn2.microsoft.com/zh-cn/library/h5845fdz.aspx" target="_blank" rel="external">Regex(String, RegexOptions)构造函数</a>来设置正则表达式的处理选项。<br>如：<code>Regex regex = new Regex(@&quot;\ba\w{6}\b&quot;, RegexOptions.IgnoreCase);</code></p>
</blockquote>
<p>一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。</p>
<h1 id="section-17"></h1>

<p><strong>平衡组/递归匹配</strong></p>
<p>有时我们需要匹配像<u>( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构</u>，这时简单地使用<code>\(.+\)</code>则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？</p>
<blockquote>
<p>这里介绍的平衡组语法是由.Net Framework支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。</p>
</blockquote>
<p>为了避免<code>(</code>和<code>\(</code>把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把<u>xx <aa <bbb=""> <bbb> aa&gt; yy</bbb></aa></u>这样的字符串里，最长的配对的尖括号内的内容捕获出来？</p>
<p>这里需要用到以下的语法构造：</p>
<ul>
<li><code>(?&#39;group&#39;)</code> 把捕获的内容命名为group,并压入<strong>堆栈(Stack)</strong></li>
<li><code>(?&#39;-group&#39;)</code> 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</li>
<li><code>(?(group)yes|no)</code> 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</li>
<li><code>(?!)</code> 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</li>
</ul>
<p>我们需要做的是每碰到了左括号，就在压入一个”Open”,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。</p>
<blockquote>
<p>如果你不是一个程序员（或者你自称程序员但是不知道堆栈是什么东西），你就这样理解上面的三种语法吧：第一个就是在黑板上写一个”group”，第二个就是从黑板上擦掉一个”group”，第三个就是看黑板上写的还有没有”group”，如果有就继续匹配yes部分，否则就匹配no部分。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;                         #最外层的左括号</span><br><span class="line">    [^&lt;&gt;]*                #最外层的左括号后面的不是括号的内容</span><br><span class="line">    (</span><br><span class="line">        (</span><br><span class="line">            (?&apos;Open&apos;&lt;)    #碰到了左括号，在黑板上写一个&quot;Open&quot;</span><br><span class="line">            [^&lt;&gt;]*       #匹配左括号后面的不是括号的内容</span><br><span class="line">        )+</span><br><span class="line">        (</span><br><span class="line">            (?&apos;-Open&apos;&gt;)   #碰到了右括号，擦掉一个&quot;Open&quot;</span><br><span class="line">            [^&lt;&gt;]*        #匹配右括号后面不是括号的内容</span><br><span class="line">        )+</span><br><span class="line">    )*</span><br><span class="line">    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的&quot;Open&quot;；如果还有，则匹配失败</span><br><span class="line"></span><br><span class="line">&gt;                         #最外层的右括号</span><br></pre></td></tr></table></figure>
<p>平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配<u>嵌套的<code>&lt;div&gt;</code>标签</u>：<code>&lt;div[^&gt;]*&gt;[^&lt;&gt;]*(((?&#39;Open&#39;&lt;div[^&gt;]*&gt;)[^&lt;&gt;]*)+((?&#39;-Open&#39;&lt;/div&gt;)[^&lt;&gt;]*)+)*(?(Open)(?!))&lt;/div&gt;</code>.</p>
<h1 id="section-18"></h1>

<p><strong>还有些什么东西没提到</strong></p>
<p>上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们–当你需要用到它们的时候。如果你安装了MSDN Library,你也可以在里面找到.net下正则表达式详细的文档。</p>
<p><img src="/resources/image/png/2016-06-16_225427.png" alt=""></p>
<blockquote>
<p>这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装MSDN Library,可以查看<a href="http://msdn.microsoft.com/zh-cn/library/az24scfc.aspx" target="_blank" rel="external">关于正则表达式语言元素的MSDN在线文档</a>。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式语法简明参考]]></title>
      <url>http://zhengdehua.github.io/2016/06/15/regexp-grammer/</url>
      <content type="html"><![CDATA[<h4 id="正则表达式语法简明参考"><a href="#正则表达式语法简明参考" class="headerlink" title="正则表达式语法简明参考"></a>正则表达式语法简明参考</h4><p>一个正则表达式就是由普通字符（例如字符 a 到 z）以及特殊字符（称为元字符）组成的文字模式。该模式描述在查找文字主体时待匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>
<p>这里有一些可能会遇到的正则表达式示例：</p>
<p><img src="/resources/image/png/QQ截图20160616210825.png" alt=""></p>
<p>下表是元字符及其在正则表达式上下文中的行为的一个完整列表：</p>
<blockquote>
<p><code>\</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、</span><br><span class="line">或一个八进制转义符。例如，&apos;n&apos; 匹配字符 &quot;n&quot;。&apos;\n&apos; 匹配一个换行符。</span><br><span class="line">序列 &apos;\\&apos; 匹配 &quot;\&quot; 而 &quot;\(&quot; 则匹配 &quot;(&quot;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>^</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，</span><br><span class="line">^ 也匹配 &apos;\n&apos; 或 &apos;\r&apos; 之后的位置。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>$</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，</span><br><span class="line">$ 也匹配 &apos;\n&apos; 或 &apos;\r&apos; 之前的位置。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>*</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。 * 等价于&#123;0,&#125;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>+</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匹配前面的子表达式一次或多次。例如，&apos;zo+&apos; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，</span><br><span class="line">但不能匹配 &quot;z&quot;。+ 等价于 &#123;1,&#125;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>?</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 中的&quot;do&quot; 。</span><br><span class="line">? 等价于 &#123;0,1&#125;。</span><br><span class="line"></span><br><span class="line">当该字符紧跟在任何一个其他限制符 (*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;) 后面时，</span><br><span class="line">匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，</span><br><span class="line">而默认的贪婪模式则尽可能多的匹配所搜索的字符串。</span><br><span class="line">例如，对于字符串 &quot;oooo&quot;，&apos;o+?&apos; 将匹配单个 &quot;o&quot;，而 &apos;o+&apos; 将匹配所有 &apos;o&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>{n}</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n 是一个非负整数。匹配确定的 n 次。例如，&apos;o&#123;2&#125;&apos; 不能匹配 &quot;Bob&quot; 中的 &apos;o&apos;，</span><br><span class="line">但是能匹配 &quot;food&quot; 中的两个 o。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>{n,}</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n 是一个非负整数。至少匹配n 次。例如，&apos;o&#123;2,&#125;&apos; 不能匹配 &quot;Bob&quot; 中的 &apos;o&apos;，</span><br><span class="line">但能匹配 &quot;foooood&quot; 中的所有 o。&apos;o&#123;1,&#125;&apos; 等价于 &apos;o+&apos;。&apos;o&#123;0,&#125;&apos; 则等价于 &apos;o*&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>{n,m}</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</span><br><span class="line">&quot;o&#123;1,3&#125;&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&apos;o&#123;0,1&#125;&apos; 等价于 &apos;o?&apos;。请注意在逗号和两个数之间不能有空格。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>.</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配除 &quot;\n&quot; 之外的任何单个字符。要匹配包括 &apos;\n&apos; 在内的任何字符，请使用象 &apos;[.\n]&apos; 的模式。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>(pattern)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，</span><br><span class="line">在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。</span><br><span class="line">要匹配圆括号字符，请使用 &apos;\(&apos; 或 &apos;\)&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>(?:pattern)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。</span><br><span class="line">这在使用 &quot;或&quot; 字符 (|) 来组合一个模式的各个部分是很有用。例如， </span><br><span class="line">&apos;industr(?:y|ies) 就是一个比 &apos;industry|industries&apos; 更简略的表达式。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>(?=pattern)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。</span><br><span class="line">这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</span><br><span class="line">例如， &apos;Windows (?=95|98|NT|2000)&apos; 能匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot; ，</span><br><span class="line">但不能匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;。预查不消耗字符，也就是说，</span><br><span class="line">在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，</span><br><span class="line">而不是从包含预查的字符之后开始。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>(?!pattern)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">负向预查，在任何不匹配Negative lookahead matches the search string at any point </span><br><span class="line">where a string not matching pattern 的字符串开始处匹配查找字符串。</span><br><span class="line">这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</span><br><span class="line">例如&apos;Windows (?!95|98|NT|2000)&apos; 能匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;，但不能匹配 </span><br><span class="line">&quot;Windows 2000&quot; 中的 &quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，</span><br><span class="line">在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>x|y</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配 x 或 y。例如，&apos;z|food&apos; 能匹配 &quot;z&quot; 或 &quot;food&quot;。&apos;(z|f)ood&apos; 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>[xyz]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符集合。匹配所包含的任意一个字符。例如， &apos;[abc]&apos; 可以匹配 &quot;plain&quot; 中的 &apos;a&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>[^xyz]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">负值字符集合。匹配未包含的任意字符。例如， &apos;[^abc]&apos; 可以匹配 &quot;plain&quot; 中的&apos;p&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>[a-z]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符范围。匹配指定范围内的任意字符。例如，&apos;[a-z]&apos; 可以匹配 &apos;a&apos; 到 &apos;z&apos; 范围内的任意小写字母字符。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>[^a-z]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">负值字符范围。匹配任何不在指定范围内的任意字符。例如，&apos;[^a-z]&apos; 可以匹配任何不在 </span><br><span class="line">&apos;a&apos; 到 &apos;z&apos; 范围内的任意字符。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\b</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匹配一个单词边界，也就是指单词和空格间的位置。例如， &apos;er\b&apos; 可以匹配&quot;never&quot; 中的 &apos;er&apos;，</span><br><span class="line">但不能匹配 &quot;verb&quot; 中的 &apos;er&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\B</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配非单词边界。&apos;er\B&apos; 能匹配 &quot;verb&quot; 中的 &apos;er&apos;，但不能匹配 &quot;never&quot; 中的 &apos;er&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\cx</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匹配由x指明的控制字符。例如，\cM 匹配一个 Control-M 或回车符。 </span><br><span class="line">x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &apos;c&apos; 字符。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\d</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个数字字符。等价于 [0-9]。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\D</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个非数字字符。等价于 [^0-9]。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\f</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个换页符。等价于 \x0c 和 \cL。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\n</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个换行符。等价于 \x0a 和 \cJ。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\r</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个回车符。等价于 \x0d 和 \cM。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\s</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\S</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\t</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个制表符。等价于 \x09 和 \cI。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\v</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个垂直制表符。等价于 \x0b 和 \cK。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\w</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配包括下划线的任何单词字符。等价于&apos;[A-Za-z0-9_]&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\W</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配任何非单词字符。等价于 &apos;[^A-Za-z0-9_]&apos;。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\xn</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。</span><br><span class="line">例如， &apos;\x41&apos; 匹配 &quot;A&quot;。&apos;\x041&apos; 则等价于 &apos;\x04&apos; &amp; &quot;1&quot;。</span><br><span class="line">正则表达式中可以使用 ASCII 编码。.</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\num</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。</span><br><span class="line">例如，&apos;(.)\1&apos; 匹配两个连续的相同字符。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\n</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，</span><br><span class="line">则 n 为后向引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\nm</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有is preceded by at least nm </span><br><span class="line">个获取得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，</span><br><span class="line">则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，</span><br><span class="line">若  n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\nml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p><code>\un</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (?)。</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN clean失败解决方法]]></title>
      <url>http://zhengdehua.github.io/2016/06/15/svn-clean-failed-exception/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://blog.csdn.net/victory08/article/details/42100325" target="_blank" rel="external">victory08的专栏</a></p>
</blockquote>
<p>svn执行clean up后出现提示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn cleanup failed–previous operation has not finished; run cleanup if it was interrupted</span><br></pre></td></tr></table></figure></p>
<p>svn提交遇到恶心的问题，可能是因为上次cleanup中断后，进入死循环了。</p>
<p>错误如下：<br><img src="/resources/image/jpg/20131107104545_0781.jpg" alt=""></p>
<p>解决方法：清空svn的队列</p>
<p>1.下载<a href="/downloads/tools/sqlite3.zip">sqlite3.exe</a>  </p>
<p>2.找到你项目的.svn文件，查看是否存在wc.db</p>
<p>3.将sqlite3.exe放到.svn的同级目录</p>
<p>4.启动cmd执行sqlite3 .svn/wc.db “select * from work_queue”</p>
<p><img src="/resources/image/jpg/20131107104915_3125.jpg" alt=""></p>
<p>5.看到很多记录，下一步执行delete from work_queue</p>
<p><img src="/resources/image/jpg/20131107104941_2500.jpg" alt=""></p>
<p>6.ok了，现在在到项目里面，执行cleanup，完全没问题了，图标状态也已经恢复了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务]]></title>
      <url>http://zhengdehua.github.io/2016/06/15/database-transaction/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://www.cnblogs.com/zhangpengme/archive/2011/11/24/2261625.html" target="_blank" rel="external">柯枫技术博客-1</a><br>引用 <a href="http://www.cnblogs.com/zhangpengme/archive/2011/11/24/2261975.html" target="_blank" rel="external">柯枫技术博客-2</a></p>
</blockquote>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>　　数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作。 事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID(原子性、一致性、隔离性 和 持久性) 属性。</p>
<h4 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h4><p>　　设想网上购物的一次交易，其付款过程至少包括以下几步数据库操作：<br>　　· 更新客户所购商品的库存信息<br>　　· 保存客户付款信息–可能包括与银行系统的交互<br>　　· 生成订单并且保存到数据库中<br>　　· 更新用户相关信息，例如购物数量等等<br>　　正常的情况下，这些操作将顺利进行，最终交易成功，与交易相关的所有数据库信息也成功地更新。但是，如果在这一系列过程中任何一个环节出了差错，例如在更新商品库存信息时发生异常、该顾客银行帐户存款不足等，都将导致交易失败。一旦交易失败，数据库中所有信息都必须保持交易前的状态不变，比如最后一步更新用户信息时失败而导致交易失败，那么必须保证这笔失败的交易不影响数据库的状态–库存信息没有被更新、用户也没有付款，订单也没有生成。否则，数据库的信息将会一片混乱而不可预测。<br>　　数据库事务正是用来保证这种情况下交易的平稳性和可预测性的技术。</p>
<h4 id="数据库事务的ACID属性"><a href="#数据库事务的ACID属性" class="headerlink" title="数据库事务的ACID属性"></a>数据库事务的ACID属性</h4><p><strong>原子性（atomic）</strong><br>　　事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。<br><strong>一致性（consistent）</strong><br>　　事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。<br><strong>隔离性（insulation）</strong><br>　　由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为可串行性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。防止数据丢失<br><strong>持久性(durability）</strong><br>　　事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。</p>
<h4 id="事务的5种状态"><a href="#事务的5种状态" class="headerlink" title="事务的5种状态"></a>事务的5种状态</h4><ol>
<li><p>活动状态<br>事务在执行时的状态叫活动状态。</p>
</li>
<li><p>部分提交状态<br>事务中最后一条语句被执行后的状态叫部分提交状态。</p>
</li>
<li><p>失败状态<br>事务不能正常执行的状态叫失败状态。</p>
</li>
<li><p>提交状态<br>事务在部分提交后，将往硬盘上写入数据，当最后一条信息写入后的状态叫提交状态。进入提交状态的事务就成功完成了。</p>
</li>
<li><p>中止状态<br>事务回滚并且数据库已经恢复到事务开始执行前的状态叫中止状态。</p>
</li>
</ol>
<h4 id="数据并发的问题"><a href="#数据并发的问题" class="headerlink" title="数据并发的问题"></a>数据并发的问题</h4><p>一个数据库可能拥有多个访问客户端，这些客户端都可以并发方式访问数据库。数据库中的相同数据可能同时被多个事务访问，如果没有采取必要的隔离措施，就会导致各种并发问题，破坏数据的完整性。这些问题可以归结为5类，包括3类数据读问题（脏读、幻象读和不可重复读）以及2类数据更新问题（第一类丢失更新和第二类丢失更新）。下面，我们分别通过实例讲解引发问题的场景。</p>
<p><strong>脏读（dirty read） </strong><br>在讲解脏读前，我们先讲一个笑话：一个有结巴的人在饮料店柜台前转悠，老板很热情地迎上来：“喝一瓶？”，结巴连忙说：“我…喝…喝…”，老板麻利地打开易拉罐递给结巴，结巴终于憋出了他的那句话：“我…喝…喝…喝不起啊！”。在这个笑话中，饮料店老板就对结巴进行了脏读。<br>A事务读取B事务尚未提交的更改数据，并在这个数据的基础上操作。如果恰巧B事务回滚，那么A事务读到的数据根本是不被承认的。来看取款事务和转账事务并发时引发的脏读场景：</p>
<p><img src="/resources/image/png/QQ截图20160615105129.png" alt=""></p>
<p>在这个场景中，B希望取款500元而后又撤销了动作，而A往相同的账户中转账100元，就因为A事务读取了B事务尚未提交的数据，因而造成账户白白丢失了500元。</p>
<p><strong>不可重复读（unrepeatable read） </strong><br>不可重复读是指A事务读取了B事务已经提交的更改数据。假设A在取款事务的过程中，B往该账户转账100元，A两次读取账户的余额发生不一致：</p>
<p><img src="/resources/image/png/QQ截图20160615105602.png" alt=""></p>
<p>在同一事务中，T4时间点和T7时间点读取账户存款余额不一样。</p>
<p><strong>幻象读（phantom read） </strong><br>A事务读取B事务提交的新增数据，这时A事务将出现幻象读的问题。幻象读一般发生在计算统计数据的事务中，举一个例子，假设银行系统在同一个事务中，两次统计存款账户的总金额，在两次统计过程中，刚好新增了一个存款账户，并存入100元，这时，两次统计的总金额将不一致： </p>
<p><img src="/resources/image/png/QQ截图20160615105650.png" alt=""></p>
<p>如果新增数据刚好满足事务的查询条件，这个新数据就进入了事务的视野，因而产生了两个统计不一致的情况。<br>　　幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其它已经提交事务的新增数据，而后者是指读到了已经提交事务的更改数据（更改或删除），为了避免这两种情况，采取的对策是不同的，防止读取到更改数据，只需要对操作的数据添加行级锁，阻止操作中的数据发生变化，而防止读取到新增数据，则往往需要添加表级锁——将整个表锁定，防止新增数据。</p>
<p><strong>第一类丢失更新 </strong><br>A事务撤销时，把已经提交的B事务的更新数据覆盖了。这种错误可能造成很严重的问题，通过下面的账户取款转账就可以看出来：</p>
<p><img src="/resources/image/png/QQ截图20160615105747.png" alt=""></p>
<p>A事务在撤销时，“不小心”将B事务已经转入账户的金额给抹去了。</p>
<p>简言之：<br>两个事务都同时更新一行数据，但是第二个事务却中途失败退出，导致对数据的两个修改都失效了。</p>
<p><strong>第二类丢失更新 </strong><br>A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失：</p>
<p><img src="/resources/image/png/QQ截图20160615105842.png" alt=""></p>
<p>上面的例子里由于支票转账事务覆盖了取款事务对存款余额所做的更新，导致银行最后损失了100元，相反如果转账事务先提交，那么用户账户将损失100元。</p>
<p>简言之：<br>有两个并发事务同时读取同一行数据，然后其中一个对它进行修改提交，而另一个也进行了修改提交。这就会造成<br>第一次写操作失效。 </p>
<h4 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h4><p>为了兼顾并发效率和异常控制，在标准SQL规范中，定义了4个事务隔<br>离级别，（ORACLE和SQLSERER对标准隔离级别有不同的实现 ）</p>
<p>Read Uncommitted：<br>直译就是”读未提交”,意思就是即使一个更新语句没有提交,但是别<br>的事务可以读到这个改变.这是很不安全的. </p>
<p>Read Committed：<br>直译就是”读提交”,意思就是语句提交以后即执行了COMMIT以后<br>别的事务就能读到这个改变. </p>
<p>Repeatable Read：<br>直译就是”可以重复读”,这是说在同一个事务里面先后执行同一个<br>查询语句的时候,得到的结果是一样的. </p>
<p>Serializable:<br>直译就是”序列化”,意思是说这个事务执行的时候不允许别的事务<br>并发执行.</p>
<p><strong>隔离级别对并发的控制</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>LU</th>
<th>DR</th>
<th>NRR</th>
<th>SLU</th>
<th>PR</th>
</tr>
</thead>
<tbody>
<tr>
<td>RU</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>RC</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>RR</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>S</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
</tbody>
</table>
<p><span class="text-danger"><br>    注：LU：丢失更新；DR：脏读；NRR：非重复读；SLU：二类丢失更新；PR：幻像读<br>        RU: 读未提交；RC：读提交；RR：可重复读；S：序列化<br></span></p>
<h4 id="隔离级别与并发性能的关系"><a href="#隔离级别与并发性能的关系" class="headerlink" title="隔离级别与并发性能的关系"></a>隔离级别与并发性能的关系</h4><p><img src="/resources/image/png/1364389498_1995.PNG" alt=""></p>
<h4 id="隔离级别的设置原则"><a href="#隔离级别的设置原则" class="headerlink" title="隔离级别的设置原则"></a>隔离级别的设置原则</h4><ul>
<li>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</li>
<li>对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed，它能够避免脏读，<br>而且具有较好的并发性能。尽管它会导致不可重复读、虚读和第二类丢失更新这些并发问题，<br>在可能出现这类问题的个别场合，可以由应用程序采用<strong>悲观锁</strong>或<strong>乐观锁</strong>来控制。</li>
</ul>
<h5 id="在mysql-exe程序中中设置隔离级别："><a href="#在mysql-exe程序中中设置隔离级别：" class="headerlink" title="在mysql.exe程序中中设置隔离级别："></a>在mysql.exe程序中中设置隔离级别：</h5><ul>
<li><p>每启动一个mysql.exe程序，就会获得一个单独的数据库连接。每个数据库连接都有个全局变量@@tx_isolation，表示当前的事务隔离级别。MySQL默认的隔离级别为Repeatable Read。如果要察看当前的隔离级别，可使用如下SQL命令：<br><code>–mysql&gt; select @@tx_isolation;</code></p>
</li>
<li><p>如果要把当前mysql.exe程序的隔离级别改为Read Committed，可使用如下SQL命令：<br><code>–mysql&gt; set transaction isolation level read committed;</code></p>
</li>
</ul>
<h5 id="在Hibernate中设置隔离级别："><a href="#在Hibernate中设置隔离级别：" class="headerlink" title="在Hibernate中设置隔离级别："></a>在Hibernate中设置隔离级别：</h5><ul>
<li><p>在Hibernate的配置文件中可以显式的设置隔离级别。每一种隔离级别都对应一个整数：<br>–1：Read Uncommitted<br>–2：Read Committed<br>–4：Repeatable Read<br>–8：Serializable</p>
</li>
<li><p>例如，以下代码把hibernate.cfg.xml文件中的隔离级别设为Read Committed：<br><code>hibernate.connection.isolation=2</code><br>对于从数据库连接池中获得的每个连接，Hibernate都会把它改为使用Read Committed隔离级别。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简谈堆和栈]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/heap-stack/</url>
      <content type="html"><![CDATA[<p>引用 <a href="http://blog.jobbole.com/75321/" target="_blank" rel="external">伯乐在线</a></p>
<h3 id="什么是堆和栈，它们在哪儿？"><a href="#什么是堆和栈，它们在哪儿？" class="headerlink" title="什么是堆和栈，它们在哪儿？"></a>什么是堆和栈，它们在哪儿？</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>编程语言书籍中经常解释值类型被创建在栈上，引用类型被创建在堆上，但是并没有本质上解释这堆和栈是什么。我仅有高级语言编程经验，没有看过对此更清晰的解释。我的意思是我理解什么是栈，但是它们到底是什么，在哪儿呢（站在实际的计算机物理内存的角度上看）？</p>
<ol>
<li>在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？</li>
<li>它们的作用范围是什么？</li>
<li>它们的大小由什么决定？</li>
<li>哪个更快？</li>
</ol>
<h4 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h4><p>栈是为执行线程留出的内存空间。当函数被调用的时候，栈顶为局部变量和一些 bookkeeping 数据预留块。当函数执行完毕，块就没有用了，可能在下次的函数调用的时候再被使用。栈通常用后进先出（LIFO）的方式预留空间；因此最近的保留块（reserved block）通常最先被释放。这么做可以使跟踪堆栈变的简单；从栈中释放块（free block）只不过是指针的偏移而已。</p>
<p>堆（heap）是为动态分配预留的内存空间。和栈不一样，从堆上分配和重新分配块没有固定模式；你可以在任何时候分配和释放它。这样使得跟踪哪部分堆已经被分配和被释放变的异常复杂；有许多定制的堆分配策略用来为不同的使用模式下调整堆的性能。</p>
<p>每一个线程都有一个栈，但是每一个应用程序通常都只有一个堆（尽管为不同类型分配内存使用多个堆的情况也是有的）。</p>
<p>直接回答你的问题： </p>
<ol>
<li><p>当线程创建的时候，操作系统（OS）为每一个系统级（system-level）的线程分配栈。<br>通常情况下，操作系统通过调用语言的运行时（runtime）去为应用程序分配堆。 </p>
</li>
<li><p>栈附属于线程，因此当线程结束时栈被回收。堆通常通过运行时在应用程序启动时被分配，<br>当应用程序（进程）退出时被回收。</p>
</li>
<li><p>当线程被创建的时候，设置栈的大小。在应用程序启动的时候，设置堆的大小，但是可以在需要的时候扩展（分配器向操作系统申请更多的内存）。 </p>
</li>
<li><p>栈比堆要快，因为它存取模式使它可以轻松的分配和重新分配内存（指针/整型只是进行简单的递增或者递减运算），然而堆在分配和释放的时候有更多的复杂的 bookkeeping参与。另外，在栈上的每个字节频繁的被复用也就意味着它可能映射到处理器缓存中，所以很快（译者注：局部性原理）。</p>
</li>
</ol>
<h4 id="答案二"><a href="#答案二" class="headerlink" title="答案二"></a>答案二</h4><p><strong>Stack:</strong></p>
<ol>
<li>和堆一样存储在计算机 RAM 中。</li>
<li>在栈上创建变量的时候会扩展，并且会自动回收。</li>
<li>相比堆而言在栈上分配要快的多。</li>
<li>用数据结构中的栈实现。</li>
<li>存储局部数据，返回地址，用做参数传递。</li>
<li>当用栈过多时可导致栈溢出（无穷次（大量的）的递归调用，或者大量的内存分配）。</li>
<li>在栈上的数据可以直接访问（不是非要使用指针访问）。</li>
<li>如果你在编译之前精确的知道你需要分配数据的大小并且不是太大的时候，可以使用栈。</li>
<li>当你程序启动时决定栈的容量上限。</li>
</ol>
<p><strong>Heap:</strong></p>
<ol>
<li>和栈一样存储在计算机RAM。</li>
<li>在堆上的变量必须要手动释放，不存在作用域的问题。数据可用 delete, delete[] 或者 free 来释放。</li>
<li>相比在栈上分配内存要慢。</li>
<li>通过程序按需分配。</li>
<li>大量的分配和释放可造成内存碎片。</li>
<li>在 C++ 中，在堆上创建数的据使用指针访问，用 new 或者 malloc 分配内存。</li>
<li>如果申请的缓冲区过大的话，可能申请失败。</li>
<li>在运行期间你不知道会需要多大的数据或者你需要分配大量的内存的时候，建议你使用堆。</li>
<li>可能造成内存泄露。 </li>
</ol>
<p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int foo()</span><br><span class="line">&#123;</span><br><span class="line">    char *pBuffer; //&lt;--nothing allocated yet (excluding the pointer itself, which is allocated here on the stack).</span><br><span class="line">    bool b = true; // Allocated on the stack.</span><br><span class="line">    if(b)</span><br><span class="line">    &#123;</span><br><span class="line">        //Create 500 bytes on the stack</span><br><span class="line">        char buffer[500];</span><br><span class="line"></span><br><span class="line">        //Create 500 bytes on the heap</span><br><span class="line">        pBuffer = new char[500];</span><br><span class="line"></span><br><span class="line">    &#125;//&lt;-- buffer is deallocated here, pBuffer is not</span><br><span class="line">&#125;//&lt;--- oops there&apos;s a memory leak, I should have called delete[] pBuffer;</span><br></pre></td></tr></table></figure></p>
<h4 id="答案三"><a href="#答案三" class="headerlink" title="答案三"></a>答案三</h4><p>堆和栈是两种内存分配的两个统称。可能有很多种不同的实现方式，但是实现要符合几个基本的概念:</p>
<ol>
<li><p>对栈而言，栈中的新加数据项放在其他数据的顶部，移除时你也只能移除最顶部的数据（不能越位获取）。<br><img src="/resources/image/jpg/8fb5e10cc2c0a32a009ee5a81ae5e7fe.jpg" alt=""></p>
</li>
<li><p>对堆而言，数据项位置没有固定的顺序。你可以以任何顺序插入和删除，因为他们没有“顶部”数据这一概念。<br><img src="/resources/image/jpg/a3992ba4954f116ac93e51c8748e33ad.jpg" alt=""></p>
</li>
</ol>
<p>上面上个图片很好的描述了堆和栈分配内存的方式。</p>
<h5 id="在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？"><a href="#在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？" class="headerlink" title="在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？"></a>在通常情况下由操作系统（OS）和语言的运行时（runtime）控制吗？</h5><p>如前所述，堆和栈是一个统称，可以有很多的实现方式。计算机程序通常有一个栈叫做<a href="https://en.wikipedia.org/wiki/Call_stack" target="_blank" rel="external">调用栈</a>，用来存储当前函数调用相关的信息（比如：主调函数的地址，局部变量），因为函数调用之后需要返回给主调函数。栈通过扩展和收缩来承载信息。实际上，程序不是由运行时来控制的，它由编程语言、操作系统甚至是系统架构来决定。</p>
<p>堆是在任何内存中动态和随机分配的（内存的）统称；也就是无序的。内存通常由操作系统分配，通过应用程序调用 API 接口去实现分配。在管理动态分配内存上会有一些额外的开销，不过这由操作系统来处理。</p>
<h5 id="它们的作用范围是什么？"><a href="#它们的作用范围是什么？" class="headerlink" title="它们的作用范围是什么？"></a>它们的作用范围是什么？</h5><p>调用栈是一个低层次的概念，就程序而言，它和“作用范围”没什么关系。如果你反汇编一些代码，你就会看到指针引用堆栈部分。就高级语言而言，语言有它自己的范围规则。一旦函数返回，函数中的局部变量会直接直接释放。你的编程语言就是依据这个工作的。</p>
<p>在堆中，也很难去定义。作用范围是由操作系统限定的，但是你的编程语言可能增加它自己的一些规则，去限定堆在应用程序中的范围。体系架构和操作系统是使用虚拟地址的，然后由处理器翻译到实际的物理地址中，还有页面错误等等。它们记录那个页面属于那个应用程序。不过你不用关心这些，因为你仅仅在你的编程语言中分配和释放内存，和一些错误检查（出现分配失败和释放失败的原因）。</p>
<h5 id="它们的大小由什么决定？"><a href="#它们的大小由什么决定？" class="headerlink" title="它们的大小由什么决定？"></a>它们的大小由什么决定？</h5><p>依旧，依赖于语言，编译器，操作系统和架构。栈通常提前分配好了，因为栈必须是连续的内存块。语言的编译器或者操作系统决定它的大小。不要在栈上存储大块数据，这样可以保证有足够的空间不会溢出，除非出现了无限递归的情况（额，栈溢出了）或者其它不常见了编程决议。</p>
<p>堆是任何可以动态分配的内存的统称。这要看你怎么看待它了，它的大小是变动的。在现代处理器中和操作系统的工作方式是高度抽象的，因此你在正常情况下不需要担心它实际的大小，除非你必须要使用你还没有分配的内存或者已经释放了的内存。</p>
<h5 id="哪个更快一些？"><a href="#哪个更快一些？" class="headerlink" title="哪个更快一些？"></a>哪个更快一些？</h5><p>栈更快因为所有的空闲内存都是连续的，因此不需要对空闲内存块通过列表来维护。只是一个简单的指向当前栈顶的指针。编译器通常用一个专门的、快速的寄存器来实现。更重要的一点事是，随后的栈上操作通常集中在一个内存块的附近，这样的话有利于处理器的高速访问（译者注：局部性原理）。</p>
<h4 id="答案四"><a href="#答案四" class="headerlink" title="答案四"></a>答案四</h4><p>你问题的答案是依赖于实现的，根据不同的编译器和处理器架构而不同。下面简单的解释一下：</p>
<ol>
<li>栈和堆都是用来从底层操作系统中获取内存的。</li>
<li>在多线程环境下每一个线程都可以有他自己完全的独立的栈，但是他们共享堆。并行存取被堆控制而不是栈。</li>
</ol>
<p><strong>堆:</strong></p>
<ol>
<li><p>堆包含一个链表来维护已用和空闲的内存块。在堆上新分配（用 new 或者 malloc）内存是从空闲的内存块中找到一些满足要求的合适块。这个操作会更新堆中的块链表。这些元信息也存储在堆上，经常在每个块的头部一个很小区域。</p>
</li>
<li><p>堆的增加新快通常从地地址向高地址扩展。因此你可以认为堆随着内存分配而不断的增加大小。如果申请的内存大小很小的话，通常从底层操作系统中得到比申请大小要多的内存。</p>
</li>
<li><p>申请和释放许多小的块可能会产生如下状态：在已用块之间存在很多小的空闲块。进而申请大块内存失败，虽然空闲块的总和足够，但是空闲的小块是零散的，不能满足申请的大小，。这叫做“堆碎片”。</p>
</li>
<li><p>当旁边有空闲块的已用块被释放时，新的空闲块可能会与相邻的空闲块合并为一个大的空闲块，这样可以有效的减少“堆碎片”的产生。</p>
</li>
</ol>
<p><img src="/resources/image/png/b4f167893c867d7380c47add6ccf887a.png" alt=""></p>
<p><strong>栈:</strong></p>
<ol>
<li><p>栈经常与 sp 寄存器（译者注：”stack pointer”，了解汇编的朋友应该都知道）一起工作，最初 sp 指向栈顶（栈的高地址）。</p>
</li>
<li><p>CPU 用 push 指令来将数据压栈，用 pop 指令来弹栈。当用 push 压栈时，sp 值减少（向低地址扩展）。当用 pop 弹栈时，sp 值增大。存储和获取数据都是 CPU 寄存器的值。</p>
</li>
<li><p>当函数被调用时，CPU使用特定的指令把当前的 IP （译者注：“instruction pointer”，是一个寄存器，用来记录 CPU 指令的位置）压栈。即执行代码的地址。CPU 接下来将调用函数地址赋给 IP ，进行调用。当函数返回时，旧的 IP 被弹栈，CPU 继续去函数调用之前的代码。</p>
</li>
<li><p>当进入函数时，sp 向下扩展，扩展到确保为函数的局部变量留足够大小的空间。如果函数中有一个 32-bit 的局部变量会在栈中留够四字节的空间。当函数返回时，sp 通过返回原来的位置来释放空间。</p>
</li>
<li><p>如果函数有参数的话，在函数调用之前，会将参数压栈。函数中的代码通过 sp 的当前位置来定位参数并访问它们。</p>
</li>
<li><p>函数嵌套调用和使用魔法一样，每一次新调用的函数都会分配函数参数，返回值地址、局部变量空间、嵌套调用的活动记录都要被压入栈中。函数返回时，按照正确方式的撤销。</p>
</li>
<li><p>栈要受到内存块的限制，不断的函数嵌套/为局部变量分配太多的空间，可能会导致栈溢出。当栈中的内存区域都已经被使用完之后继续向下写（低地址），会触发一个 CPU 异常。这个异常接下会通过语言的运行时转成各种类型的栈溢出异常。（译者注：“不同语言的异常提示不同，因此通过语言运行时来转换”我想他表达的是这个含义）</p>
</li>
</ol>
<p><img src="/resources/image/png/4cc14ac67f20aa09657ceb6e1bff1ff7.png" alt=""></p>
<h5 id="函数的分配可以用堆来代替栈吗？"><a href="#函数的分配可以用堆来代替栈吗？" class="headerlink" title="函数的分配可以用堆来代替栈吗？"></a>函数的分配可以用堆来代替栈吗？</h5><p>不可以的，函数的活动记录（即局部或者自动变量）被分配在栈上， 这样做不但存储了这些变量，而且可以用来嵌套函数的追踪。</p>
<p>堆的管理依赖于运行时环境，C 使用 malloc ，C++ 使用 new ，但是很多语言有垃圾回收机制。</p>
<p>栈是更低层次的特性与处理器架构紧密的结合到一起。当堆不够时可以扩展空间，这不难做到，因为可以有库函数可以调用。但是，扩展栈通常来说是不可能的，因为在栈溢出的时候，执行线程就被操作系统关闭了，这已经太晚了。</p>
<blockquote>
<p>作者提出的一些不确定点</p>
<ol>
<li><p>我没有听过 bookkeeping data 这种说法，故没有翻译。从上下文理解来看，可以想成是用来寄存器值？函数参数？返回地址？如果有了解具体含义的朋友，烦请告知。</p>
</li>
<li><p>栈和堆栈是一回事，英文表达是 stack，堆是 heap。</p>
</li>
<li><p>调用栈的概念，我是第一次听说，不太熟悉。大家可以去查查资料研究一下。</p>
</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tomcat 常见问题]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/tomcat-exception/</url>
      <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>Tomcat JNDI 设置数据源解析类</strong></p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>tomcat 中 context.xml 中增加属性 <code>factory=&quot;org.apache.commons.dbcp.BasicDataSourceFactory&quot;</code></p>
<hr>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p><strong>内存溢出</strong></p>
<h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jvm 内存配置详解]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/jvm-hotspot/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html" target="_blank" rel="external">oracle 官网</a></p>
</blockquote>
<h4 id="Behavioral-Options"><a href="#Behavioral-Options" class="headerlink" title="Behavioral Options"></a>Behavioral Options</h4><p><code>-XX:-AllowUserSignalHandlers</code></p>
<blockquote>
<p>Do not complain if the application installs signal handlers. (Relevant to Solaris and Linux only.)</p>
</blockquote>
<p><code>-XX:AltStackSize=16384</code></p>
<blockquote>
<p>Alternate signal stack size (in Kbytes). (Relevant to Solaris only, removed from 5.0.)</p>
</blockquote>
<p><code>-XX:-DisableExplicitGC</code></p>
<blockquote>
<p>By default calls to System.gc() are enabled (-XX:-DisableExplicitGC). Use -XX:+DisableExplicitGC to disable calls to System.gc(). Note that the JVM still performs garbage collection when necessary.</p>
</blockquote>
<p><code>-XX:+FailOverToOldVerifier</code></p>
<blockquote>
<p>Fail over to old verifier when the new type checker fails. (Introduced in 6.)</p>
</blockquote>
<p><code>-XX:+HandlePromotionFailure</code></p>
<blockquote>
<p>The youngest generation collection does not require a guarantee of full promotion of all live objects. (Introduced in 1.4.2 update 11) [5.0 and earlier: false.]</p>
</blockquote>
<p><code>-XX:+MaxFDLimit</code></p>
<blockquote>
<p>Bump the number of file descriptors to max. (Relevant  to Solaris only.)</p>
</blockquote>
<p><code>-XX:PreBlockSpin=10</code></p>
<blockquote>
<p>Spin count variable for use with -XX:+UseSpinning. Controls the maximum spin iterations allowed before entering operating system thread synchronization code. (Introduced in 1.4.2.)</p>
</blockquote>
<p><code>-XX:-RelaxAccessControlCheck</code></p>
<blockquote>
<p>Relax the access control checks in the verifier. (Introduced in 6.)</p>
</blockquote>
<p><code>-XX:+ScavengeBeforeFullGC</code></p>
<blockquote>
<p>Do young generation GC prior to a full GC. (Introduced in 1.4.1.)</p>
</blockquote>
<p><code>-XX:+UseAltSigs</code></p>
<blockquote>
<p>Use alternate signals instead of SIGUSR1 and SIGUSR2 for VM internal signals. (Introduced in 1.3.1 update 9, 1.4.1. Relevant to Solaris only.)</p>
</blockquote>
<p><code>-XX:+UseBoundThreads</code></p>
<blockquote>
<p>Bind user level threads to kernel threads. (Relevant to Solaris only.)</p>
</blockquote>
<p><code>-XX:-UseConcMarkSweepGC</code></p>
<blockquote>
<p>Use concurrent mark-sweep collection for the old generation. (Introduced in 1.4.1)</p>
</blockquote>
<p><code>-XX:+UseGCOverheadLimit</code></p>
<blockquote>
<p>Use a policy that limits the proportion of the VM’s time that is spent in GC before an OutOfMemory error is thrown. (Introduced in 6.)</p>
</blockquote>
<p><code>-XX:+UseLWPSynchronization</code></p>
<blockquote>
<p>Use LWP-based instead of thread based synchronization. (Introduced in 1.4.0. Relevant to Solaris only.)</p>
</blockquote>
<p><code>-XX:-UseParallelGC</code></p>
<blockquote>
<p>Use parallel garbage collection for scavenges. (Introduced in 1.4.1)</p>
</blockquote>
<p><code>-XX:-UseParallelOldGC</code></p>
<blockquote>
<p>Use parallel garbage collection for the full collections. Enabling this option automatically sets -XX:+UseParallelGC. (Introduced in 5.0 update 6.)</p>
</blockquote>
<p><code>-XX:-UseSerialGC</code></p>
<blockquote>
<p>Use serial garbage collection. (Introduced in 5.0.)</p>
</blockquote>
<p><code>-XX:-UseSpinning</code></p>
<blockquote>
<p>Enable naive spinning on Java monitor before entering operating system thread synchronizaton code. (Relevant to 1.4.2 and 5.0 only.) [1.4.2, multi-processor Windows platforms: true]</p>
</blockquote>
<p><code>-XX:+UseTLAB</code></p>
<blockquote>
<p>Use thread-local object allocation (Introduced in 1.4.0, known as UseTLE prior to that.) [1.4.2 and earlier, x86 or with -client: false]</p>
</blockquote>
<p><code>-XX:+UseSplitVerifier</code></p>
<blockquote>
<p>Use the new type checker with StackMapTable attributes. (Introduced in 5.0.)[5.0: false]</p>
</blockquote>
<p><code>-XX:+UseThreadPriorities</code></p>
<blockquote>
<p>Use native thread priorities.</p>
</blockquote>
<p><code>-XX:+UseVMInterruptibleIO</code></p>
<blockquote>
<p>Thread interrupt before or with EINTR for I/O operations results in OS_INTRPT. (Introduced in 6. Relevant to Solaris only.)</p>
</blockquote>
<h4 id="Garbage-First-G1-Garbage-Collection-Options"><a href="#Garbage-First-G1-Garbage-Collection-Options" class="headerlink" title="Garbage First (G1) Garbage Collection Options"></a>Garbage First (G1) Garbage Collection Options</h4><p><code>-XX:+UseG1GC</code></p>
<blockquote>
<p>Use the Garbage First (G1) Collector</p>
</blockquote>
<p><code>-XX:MaxGCPauseMillis=n</code></p>
<blockquote>
<p>Sets a target for the maximum GC pause time. This is a soft goal, and the JVM will make its best effort to achieve it.</p>
</blockquote>
<p><code>-XX:InitiatingHeapOccupancyPercent=n</code></p>
<blockquote>
<p>Percentage of the (entire) heap occupancy to start a concurrent GC cycle. It is used by GCs that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (e.g., G1). A value of 0 denotes ‘do constant GC cycles’. The default value is 45.</p>
</blockquote>
<p><code>-XX:NewRatio=n</code></p>
<blockquote>
<p>Ratio of old/new generation sizes. The default value is 2.</p>
</blockquote>
<p><code>-XX:SurvivorRatio=n</code></p>
<blockquote>
<p>Ratio of eden/survivor space size. The default value is 8.</p>
</blockquote>
<p><code>-XX:MaxTenuringThreshold=n</code></p>
<blockquote>
<p>Maximum value for tenuring threshold. The default value is 15.</p>
</blockquote>
<p><code>-XX:ParallelGCThreads=n</code></p>
<blockquote>
<p>Sets the number of threads used during parallel phases of the garbage collectors. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:ConcGCThreads=n</code></p>
<blockquote>
<p>Number of threads concurrent garbage collectors will use. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:G1ReservePercent=n</code></p>
<blockquote>
<p>Sets the amount of heap that is reserved as a false ceiling to reduce the possibility of promotion failure. The default value is 10.</p>
</blockquote>
<p><code>-XX:G1HeapRegionSize=n</code></p>
<blockquote>
<p>With G1 the Java heap is subdivided into uniformly sized regions. This sets the size of the individual sub-divisions. The default value of this parameter is determined ergonomically based upon heap size. The minimum value is 1Mb and the maximum value is 32Mb.</p>
</blockquote>
<hr>
<h4 id="Performance-Options"><a href="#Performance-Options" class="headerlink" title="Performance Options"></a>Performance Options</h4><p><code>-XX:+AggressiveOpts</code></p>
<blockquote>
<p>Turn on point performance compiler optimizations that are expected to be default in upcoming releases. (Introduced in 5.0 update 6.)</p>
</blockquote>
<p><code>-XX:CompileThreshold=10000</code></p>
<blockquote>
<p>Number of method invocations/branches before compiling [-client: 1,500]</p>
</blockquote>
<p><code>-XX:LargePageSizeInBytes=4m</code></p>
<blockquote>
<p>Sets the large page size used for the Java heap. (Introduced in 1.4.0 update 1.) [amd64: 2m.]</p>
</blockquote>
<p><code>-XX:MaxHeapFreeRatio=70</code></p>
<blockquote>
<p>Maximum percentage of heap free after GC to avoid shrinking.</p>
</blockquote>
<p><code>-XX:MaxNewSize=size</code></p>
<blockquote>
<p>Maximum size of new generation (in bytes). Since 1.4, MaxNewSize is computed as a function of NewRatio. [1.3.1 Sparc: 32m; 1.3.1 x86: 2.5m.]</p>
</blockquote>
<p><code>-XX:MaxPermSize=64m</code></p>
<blockquote>
<p>Size of the Permanent Generation.  [5.0 and newer: 64 bit VMs are scaled 30% larger; 1.4 amd64: 96m; 1.3.1 -client: 32m.]</p>
</blockquote>
<p><code>-XX:MinHeapFreeRatio=40</code></p>
<blockquote>
<p>Minimum percentage of heap free after GC to avoid expansion.</p>
</blockquote>
<p><code>-XX:NewRatio=2</code></p>
<blockquote>
<p>Ratio of old/new generation sizes. [Sparc -client: 8; x86 -server: 8; x86 -client: 12.]-client: 4 (1.3) 8 (1.3.1+), x86: 12]</p>
</blockquote>
<p><code>-XX:NewSize=2m</code></p>
<blockquote>
<p>Default size of new generation (in bytes) [5.0 and newer: 64 bit VMs are scaled 30% larger; x86: 1m; x86, 5.0 and older: 640k]</p>
</blockquote>
<p><code>-XX:ReservedCodeCacheSize=32m</code></p>
<blockquote>
<p>Reserved code cache size (in bytes) - maximum code cache size. [Solaris 64-bit, amd64, and -server x86: 2048m; in 1.5.0_06 and earlier, Solaris 64-bit and amd64: 1024m.]</p>
</blockquote>
<p><code>-XX:SurvivorRatio=8</code></p>
<blockquote>
<p>Ratio of eden/survivor space size [Solaris amd64: 6; Sparc in 1.3.1: 25; other Solaris platforms in 5.0 and earlier: 32]</p>
</blockquote>
<p><code>-XX:TargetSurvivorRatio=50</code></p>
<blockquote>
<p>Desired percentage of survivor space used after scavenge.</p>
</blockquote>
<p><code>-XX:ThreadStackSize=512</code></p>
<blockquote>
<p>Thread Stack Size (in Kbytes). (0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</p>
</blockquote>
<p><code>-XX:+UseBiasedLocking</code></p>
<blockquote>
<p>Enable biased locking. For more details, see this <a href="http://www.oracle.com/technetwork/java/tuning-139912.html" target="_blank" rel="external">tuning example</a>. (Introduced in 5.0 update 6.) [5.0: false]</p>
</blockquote>
<p><code>-XX:+UseFastAccessorMethods</code></p>
<blockquote>
<p>Use optimized versions of Get Field.</p>
</blockquote>
<p><code>-XX:-UseISM</code></p>
<blockquote>
<p>Use Intimate Shared Memory. [Not accepted for non-Solaris platforms.] For details, see <a href="http://www.oracle.com/technetwork/java/ism-139376.html" target="_blank" rel="external">Intimate Shared Memory</a>.</p>
</blockquote>
<p><code>-XX:+UseLargePages</code></p>
<blockquote>
<p>Use large page memory. (Introduced in 5.0 update 5.) For details, see <a href="http://www.oracle.com/technetwork/java/javase/tech/largememory-jsp-137182.html" target="_blank" rel="external">Java Support for Large Memory Pages</a>.</p>
</blockquote>
<p><code>-XX:+UseMPSS</code></p>
<blockquote>
<p>Use Multiple Page Size Support w/4mb pages for the heap. Do not use with ISM as this replaces the need for ISM. (Introduced in 1.4.0 update 1, Relevant to Solaris 9 and newer.) [1.4.1 and earlier: false]</p>
</blockquote>
<p><code>-XX:+UseStringCache</code></p>
<blockquote>
<p>Enables caching of commonly allocated strings.</p>
</blockquote>
<p><code>-XX:AllocatePrefetchLines=1</code></p>
<blockquote>
<p>Number of cache lines to load after the last object allocation using prefetch instructions generated in JIT compiled code. Default values are 1 if the last allocated object was an instance and 3 if it was an array. </p>
</blockquote>
<p><code>-XX:AllocatePrefetchStyle=1</code></p>
<blockquote>
<p>Generated code style for prefetch instructions.<br>0 - no prefetch instructions are generate<em>d</em>,<br>1 - execute prefetch instructions after each allocation,<br>2 - use TLAB allocation watermark pointer to gate when prefetch instructions are executed.</p>
</blockquote>
<p><code>-XX:+UseCompressedStrings</code></p>
<blockquote>
<p>Use a byte[] for Strings which can be represented as pure ASCII. (Introduced in Java 6 Update 21 Performance Release) </p>
</blockquote>
<p><code>-XX:+OptimizeStringConcat</code></p>
<blockquote>
<p>Optimize String concatenation operations where possible. (Introduced in Java 6 Update 20) </p>
</blockquote>
<hr>
<h4 id="Debugging-Options"><a href="#Debugging-Options" class="headerlink" title="Debugging Options"></a>Debugging Options</h4><p><code>-XX:-CITime</code></p>
<blockquote>
<p>Prints time spent in JIT Compiler. (Introduced in 1.4.0.)</p>
</blockquote>
<p><code>-XX:ErrorFile=./hs_err_pid&lt;pid&gt;.log</code></p>
<blockquote>
<p>If an error occurs, save the error data to this file. (Introduced in 6.)</p>
</blockquote>
<p><code>-XX:-ExtendedDTraceProbes</code></p>
<blockquote>
<p>Enable performance-impacting <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/vm/dtrace.html" target="_blank" rel="external">dtrace</a> probes. (Introduced in 6. Relevant to Solaris only.)</p>
</blockquote>
<p><code>-XX:HeapDumpPath=./java_pid&lt;pid&gt;.hprof</code></p>
<blockquote>
<p>Path to directory or filename for heap dump. Manageable. (Introduced in 1.4.2 update 12, 5.0 update 7.)</p>
</blockquote>
<p><code>-XX:-HeapDumpOnOutOfMemoryError</code></p>
<blockquote>
<p>Dump heap to file when java.lang.OutOfMemoryError is thrown. Manageable. (Introduced in 1.4.2 update 12, 5.0 update 7.)</p>
</blockquote>
<p><code>-XX:OnError=&quot;&lt;cmd args&gt;;&lt;cmd args&gt;&quot;</code></p>
<blockquote>
<p>Run user-defined commands on fatal error. (Introduced in 1.4.2 update 9.)</p>
</blockquote>
<p><code>-XX:OnOutOfMemoryError=&quot;&lt;cmd args&gt;; &lt;cmd args&gt;&quot;</code></p>
<blockquote>
<p>Run user-defined commands when an OutOfMemoryError is first thrown. (Introduced in 1.4.2 update 12, 6)</p>
</blockquote>
<p><code>-XX:-PrintClassHistogram</code></p>
<blockquote>
<p>Print a histogram of class instances on Ctrl-Break. Manageable. (Introduced in 1.4.2.) The <a href="http://docs.oracle.com/javase/6/docs/technotes/tools/share/jmap.html" target="_blank" rel="external">jmap -histo</a> command provides equivalent functionality.</p>
</blockquote>
<p><code>-XX:-PrintConcurrentLocks</code></p>
<blockquote>
<p>Print java.util.concurrent locks in Ctrl-Break thread dump. Manageable. (Introduced in 6.) The <a href="http://docs.oracle.com/javase/6/docs/technotes/tools/share/jstack.html" target="_blank" rel="external">jstack -l</a> command provides equivalent functionality.</p>
</blockquote>
<p><code>-XX:-PrintCommandLineFlags</code></p>
<blockquote>
<p>Print flags that appeared on the command line. (Introduced in 5.0.)</p>
</blockquote>
<p><code>-XX:-PrintCompilation</code></p>
<blockquote>
<p>Print message when a method is compiled.</p>
</blockquote>
<p><code>-XX:-PrintGC</code></p>
<blockquote>
<p>Print messages at garbage collection. Manageable.</p>
</blockquote>
<p><code>-XX:-PrintGCDetails</code></p>
<blockquote>
<p>Print more details at garbage collection. Manageable. (Introduced in 1.4.0.)</p>
</blockquote>
<p><code>-XX:-PrintGCTimeStamps</code></p>
<blockquote>
<p>Print timestamps at garbage collection. Manageable (Introduced in 1.4.0.)</p>
</blockquote>
<p><code>-XX:-PrintTenuringDistribution</code></p>
<blockquote>
<p>Print tenuring age information.</p>
</blockquote>
<p><code>-XX:-PrintAdaptiveSizePolicy</code></p>
<blockquote>
<p>Enables printing of information about adaptive generation sizing.</p>
</blockquote>
<p><code>-XX:-TraceClassLoading</code></p>
<blockquote>
<p>Trace loading of classes.</p>
</blockquote>
<p><code>-XX:-TraceClassLoadingPreorder</code></p>
<blockquote>
<p>Trace all classes loaded in order referenced (not loaded). (Introduced in 1.4.2.)</p>
</blockquote>
<p><code>-XX:-TraceClassResolution</code></p>
<blockquote>
<p>Trace constant pool resolutions. (Introduced in 1.4.2.)</p>
</blockquote>
<p><code>-XX:-TraceClassUnloading</code></p>
<blockquote>
<p>Trace unloading of classes.</p>
</blockquote>
<p><code>-XX:-TraceLoaderConstraints</code></p>
<blockquote>
<p>Trace recording of loader constraints. (Introduced in 6.)</p>
</blockquote>
<p><code>-XX:+PerfDataSaveToFile</code></p>
<blockquote>
<p>Saves jvmstat binary data on exit.</p>
</blockquote>
<p><code>-XX:ParallelGCThreads=n</code></p>
<blockquote>
<p>Sets the number of garbage collection threads in the young and old parallel garbage collectors. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:+UseCompressedOops</code></p>
<blockquote>
<p>Enables the use of compressed pointers (object references represented as 32 bit offsets instead of 64-bit pointers) for optimized 64-bit performance with Java heap sizes less than 32gb.</p>
</blockquote>
<p><code>-XX:+AlwaysPreTouch</code></p>
<blockquote>
<p>Pre-touch the Java heap during JVM initialization. Every page of the heap is thus demand-zeroed during initialization rather than incrementally during application execution.</p>
</blockquote>
<p><code>-XX:AllocatePrefetchDistance=n</code></p>
<blockquote>
<p>Sets the prefetch distance for object allocation. Memory about to be written with the value of new objects is prefetched into cache at this distance (in bytes) beyond the address of the last allocated object. Each Java thread has its own allocation point. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:InlineSmallCode=n</code></p>
<blockquote>
<p>Inline a previously compiled method only if its generated native code size is less than this. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:MaxInlineSize=35</code></p>
<blockquote>
<p>Maximum bytecode size of a method to be inlined.</p>
</blockquote>
<p><code>-XX:FreqInlineSize=n</code></p>
<blockquote>
<p>Maximum bytecode size of a frequently executed method to be inlined. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:LoopUnrollLimit=n</code></p>
<blockquote>
<p>Unroll loop bodies with server compiler intermediate representation node count less than this value. The limit used by the server compiler is a function of this value, not the actual value. The default value varies with the platform on which the JVM is running.</p>
</blockquote>
<p><code>-XX:InitialTenuringThreshold=7</code></p>
<blockquote>
<p>Sets the initial tenuring threshold for use in adaptive GC sizing in the parallel young collector. The tenuring threshold is the number of times an object survives a young collection before being promoted to the old, or tenured, generation.</p>
</blockquote>
<p><code>-XX:MaxTenuringThreshold=n</code></p>
<blockquote>
<p>Sets the maximum tenuring threshold for use in adaptive GC sizing. The current largest value is 15. The default value is 15 for the parallel collector and is 4 for CMS.</p>
</blockquote>
<p><code>-Xloggc:&lt;filename&gt;</code></p>
<blockquote>
<p>Log GC verbose output to specified file. The verbose output is controlled by the normal verbose GC flags.</p>
</blockquote>
<p><code>-XX:-UseGCLogFileRotation</code></p>
<blockquote>
<p>Enabled GC log rotation, requires -Xloggc.</p>
</blockquote>
<p><code>-XX:NumberOfGClogFiles=1</code></p>
<blockquote>
<p>Set the number of files to use when rotating logs, must be &gt;= 1. The rotated log files will use the following naming scheme, <filename>.0, <filename>.1, …, <filename>.n-1.</filename></filename></filename></p>
</blockquote>
<p><code>-XX:GCLogFileSize=8K</code></p>
<blockquote>
<p>The size of the log file at which point the log will be rotated, must be &gt;= 8K.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql 常见问题]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/mysql-exception/</url>
      <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its de 错误解</span><br></pre></td></tr></table></figure>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>这是我们开启了bin-log, 我们就必须指定我们的函数是否是<br>1 DETERMINISTIC 不确定的<br>2 NO SQL 没有SQl语句，当然也不会修改数据<br>3 READS SQL DATA 只是读取数据，当然也不会修改数据<br>4 MODIFIES SQL DATA 要修改数据<br>5 CONTAINS SQL 包含了SQL语句</p>
<p>其中在function里面，只有 DETERMINISTIC, NO SQL 和 READS SQL DATA 被支持。如果我们开启了 bin-log, 我们就必须为我们的function指定一个参数。</p>
<p>在MySQL中创建函数时出现这种错误的解决方法：<br><code>set global log_bin_trust_function_creators=TRUE;</code></p>
<hr>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql 1449 ： The user specified as a definer (&apos;root&apos;@&apos;%&apos;) does not exist</span><br></pre></td></tr></table></figure>
<h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h4><p>权限问题，授权 给 root  所有sql 权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to root@&quot;%&quot; identified by &quot;.&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p><strong>mysql无法被远程访问</strong></p>
<h4 id="方案-2"><a href="#方案-2" class="headerlink" title="方案"></a>方案</h4><p>通过 mysql 客户端软件或者通过命令行进入 mysql, 然后在 mysql 数据库中的 user 表中，将 localhost 改为 %, 然后运行 flush privileges; 即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql 常用命令]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/mysql-common/</url>
      <content type="html"><![CDATA[<h4 id="更改用户密码"><a href="#更改用户密码" class="headerlink" title="更改用户密码"></a>更改用户密码</h4><ul>
<li><p>通过 mysqladmin 命令<br><code>mysqladmin -u user  -p password PASSWORD        (PASSWORD 为新密码)</code></p>
</li>
<li><p>update user 语句, 这种方式必须先用 root 账户登入 mysql, 然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update user set password=PASSWORD(&apos;123&apos;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>set password 语句, 这种方式必须先用 root 账户登入 mysql, 然后执行<br><code>SET PASSWORD  FOR root=PASSWORD(&#39;123&#39;);</code></p>
</li>
</ul>
<h4 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h4><ul>
<li>解决 mysql 查询字段不区分大小写问题，可以在创建数据库时指定字符集。<br><code>create database narcissus character set utf8 collate utf8_bin;</code></li>
</ul>
<h4 id="导入、导出数据"><a href="#导入、导出数据" class="headerlink" title="导入、导出数据"></a>导入、导出数据</h4><ul>
<li><p>把需要执行的 sql 放在 sql 文件里，通过 &lt; 执行。<br><code>mysql -h host -u user -p password dbname &lt; batch.sql</code></p>
</li>
<li><p>直接执行 sql 语句。<br><code>mysql -h host -u user -p password dbname -e &quot;insert into user(id, name) values(99, &#39;andy&#39;);&quot;</code></p>
</li>
<li><p>mysql 导出结构不导出数据<br><code>mysqldump --opt -d 数据库名 -u root -p &gt; xxx.sql</code></p>
</li>
<li><p>mysql 导出数据不导出结构<br><code>mysqldump -c -t 数据库名 -uroot -p &gt; xxx.sql    (-c 表示 insert 语句中包括列名)</code></p>
</li>
<li><p>mysql 导出结构和表数据<br><code>mysqldump 数据库名 -uroot -p &gt; xxx.sql</code></p>
</li>
<li><p>mysql 导出特定表结构<br><code>mysqldump -uroot -p -B 数据库名 --table 表名 &gt; xxx.sql</code></p>
</li>
</ul>
<h4 id="查看事务锁"><a href="#查看事务锁" class="headerlink" title="查看事务锁"></a>查看事务锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use information_schema;</span><br><span class="line">select * from innodb_trx;</span><br><span class="line">select * from innodb_locks;</span><br><span class="line">select * from innodb_lock_waits;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式的单行与多行模式]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/regexp-single-multi-line/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://blog.csdn.net/zm2714/article/details/7925264" target="_blank" rel="external">大头爸爸的博客</a></p>
</blockquote>
<h4 id="在Expresso中，测试“多行模式”"><a href="#在Expresso中，测试“多行模式”" class="headerlink" title="在Expresso中，测试“多行模式”"></a>在Expresso中，测试“多行模式”</h4><h4 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h4><p><img src="/resources/image/png/1346309684_9606.png" alt=""></p>
<p><span class="text-danger"><br>    注意：这里样例文本中3eeeee后面没有回车，光标就在e的后面。匹配的结果是3eeeee，如上图的Search Results区中所示。<br>为什么这里不能匹配1abcde和2abc？<br></span></p>
<p><strong>开启多行模式</strong><br>^　可以匹配字符串开头（字符串的开始位置），也可以匹配行的开头（即换行符\n之后的位置）<br>$　可以匹配字符串结尾（字符串的结束位置）, 也可以匹配行的结尾（即换行符\n之前的位置）<br><strong>关闭多行模式</strong><br>^　只能匹配字符串开头<br>$　只能匹配字符串结尾</p>
<p><span class="text-primary"><br>    知识点：\r为回车符，\n 为换行符。在windows中，我们平常说的换行，实质上是先回车，后换行；下面有更详细解说<br></span></p>
<p><img src="/resources/image/png/1346309759_9281.png" alt=""></p>
<p>如上图所示：\r 匹配 [CR]、\n 匹配[LF]   &lt;——  CR为回车  LF为换行<br>字符串多个段落，比如<br>ab<br>cd<br>e<br>在windows操作系统中其实是：ab[CR][LF]cd[CR][LF]e<br>在windows中，文本中的回车换行储存为： 0D 0A。也就是说，先储存的是“回车\r” <code>&lt;CR&gt;</code>，再储存的是“换行\n” <code>&lt;LF&gt;</code><br>CR用符号’\r’表示, ASCII代码是13, 十六进制为0x0D;<br>LF用符号’\n’表示, ASCII代码是10, 十六进制为0x0A;<br>正则表达式：(?m)^(\d\w+)(\s*)$</p>
<p>样例文本<br><img src="/resources/image/jpg/1346309867_1092.jpg" alt=""></p>
<p>匹配结果<br><img src="/resources/image/jpg/1346309891_5562.jpg" alt=""></p>
<p><span class="text-info"><br>    在Expresso、PHP中，启用多行模式，”$” 匹配字符串结束位置或者 “\n” 之前的位置。<br></span></p>
<blockquote>
<p>单行模式<br>开启单行模式：　.　可以匹配任意字符(包括换行符)<br>关闭单行模式：　.　只有匹配 非换行 的其它任意字符（.可匹配\r，即除了不匹配\n外的所有字符。）<br>多行模式 影响 ^ 和 $ 的匹配<br>单行模式 影响 . 的匹配<br>多行模式中必定包含 ^ 或 $ 或同时包含，否则即使加了 m，也没有任何意义<br>单行模式和多行模式是八杆子打不着的两个概念，只是因为正则发展的历史原因，造就了这样两个MS互斥的概念<br>单行模式影响的是小数点“.”的匹配范围<br>多行模式影响的是“^”和“$”的匹配范围<br>至于后面几个概念，全局匹配，多行模式和贪婪模式之间也没有什么必然联系<br>全局匹配关闭，只匹配首次成功匹配项，全局匹配开启，匹配所有成功匹配项<br>全局模式是一些脚本语言中才有的概念<br>在进行匹配时，关闭全局模式，类似于.NET中的Match方法，开启全局模式，类似于.NET中的Matches方法<br>在进行替换时，关闭全局模式，类似于Java中的replaceFirst，开启全局模式，类似于Java中的replaceAll<br>（在进行匹配时，关闭全局模式，类似于PHP中的preg<em> match函数；开启全局模式，类似于PHP中的preg</em> match_ all函数）</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hibernate 主键增加方式]]></title>
      <url>http://zhengdehua.github.io/2016/06/14/hibernate-pk-increment/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://www.cnblogs.com/zhanghaoh/archive/2013/03/13/2957234.html" target="_blank" rel="external">菜鸟的春天</a></p>
</blockquote>
<p class="bg-primary">1.assigned:</p>

<p>主键由外部程序负责生成，无需Hibernate参与。—-如果要由程序代码来指定主键,就采有这种.</p>
<p class="bg-primary">2.increment:</p>

<p>对 long ， short 或 int 的数据列生成自动增长主键。increment主键生成方式的特点是与底层数据库无关性，大部分数据库如 Mysql，MSSQL 和ORACLE等都支持increament生成方式。此方式的实现机制为在当前应用实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的 时候将此值加1作为主键。increment方式的不足之处是当多个线程并发对数据库表进行写操作时，可能出现相同的主键值，发生主键重复的冲突，因此多线程并发操作时，不应该使用此方法。</p>
<p class="bg-primary">3.identity:</p>

<p>如果数据列的类型是 long， short 或 int ，可使用主键生成器生成自动增长Hibernate主键。与底层数据库有关，要求数据库支持identify,如MySQL中是auto_increment,SQL Server中是Identify.支持的数据库有MySQL,SQL Server,DB2,Sybase和HypersonicSQL.(好像不支持oracle) 无需Hibernate和用户的干涉，使用较为方便，但不便于在不同的数据库之间移植程序。identity的优点是不会发生 increment方式的并发错做问题。数据库涉及到的表要设置自动增长。</p>
<p class="bg-primary">4.sequence:</p>

<p>在ORACLE等数据库中使用sequence生成主键。sequence的特点是于数据库的相关性，seqhio要求底层能支持sequence，列如Oracle。</p>
<p class="bg-primary">5.hilo:</p>

<p>通过hi/lo 算法生成主键，需要一个表来保存额外的主键信息。这样生成的标识符只在特定的数据库是唯一的，在使用JTA（Java分布式事务） 获得链接或用户自定义提供的链接中，不要使用这种生成器。hilo方式需要维护表信息，因此对数据的影响的要率会造成一定影响。</p>
<p class="bg-primary">6.seqhio:</p>

<p>与hilo 类似，通过hi/lo 算法实现的主键生成机制，只是主键历史状态保存在Sequence中，适用于支持Sequence的数据库，如Oracle。如果数据列的类型是 long， short 或 int可使用该主键生成器。</p>
<p class="bg-primary">7.native:</p>

<p>由Hibernate根据不同的数据库方言，自行判断采用identity、hilo、sequence其中一种作为Hibernate主键生成方式，native的 优点是与底层性无关，便于不同数据库之间的移植，由Hibernate根据不同数据库选择主键的生成方式。在oracle中需要创建叫 Hibernate_sequence名字的sequence，如果设置了Hibernate.hbm2ddl.auto属性，不需要手动建立序列，前提 是数据库帐号必须有Create Sequence这种高级权限。mysql等数据库则不用建立sequence。</p>
<p class="bg-primary">8.uuid.hex:</p>

<p>采用基于128位的算法生成唯一值，并编制成32位长度的唯一字符串作为主键值，uuid.hex的优点是支持大部分数据库，缺点就是要占用较大的存储空间。对于并发Insert要求较高的系统，推荐采用uuid.hex 作为主键生成机制。</p>
<p class="bg-primary">9.uuid.string:</p>

<p>使用UUID算法，UUID被编码为一个16个字符长的任意ASCII字符组成的字符串。不能在PostgreSQL数据库中使用。uuid.string同uuid.hex类似，需要占很大的存储空间。</p>
<p class="bg-primary">10.foreign:</p>

<p>使用外部表的字段作为Hibernate主键。</p>
<p>一般而言，利用uuid.hex方式生成Hibernate主键将提供最好的性能和数据库平台适应性。<br>另外由于常用的数据库，如Oracle、DB2、 SQLServer、MySql 等，都提供了易用的主键生成机制（Auto-Increase 字段或者Sequence）。我们可以在数据库提供的主键生成机制上，采用generator-class=native的主键生成方式。不过值得注意的 是，一些数据库提供的主键生成机制在效率上未必最佳，大量并发insert数据时可能会引起表之间的互锁。数据库提供的主键生成机制，往往是通过在一个内 部表中保存当前主键状态（如对于自增型主键而言，此内部表中就维护着当前的最大值和递增量），之后每次插入数据会读取这个最大值，然后加上递增量作为新记 录的主键，之后再把这个新的最大值更新回内部表中，这样，一次Insert操作可能导致数据库内部多次表读写操作，同时伴随的还有数据的加锁解锁操作，这对性能产生了较大影响。因此，对于并发Insert要求较高的系统，推荐采用uuid.hex 作为主键生成机制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git submodule 功能]]></title>
      <url>http://zhengdehua.github.io/2016/06/13/git-submodule/</url>
      <content type="html"><![CDATA[<h2 id="git-submodule-功能"><a href="#git-submodule-功能" class="headerlink" title="git submodule 功能"></a>git submodule 功能</h2><blockquote>
<p>引用 <a href="http://www.open-open.com/lib/view/open1396404725356.html" target="_blank" rel="external">open-open 网站</a><br>引用 <a href="http://www.kafeitu.me/git/2012/03/27/git-submodule.html" target="_blank" rel="external">咖啡兔个人站点</a></p>
</blockquote>
<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>项目库在一些情况下需要引用其他版本库的文件，比如一些公用的代码，这些公用的代码需要独立的仓库来维护，可是其他项目引用的时候，如果只是各自拷贝公用的代码到自己的库，会造成代码的冗余，而且还会丢失公共代码库自己的维护历史。在这样的背景下，git submodule 的出现，很好解决了这个问题, git submodule 功能允许将一个仓库当作另一个仓库的子目录，这样保证了可以引用公用代码库，并且不影响自身代码库的提交。</p>
<h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h3><p>首先需要两个版本库例如：</p>
<p>1) 一个公共的版本库(例如：libA.git)</p>
<p>git@gitlab.szreach.com:fengyang/liba.git</p>
<p>2) 一个引用公共版本库的主版本库(例如：super.git)</p>
<p>git@gitlab.szreach.com:fengyang/super.git</p>
<h3 id="3-TortoiseGit上git-submodule功能实现"><a href="#3-TortoiseGit上git-submodule功能实现" class="headerlink" title="3. TortoiseGit上git submodule功能实现"></a>3. TortoiseGit上git submodule功能实现</h3><p><strong>1、添加子模组的步骤</strong></p>
<p>第一步：使用submodule add…添加子模组在需要作添加子模组的Git版本库中右击，选择“TortoiseGit-&gt;Submodule Add…”，在“Repository:”里面输入需要添加子模组的版本库路径，在“Path：”中输入添加子模组存放的目录路径。如下图所示：<br><img src="/resources/image/png/20140402101116_134.png" alt=""></p>
<p>此时查看需要添加子模组的Git工作区的目录结构。在根目录下多了一个.gitmodules文件，并且公共代码库被克隆到lib/lib_a目录下。<br><img src="/resources/image/png/20140402101116_320.png" alt=""></p>
<p>第二步：查看.gitmodules的内容 .gitmodules的内容记录着含子模组存放的目录路径及子模组版本库的路径<br><img src="/resources/image/png/20140402101116_721.png" alt=""></p>
<p class="text-danger"><br>    注：此时工作区尚未提交，完成提交后，子模组才算正式完成在需要作添加子模组的Git版本库中创立。<br>    注：此主版本库(super.git)就变成了一个包含子模组的版本库。<br></p>

<p><strong>2、克隆带子模组的版本库的步骤</strong></p>
<p>克隆带子模组的git库，并不能自动将子模组的版本库克隆出来，对于只关心项目本身的数据，而不关心项目引用的外部项目数据的用户，这个功能非常好，数据没有冗余而且克隆的速度也很快。</p>
<p>第一步：克隆super主版本库<br>在工作区中克隆主主版本库后，会发现子模组的版本库并没有克隆，只有将存放子模组版本库的目录克隆下来了。<br><img src="/resources/image/png/20140402101116_467.png" alt=""><br><img src="/resources/image/png/20160613112029.png" alt=""></p>
<p>第二步：克隆子模组<br>如果需要克隆出子模组形式引用的外部库，首先需要执行Submodule Update操作。<br>在需要作克隆子模组的Git工作区中右击，选择“TortoiseGit-&gt;Submodule Update…”,点击“OK”即可。<br><img src="/resources/image/png/20140402101117_552.png" alt=""></p>
<p>执行Submodule Update…操作后就会把子模组的版本库克隆下来。<br><img src="/resources/image/png/20140402101117_706.png" alt=""></p>
<p><strong>3、对主Git库工作区作commit、checkout、revert、pull、push等更改Git工作区内容的操作时，查看Submodule目录下内容的效果</strong></p>
<p>1) 对主Git库工作区作commit操作<br>当在主Git库工作区中变更到达一个适当状态时，我们需要将这些变更提交到Git库，作版本备份和跟踪。</p>
<p>方法：<br>在工作区内右击，选择“ Commit-&gt; “当前分支名称” ”，在Commit窗口中，选择需要提交的变更path，填写提交说明，点击“Ok”。<br><img src="/resources/image/png/20140402101117_115.png" alt=""></p>
<p class="text-info"><br>    结论：在主git工作区作commit操作，只是将主Git工作区的变更历史提交到主Git本地库中，对Submodule没有任何影响。<br></p>


<p>2) 对主Git库工作区作checkout操作<br>当在主Git库工作区中想要切换到其他某个分支、某个tag、某个commit历史记录。</p>
<p>我们这里举个特殊的例子：<br>切换到某个commit历史记录(如在主版本库中提交子版本库的历史记录)</p>
<p>方法：<br>在Git工作区内的某目录上右击，选择“Swicht/Checkout…”在Swicht/Checkout…Checkout窗口中，在Switch to Commmit中列出需要切换的commit历史记录，在此列表中选择需要切换到的commit历史记录，以后点击“Ok”按钮。<br><img src="/resources/image/png/20140402101118_126.png" alt=""><br><img src="/resources/image/png/20140402101119_32.png" alt=""><br><img src="/resources/image/png/20140402101119_562.png" alt=""></p>
<p class="text-danger"><br>    注：由于切换到的是在主版本库中提交子版本库的那条历史记录，因此子模组中状态也会改换，也需要在子模组中执行切换。<br></p>

<p>执行Submodule Update操作即可。<br><img src="/resources/image/png/20140402101119_63.png" alt=""></p>
<p>3) 对主Git库工作区作revert操作<br>当在主Git库工作区中这次变更有错误时，就可以使用revert操作来撤销这次次操作。</p>
<p>方法：<br>在工作区内右击，选择“Revert”，在Revert窗口中，选择需要撤销的变更path，点击“Ok”。<br><img src="/resources/image/png/20140402101120_416.png" alt=""><br><img src="/resources/image/png/20140402101120_387.png" alt=""></p>
<p class="text-info"><br>    结论：在主git工作区作revert操作，只是将主Git工作区某次的变更操作给撤销，此次操作之前的commit都会被保留，且对Submodule没有任何影响。<br></p>


<p>4) 对主Git库工作区作push操作<br>当在主Git库工作区中将主Git本地库的数据推送到主Git远程库中。</p>
<p>方法：在工作区的目录上（不要在文件上）右击，选择“Git Sync…”<br>“Local Branch”，”Remote Branch”，“Remote URL”这3栏必须正确才能“推”数据。<br><img src="/resources/image/png/20140402101120_503.png" alt=""></p>
<p class="text-info"><br>    结论：在主git工作区作push操作，只是将主Git本地库的变更历史推送到到主Git远程库中，对Submodule没有任何影响。<br></p>



<p>5) 对主Git库工作区作pull操作<br>当在主Git库工作区中将主Git远程库的拉取到主Git本地库中。</p>
<p>方法：在工作区的目录上（不要在文件上）右击，选择“Git Sync…”<br>“Local Branch”，”Remote Branch”，“Remote URL”这3栏必须正确才能“拉”数据。<br><img src="/resources/image/png/20140402101121_359.png" alt=""></p>
<p class="text-info"><br>    结论：在主git工作区作pull操作，只是将主Git远程库的变更历史拉取到到主Git本地库中，对Submodule没有任何影响。<br></p>


<p><strong>4、对submodule下的内容进行修改后commit、push，对submodule目录作pull</strong></p>
<p>在执行Submodule Update…操作更新出子模组后，都以某个具体的提交版本进行检出，进入子模组目录，会发现其处于非跟踪状态。<br><img src="/resources/image/png/20140402101121_322.png" alt=""></p>
<p>显然这种情况下，如果修改lib/lib_a下的文件，提交就会丢失。下面介绍如何在检查的子模组中修改，以及如何更新子模组。<br>在子模组中切换到master分支(或者其他想要修改的分支)后在进行修改。</p>
<ul>
<li>切换到master分支，然后在工作区做一些改动。<br><img src="/resources/image/png/20140402101122_701.png" alt=""></li>
</ul>
<ul>
<li>执行commit后，并且推送到子模组库中后。</li>
</ul>
<ul>
<li>回到主版本库中。<br>在主版本库中查看状态，在主版本库中可以看到子模组已修改，包含了更新的提交。</li>
</ul>
<ul>
<li>需要将修改提交在主版本库中进行推送。<br><img src="/resources/image/png/20140402101122_472.png" alt=""></li>
</ul>
<p>对submodule目录作pull<br>当子模组版本库中有新的提交历史记录，就需要做pull操作来更新。<br><img src="/resources/image/png/20140402101123_931.png" alt=""></p>
<p class="text-danger"><br>    注：对子模组库中做了pull操作，同时需要对调用子模组库的主版本库中也要做Pull操作。<br></p>


<p>如下图所示：<br><img src="/resources/image/png/20140402101123_45.png" alt=""></p>
<p></p><p class="text-danger"><br>    注意：进入子模组目录，会发现其处于非跟踪状态。显然这种情况下，如果修改lib/lib_a下的文件，提交就会丢失。提示如下：<br></p><br><img src="/resources/image/png/20140402101124_462.png" alt=""><p></p>
<p><strong>5、移除Submodule</strong></p>
<p>第一步：用Delete(keep local) 将目录或文件命令从git的索引库中移除子模块目录<br>方法：</p>
<p>在工作区内目录或文件上右击，选择“Delete(keep local)”，在Delete窗口中，点击“Remove”。<br>Delete(keep local)把目录lib/从git的索引库中移除,但是对目录lib/本身并不进行任何操作。<br>因此需要彻底删除。</p>
<p>第二步：删除物理文件<br>第三步：删除.gitmodule文件<br>第四步：删除.git/config的submodule配置源文件</p>
<p>删除如下图所示红框的部门<br><img src="/resources/image/png/20140402101124_204.png" alt=""></p>
<p>第五步：删除后，提交更改</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简谈软件概要设计和详细设计]]></title>
      <url>http://zhengdehua.github.io/2016/06/13/design-outline-detailed/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://blog.itpub.net/28257707/viewspace-748512/" target="_blank" rel="external">xushiqi1808的个人空间</a></p>
</blockquote>
<h3 id="概要设计与详细设计的区别"><a href="#概要设计与详细设计的区别" class="headerlink" title="概要设计与详细设计的区别"></a>概要设计与详细设计的区别</h3><p>概要设计就是设计软件的结构，包括组成模块，模块的层次结构，模块的调用关系，每个模块的功能等等。同时，还要设计该项目的应用系统的总体数据结构和数据库结构，即应用系统要存储什么数据，这些数据是什么样的结构，它们之间有什么关系。 </p>
<p>详细设计阶段就是为每个模块完成的功能进行具体的描述，要把功能描述转变为精确的、结构化的过程描述。<br>概要设计阶段通常得到软件结构图<br>详细设计阶段常用的描述方式有：流程图、N-S图、PAD图、伪代码等</p>
<h3 id="概要设计和详细设计"><a href="#概要设计和详细设计" class="headerlink" title="概要设计和详细设计"></a>概要设计和详细设计</h3><p>在软件设计中，大家经常问到的一个问题是：概要设计应该怎样一个概要法，详细设计应该怎样一个详细法？<br>这个问题在公司内部经常有人问。现在陈述一下。<br>我们公司的研发流程是瀑布型的，这个模型中的分析、设计阶段是基于经典的结构化方法。 </p>
<p>结构化设计方法的基本思路是：按照问题域，将软件逐级细化，分解为不必再分解的的模块，每个模块完成一定的功能，为一个或多个父模块服务（即接受调用），也接受一个或多个子模块的服务（即调用子模块）。模块的概念，和编程语言中的子程序或函数是对应的。</p>
<p><strong>这样一来，设计可以明显地划分成两个阶段：</strong> </p>
<p>概要（结构）设计阶段：把软件按照一定的原则分解为模块层次，赋予每个模块一定的任务，并确定模块间调用关系和接口。<br>详细设计阶段：依据概要设计阶段的分解，设计每个模块内的算法、流程等。</p>
<h3 id="概要设计阶段："><a href="#概要设计阶段：" class="headerlink" title="概要设计阶段："></a>概要设计阶段：</h3><p>在这个阶段，设计者会大致考虑并照顾模块的内部实现，但不过多纠缠于此。主要集中于划分模块、分配任务、定义调用关系。模块间的接口与传参在这个阶段要定得 十分细致明确，应编写严谨的数据字典，避免后续设计产生不解或误解。概要设计一般不是一次就能做到位，而是反复地进行结构调整。典型的调整是合并功能重复的模块，或者进一步分解出可以复用的模块。在概要设计阶段，应最大限度地提取可以重用的模块，建立合理的结构体系，节省后续环节的工作量。 </p>
<p>概要设计文档最重要的部分是分层数据流图、结构图、数据字典以及相应的文字说明等。以概要设计文档为依据，各个模块的详细设计就可以并行展开了。</p>
<h3 id="详细设计阶段"><a href="#详细设计阶段" class="headerlink" title="详细设计阶段:"></a>详细设计阶段:</h3><p>在这个阶段，各个模块可以分给不同的人去并行设计。在详细设计阶段，设计者的工作对象是一个模块，根据概要设计赋予的局部任务和对外接口，设计并表达出模块的算法、流程、状态转换等内容。这里要注意，如果发现有结构调整（如分解出子模块等）的必要，必须返回到概要设计阶段，将调整反应到概要设计文档中，而不 能就地解决，不打招呼。详细设计文档最重要的部分是模块的流程图、状态图、局部变量及相应的文字说明等。一个模块一篇详细设计文档。</p>
<p>概要设计文档相当于机械设计中的装配图，而详细设计文档相当于机械设计中的零件图。文档的编排、装订方式也可以参考机械图纸的方法。 </p>
<p>我们公司对模块的认识和传统定义有所不同，认为是较大的软件功能单元才可以称作模块。这种认识使大家对概要设计和详细设计的分工产生了混乱的理解，降低了文档的可用性，应该予以纠正。<br>概要设计中较顶层的部分便是所谓的方案。方案文档的作用是在宏观的角度上保持设计的合理性。</p>
<p>有的项目采用面向对象的分析、设计方法。可能在概要设计、详细设计的分工上疑问更多。其实，面向对象的分析、设计方法并没有强调结构化方法那样的阶段性，因此一般不引入概要、详细设计的概念。如果按照公司的文档体系，非要有这种分工的话，可以将包的划分、类及对象间的关系、类的对外属性、方法及协作设计看做 概要设计；类属性、方法的内部实现看做详细设计。</p>
<ol>
<li>需求分析–产生软件功能规格说明书,需要确定用户对软件的需求,要作到明确、无歧义。不涉及具体实现方法。用户能看得明白，开发人员也可据此进行下面的工作（概要设计）。 </li>
<li>概要设计–产生软件概要设计说明书，说明系统模块划分、选择的技术路线等，整体说明软件的实现思路。并且需要指出关键技术难点等。   </li>
<li>详细设计–产生软件详细设计说明书，对概要设计的进一步细化，一般由各部分的担当人员依据概要设计分别完成，然后在集成，是具体的实现细节。理论上要求可以照此编码。</li>
</ol>
<h3 id="概要设计和详细设计的区别与联系"><a href="#概要设计和详细设计的区别与联系" class="headerlink" title="概要设计和详细设计的区别与联系"></a>概要设计和详细设计的区别与联系</h3><p>软件设计采用自顶向下、逐次功能展开的设计方法，首先完成总体设计，然后完成各有机组成部分的设计。<br>根据工作性质和内容的不同，软件设计分为概要设计和详细设计。概要设计实现软件的总体设计、模块划分、用户界面设计、数据库设计等等；详细设计则根据概要设计所做的模块划分，实现各模块的算法设计，实现用户界面设计、数据结构设计的细化，等等。</p>
<p>概要设计是详细设计的基础，必须在详细设计之前完成，概要设计经复查确认后才可以开始详细设计。概要设计，必须完成概要设计文档，包括系统的总体设计文档、以及各个模块的概要设计文档。每个模块的设计文档都应该独立成册。</p>
<p>详细设计必须遵循概要设计来进行。详细设计方案的更改，不得影响到概要设计方案；如果需要更改概要设计，必须经过项目经理的同意。详细设计，应该完成详细设计文档，主要是模块的详细设计方案说明。和概要设计一样，每个模块的详细设计文档都应该独立成册。</p>
<p>概要设计里面的数据库设计应该重点在描述数据关系上，说明数据的来龙去脉，在这里应该结合我们的一下结果数据，说明这些结果数据的源点，我们这样设计的目的和原因。详细设计里的数据库设计就应该是一份完善的数据结构文档，就是一个包括类型、命名、精度、字段说明、表说明等内容的数据字典。</p>
<p>概要设计里的功能应该是重点在功能描述，对需求的解释和整合，整体划分功能模块，并对各功能模块进行详细的图文描述，应该让读者大致了解系统作完后大体的结构和操作模式。详细设计则是重点在描述系统的实现方式，各模块详细说明实现功能所需的类及具体的方法函数，包括涉及到的sql语句等。</p>
<h3 id="概要设计，详细设计之间的关系是什么？"><a href="#概要设计，详细设计之间的关系是什么？" class="headerlink" title="概要设计，详细设计之间的关系是什么？"></a>概要设计，详细设计之间的关系是什么？</h3><p>Q:<br>我的看法：<br>    概要设计只说明系统有多少个模块，各模块之间的接口和个模块本身的功能<br>    详细设计说明某个具体模块如何实现，粒度应该比程序略高一些<br>    但是问题来了，各个模块之间是有层次关系的，也有先后逻辑关系。这就说明，在概要设计中，还必须考虑模块的实现细节，否则，你怎么知道这个模块下面要划分子模块？你怎么知道各子模块的调用顺序？<br>    这就说明，概要设计和详细设计是重叠进行的，而软件工程书上说的确是顺序进行的，不知道是不是我的理解有问题。</p>
<p>举个例子，例如排序程序，如果设计2个模块：<br>一个主模块用于排序子模块用于交换2个变量，主模块调用子模块，但是子模块是怎么设计出来的呢？肯定是你先想到了用冒泡等排序方式的时候需要交换数据，这已经考虑了主模块足够多的细节，似乎属于”详细设计”了，但是目前进行的是概要设计，这就产生了我所说的重叠的情况。<br>A:<br>看看上面的帖子，有意思的居多。<br>上面也有朋友说到用建筑的例子来比喻。<br>软件的概要设计，主要是建立软件系统的整体架构，也就是我们在盖房子时候，需要先将房子的整个架子构建起来。<br>软件的详细设计，主要是将软件系统的各个部分的具体设计方法、逻辑、功能采用文字方式进行表述。这样在实现过程中，Coding人员原则上严格按此进行代码实现即可。<br>这样的一个最为简单的例证：我们可以将代码交付第三方来做。验证与跟踪采取设计来。<br>我看上面还有一个朋友说：快速做代码。这个本身没有值得批评之处。但只要想一下，你写的代码没有任何设计思想、文档留下的情况，一旦你离开，如何维护？重新设计吗？还是花费几倍人力去研究你写的几千/万，甚至几十万行代码？如果是这样的，你没错，关键是你们老板太对了，钱算什么。<br>另外的一个问题是：中国人如此聪明，但中国为什么没有出现巨型软件产品呢？个人英雄主义依然很严重，老板的短视利益行为大行其道。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[概要设计、详细设计(一)概念、方法、实践步骤]]></title>
      <url>http://zhengdehua.github.io/2016/06/13/design-outline-detailed-summary/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://blog.sina.com.cn/s/blog_5dfa359001016urm.html" target="_blank" rel="external">可爱桑树的博客</a></p>
</blockquote>
<h3 id="1-概念、方法、实践步骤"><a href="#1-概念、方法、实践步骤" class="headerlink" title="1. 概念、方法、实践步骤"></a>1. 概念、方法、实践步骤</h3><p>设计是指根据需求开发的结果，对产品的技术实现由粗到细进行设计的过程。根据设计粒度和目的的不同可以将设计分为概要设计、详细设计等阶段以便于管理和确保质量。设计内容也要根据软件系统的实际情况进行定义，比如对于交互性要求高的系统可以有视觉设计等等。<br>一般来说可以将设计阶段划分为概要设计、详细设计2阶段进行管理，程序设计可以结合项目管理、作业配分、开发团队的能力以及质量要求等因素来决定是否作为单独的阶段进行管理。</p>
<ul>
<li><p>概要设计: 定义实现需求的工作产品技功能、技术构架，定义设计准则及共通处理方针，分解划分功能模块，定义各功能模块的功能和业务处理，定义模块间的接口关系。典型的工作产品有《概要设计书》、《设计准则》及《共通处理方针》。一般包括系统技术构架，机能一览，机能迁移图，数据库逻辑设计，数据文件逻辑定义，系统各单位功能模块及接口定义，设计准则及共通处理方针（外观、操作、错误处理、日志、提示信息、异常处理、命名规约、编码规约等方针）等内容。</p>
</li>
<li><p>详细设计：定义各功能模块的功能单元的详细实现，包括接口的物理定义，明确数据库/数据文件的物理定义等。典型的工作产品：《详细设计书》。典型的内容包括各模块的功能单元实现的详细描述，数据库物理设计，数据文件物理定义，接口物理定义，状态码物理设计，输出信息（MSG/LOG）设计等内容。</p>
</li>
</ul>
<h3 id="2-设计阶段的主要流程"><a href="#2-设计阶段的主要流程" class="headerlink" title="2. 设计阶段的主要流程"></a>2. 设计阶段的主要流程</h3><p>设计阶段的主要活动包括以下内容:设计阶段的计划或规划、确定设计的准则、设计以及制作设计文档、设计产物评审等。</p>
<ol>
<li><p>设计阶段的计划或规划内容为确定设计团队的组织并授权、评估设计阶段的工作量、明确设计的工作任务（WBS分解）以及完成时间、定义设计阶段的质量标准以及效率标准。这部分活动主要是PDCA中首要步骤，除上述内容外，还需要考虑项目管理中一些共同管理规划，比如风险管理、配置管理、干系人管理、变更管理、决策分析管理等等内容。在多人或团队作业的工作，制定合理的计划和规划是首要的步骤。</p>
</li>
<li><p>设计不同类型的系统其设计方法、方式等有很大的区别，比如图像处理系统、监控系统和ERP等管理系统的差异是显而易见的。因此设计阶段有个关键的活动就是确定设计准则，这个活动的主要目的就是根据系统的实际情况，选择最佳的实践，用最优的方法指导设计的进行。设计准则通常要考虑的内容包括：设计的内容、方法、工具、模板、命名规约、模块划分规则（尤其设计粒度）、质量以及效率评估方式等等。</p>
</li>
<li><p>设计以及制作设计文档:根据设计准则以及设计规划执行设计任务并制作设计文档多数情况不是一件复杂的工作，但是对软件系统来说却是一个迭代的、消化大量时间的过程。从我们讨论设计思路、形成初步草案、充分沟通、决策优劣、再修正、评审通过都需要理解、学习、反复迭代并花费大量时间。软件系统的设计无论采用什么形式，分层、抽象、归纳、汇总是设计的主要方法。分层和抽象是最关键的步骤，也是相对比较难掌握的，无论分层和抽象都是从分类开始的，比如功能的分类、业务的分类、信息的分类、控制模式的分类等等，只要能逐层分类就很容易进行分层和抽象。另外，归纳、汇总是常见的方法，也是体力工作，只要认真细致就能很好的完成。</p>
</li>
<li><p>设计产物评审：针对设计设计产物进行评审以及相关的沟通是确保设计质量的主要活动。从形式上，可以采用多种方法，比如设计小组评审、P2P评审、正式会议评审等等。</p>
</li>
</ol>
<p>设计阶段的主要活动设计阶段的计划或规划、确定设计的准则、设计以及制作设计文档、设计产物评审等是个反复迭代的过程。本质上设计是个学习迭代的过程、通过不断的评审、确认、改善达到成熟，因此设计的保证手段主要是设计准则和评审。<br>根据软件项目类型的不同具体流程也有一些细节差异，每个软件开发组织可以结合业务特征具体定义，下面举例介绍2种典型的流程。</p>
<p>例：软件外包企业，工程类的典型流程（概要设计）<br>主要特征：</p>
<ul>
<li>流程强调客户的参与，比如对设计的计划、设计的成果的评审。</li>
<li>强调对关键的过程，比如系统架构的结果进行质量管控。</li>
<li>对不同规模、技术、质量、进度要求的项目进行分级控制。</li>
</ul>
<blockquote>
<p><i class="text-primary">3.1 制定及修改项目计划</i></p>
<ul>
<li>项目经理根据《项目计划规程》制定概要设计计划，明确设计(式样)管理组中参与概要设计人员的工作任务和完成时间，并通知各相关者进行确认。</li>
<li>项目进行中，根据给定需求的变更和概要设计的实际进度状况的跟踪结果，及时调整或重新制定概要设计的详细进度计划。</li>
<li>根据概要设计的进展状况，必要时修正计划并与客户达成一致。<br><i class="text-danger">注：与客户达成一致是外包的核心，计划以及核心内容和客户达成一致非常重要。</i></li>
<li>项目概要设计计划并入项目计划中。</li>
</ul>
<p><i class="text-primary">3.2 确定系统架构和概要设计准则</i></p>
<ul>
<li><i class="text-info">确定系统架构</i><br>a. 对于A、B类项目<br>启动DAR（参见《决策分析规程》），分析风险、成本、进度的制约、技术、质量的要求，决定是否需要购买商业组件、是否复用已有构件。如果确认需要进行采购，请参见《供应商合同管理规程》。<br>根据公司人员情况、项目业务特征、性能数据量要求、可靠性要求、成本、效率、风险等方面内容提出多种系统架构进行评定，最终选定适合项目的系统架构。<br>输出参见《决策分析规程》的输出。<br>b. 对于非A、B类项目<br>设计(式样)管理组根据公司人员情况、项目业务特征、性能数据量要求、可靠性要求、成本、效率、风险等方面内容对多种系统架构进行评定，最终选定适合项目的系统架构。<br>如果用户有不同于一般项目的要求或者采用了公司不熟悉的架构，开发技术(环境)组需制作项目原型，以验证技术架构方案并确保其正确性。<br>注：根据不同工作量、技术、质量、进度要求、团队规模等识别出项目分类，并对概要设计的关键控制点（体系结构）进行不同的管控。</li>
<li><i class="text-info">确定概要设计准则</i><br>设计(式样)管理组根据项目情况，确定项目的概要设计准则，准则通常包括：项目概要设计的方法、项目概要设计所使用的工具、概要设计成果物所使用的部分模板等。<br>设计(式样)管理组定义各种方针，各单位机能模块设计时应遵循已定义的各类方针。<br>通常需要定义的方针包括：操作、错误处理、日志、提示信息、异常处理、命名规约等方针。<br>所定义的所有的处理方针均需形成文档，进行配置管理。<br>对定义的所有内容形成《概要设计准则》。</li>
</ul>
<p><i class="text-primary">3.3 设计业务机能</i></p>
<ul>
<li>设计(式样)管理组对《系统要件定义书》中定义的业务组件使用各种方法进行细化（包括拆分、合并、分组等），并将各需求分配到这些细分的业务组件或功能模块上。</li>
<li>设计(式样)管理组根据各类处理方针，对各单位机能组件和功能模块的外观、数据项目定义、功能概要、数据处理流程、操作方法、各机能组件或功能模块的接口和参数等进行设计。</li>
<li>定义各机能组件和功能模块的接口和参数，各设计人员需验证其接口衔接上的一致性。</li>
<li>将以上的内容加入对系统架构的描述，形成《概要设计书》。</li>
<li>设计(式样)管理组将概要设计的内容按照其和需求的对应关系填入《需求追踪矩阵》。</li>
<li>数据库逻辑设计。</li>
</ul>
<p><i class="text-primary">3.4 评审系统概要设计</i></p>
<ul>
<li>项目经理组织项目评审专家组对概要设计的成果物进行评审（参见评审规程）。评审中发现的问题需体现于《概要设计评审报告》中。评审结束后，开发经理（PJL）跟踪这些问题，直到问题得到修正。</li>
<li>评审结束后，项目评审专家组需要根据评审的结论产生《概要设计评审报告》，并上报项目经理（PM）。</li>
</ul>
<p><i class="text-primary">3.5 确认概要设计</i></p>
<ul>
<li>概要设计评审通过后，项目经理(PM)针对《概要设计书》取得客户的认可。<br><i class="text-danger"><br>注：软件外包中的概要设计结果一般还需要客户的评审，这个也是项目屏蔽风险的主要方法，但是不同的客户技术水平并不相同，还要根据实际情况来判断。</i></li>
</ul>
<p><i class="text-primary">3.6 纳入基线管理</i></p>
<ul>
<li>概要设计评审通过后，《概要设计准则》、《概要设计书》、《需求追踪矩阵》需纳入基线管理</li>
<li>本规程所产生的所有文档均需进行配置管理（参见配置管理规程）。产生的文档通常包括：<br>《概要设计准则》<br>《概要设计书》<br>《概要设计评审报告》</li>
</ul>
</blockquote>
<p>案例2：软件产品类的典型流程<br>主要特征：</p>
<ul>
<li>流程强调交互设计</li>
<li>强调设计方针的管理。</li>
<li>对设计内容进行的明确规范</li>
</ul>
<blockquote>
<p><i class="text-primary">3.1 计划编制</i><br>产品研发经理根据《开发详细时间计划》细化设计工作，编制《系统设计计划》。经相关人员确认后，提交产品团队经理审核，审核通过后发布计划。<br>产品团队经理应将《系统设计计划》及时合并到《开发详细时间计划》中。</p>
<p><i class="text-primary">3.2 设计准则确定</i><br>系统设计组根据项目情况，确定设计准则。准则通常包括：设计的方法、设计使用的工具、设计成果物所使用的模板等。<br>系统设计组制定各种设计方针，设计过程中需遵循已定义的方针。</p>
<p><i class="text-info">3.2.1 概要设计准则</i><br>概要设计方针通常包含：功能模块命名规约、功能模块操作、错误处理、异常处理、提示信息显示、日志记录等。<br>系统设计组汇总概要设计方针形成《概要设计准则》。</p>
<p><i class="text-info">3.2.2 详细设计准则</i><br>详细设计的方针通常包含：类和方法命名规约、方法输入参数的排列次序、方法输出参数的格式、提示信息输出格式、方法级日志输出格式等。<br>系统设计组汇总详细设计方针形成《详细设计准则》。</p>
<p><i class="text-info">3.2.3 设计准则评审</i><br>产品研发经理宜组织资源对《概要设计准则》、《详细设计准则》进行评审，评审通过后，由配置组进行配置管理。</p>
<p><i class="text-primary">3.3概要设计</i></p>
<p><i class="text-info">3.3.1《概要设计书》编制</i><br>《概要设计书》应包含以下内容：<br>系统架构设计<br>根据产品的业务特征、性能要求、可靠性要求、成本等方面内容，针对产品使用的技术平台和软硬件架构，提出多种候选方案；<br>方案的内容应包含：系统使用的软硬件技术平台及相关技术列表、系统的物理架构、物理器件类型、数据库管理系统类型、服务器类型、子系统划分及部署方式、系统的软件架构、第三方软件平台列表等；<br>功能模块设计<br>根据《产品规格说明书》的定义，结合产品的领域知识，通过拆分、合并、分组等方法，将产品的各项功能划分到子系统中，并细化到各机能组件和功能模块上；<br>系统接口设计<br>接口主要用于子系统/模块之间或内部系统与外部系统进行各种交互；<br>接口设计应根据制定各种方针，结合业务特点，并使用相应的设计方法；<br>接口设计的内容应包含：接口的名称、功能描述、接口的输入输出定义、接口的使用方法、接口的数据处理流程、输入输出的数据结构定义、异常处理机制、错误处理机制、日志记录方法及格式等；<br>数据库设计<br>根据业务的复杂程度和设计实现的需要，对核心和重要的数据生成数据字典，对于复杂的操作流程，进行适当的流程说明；<br>完成核心和重要库表的逻辑设计；</p>
<p><i class="text-info">3.3.2《概要设计书》评审</i><br>产品研发经理组织相关干系人对《概要设计书》进行评审。评审通过后，由配置组进行配置管理。</p>
<p><i class="text-primary">3.4 视觉设计</i><br>视觉设计的主要工作是根据交互设计的低保真原型进行高保真视觉效果设计；<br>视觉设计主要内容为整体风格把握，包括页面颜色、元素外观、配图；<br><i class="text-danger">注：强调交互设计中的视觉设计，单独作为一项工作内容进行管理。</i></p>
<p><i class="text-primary">3.5 详细设计</i></p>
<p><i class="text-info">3.5.1《详细设计书》编制</i><br>《详细设计书》应包含以下内容：<br>模块接口设计<br>对用于持久化的文件进行设计，设计的内容应包含:文件的存放位置、文件名称、内容编码、内容结构、读写控制机制等；<br>对持久化内存数据进行设计，设计的内容应包含数据的存储格式、数据的缓存刷新机制、数据的读写时机和方式等；<br>对数据库进行物理设计。设计的内容应包含：表、视图、存储过程等；<br>模块功能设计<br>对模块/子模块的的命名空间进行设计。如对源代码的包结构进行设计；<br>对模块/子模块的内部功能流程进行设计，将功能和职责细分到具体的类；<br>对于核心的类进行属性和方法进行设计；<br>对复杂的计算进行算法设计；<br>共通功能设计<br>对异常、错误、消息和日志进行详细的设计；<br>对内存管理、线程管理等进行设计；<br>对系统性能诸如：抗压性、吞吐量、响应速度、安全性等进行进行设计；</p>
<p><i class="text-info">3.5.2《详细设计书》评审</i><br>产品研发经理组织相关干系人对《详细设计书》进行评审。评审通过后，由配置组进行配置管理。</p>
<p><i class="text-primary">3.6 前端设计</i><br>前端设计是指根据视觉设计结果，进行CSS、HTML、JS进行编码；<br>前端设计的主要工作为：超文本结构设计、样式设计、交互效果实现、浏览器兼容设计、页面性能优化；<br><i class="text-danger">注：强调交互设计中的视觉设计，单独作为一项工作内容进行管理。</i></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[概要设计、详细设计(二) 设计的内容]]></title>
      <url>http://zhengdehua.github.io/2016/06/13/design-outline-detailed-ii/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用 <a href="http://blog.sina.com.cn/s/blog_5dfa359001016urn.html" target="_blank" rel="external">可爱桑树的博客</a></p>
</blockquote>
<h3 id="1-概要设计的主要内容"><a href="#1-概要设计的主要内容" class="headerlink" title="1. 概要设计的主要内容"></a>1. 概要设计的主要内容</h3><p>不同的系统类型其概要设计的内容也不相同，通过概要设计准则我们可以根据实际情况确定概要设计的具体内容，但是一般来说，概要设计的内容可以包含系统构架、模块划分、系统接口、数据设计4个主要方面的内容。<br><img src="/resources/image/jpg/5dfa3590nc6e9122d7b6f&amp;690.jpg" alt=""></p>
<h4 id="1-系统构架"><a href="#1-系统构架" class="headerlink" title="1. 系统构架"></a>1. 系统构架</h4><p>系统构架包含系统使用的软硬件技术平台及相关技术列表、系统的物理架构、物理器件类型、数据库管理系统类型、服务器类型、子系统划分及部署方式、系统的软件架构、第三方软件平台列表等。</p>
<p><span class="text-success">例：硬件架构</span><br><img src="/resources/image/jpg/5dfa3590nc6e9136407eb&amp;690.jpg" alt=""></p>
<p><span class="text-success">例：软件架构：包括层次划分、子系统&amp;模块划分</span><br><img src="/resources/image/jpg/5dfa3590nc6e91588ee83&amp;690.jpg" alt=""></p>
<p><span class="text-success">例：软件技术平台</span><br><span class="text-muted"><br>    软件技术平台通常定义采用什么样的软件体系来实现具体的功能，比如采用SOA结构实现服务分散部署，用ESB解决数据通讯以及共享，采用MVC结构实现交互、业务分离，采用RIA技术支撑复杂、可视交互等等。<br></span><br><img src="/resources/image/jpg/5dfa3590nc6e91721b681&amp;690.jpg" alt=""></p>
<p><span class="text-success">例：子系统划分</span><br><img src="/resources/image/jpg/5dfa3590nc6e91bf8f9f4&amp;690.jpg" alt=""></p>
<h4 id="2-模块划分"><a href="#2-模块划分" class="headerlink" title="2. 模块划分"></a>2. 模块划分</h4><p>模块划分的主要工作是结合业务领域以及系统的要求，通过拆分、合并、分组等方法，将各功能划分到子系统和功能模块中，并细化到各机能组件和功能模块上。模块划分可以通过2步来实现，层次以及模块设计和流程设计。</p>
<p>第1步层次设计，对于复杂系统需要对系统进行多层的划分，然后一层层的设计。层次划分的方法可以结合业务、部署、运用功能等因素考虑，首先进行分类，然后进行抽象分析，整理共性要素，将功能归纳到模块。制作方法方法可以采用各种表述方法，下例都是按图或表的方式制作的。</p>
<p><span class="text-success">例 层次、模块划分</span><br><img src="/resources/image/jpg/5dfa3590nc6e91f0cf41c&amp;690.jpg" alt=""></p>
<p><span class="text-muted"><br>    例中对系统首先进行了平台的划分（省、市、终端）、各平台中的子系统（监控系统、分析系统）进行定义，同时对子系统中的各模块（服务）进行的明确的定义。<br></span></p>
<p><span class="text-success">例 层次、模块划分</span><br><span class="text-muted"><br>    按业务功能进行划分，同时对一些共性模块进行抽象后归纳。<br></span><br><img src="/resources/image/jpg/5dfa3590nc6e9204e123d&amp;690.jpg" alt=""></p>
<p>第2步进行流程划分，进行模块间的流程设计。层次、模块划分完成后，需要对整理描述各模块间的关系，这些关系可以包括时序关系、状态关系、数据关系等等。在实际设计中，可以根据情况采用不同的描述方法来制作对应的设计文档，比如以时序为主的系统可以采用时序图。</p>
<p><span class="text-success">例 模块切分后，切分用例、流程。采用时序图的方式进行的模块间流程设计</span><br><img src="/resources/image/jpg/5dfa3590nc6e9219ec1c4&amp;690.jpg" alt=""></p>
<h4 id="3-接口设计"><a href="#3-接口设计" class="headerlink" title="3. 接口设计"></a>3. 接口设计</h4><p>软件系统结合业务、功能、部署等等因素将软件系统逐步分解到模块，那么模块与模块间就必须根据各模块的功能定义对应的接口。概要中的接口设计主要用于子系统/模块之间或内部系统与外部系统进行各种交互。接口设计的内容应包含:功能描述、接口的输入输出定义、错误处理等。软件系统接口的种类以及规范很多，可以有API、服务接口、文件、数据库等等，所以设计的方法也有很大的差异。但是总体来说接口设计的内容包含：通讯方法、协议、接口调用方法、功能内容、输入出参数、错误/例外机制等。从成果上来看，接口一览（表）以及详细设计资料是必须的资料。</p>
<p><span class="text-success">例.  Web Service 调用的XML格式的接口设计</span><br><span class="text-muted">这个接口定义了数据的格式、含义、类型等方面的内容。</span><br><img src="/resources/image/jpg/5dfa3590nc6e926759617&amp;690.jpg" alt=""></p>
<p><span class="text-success">例.  API调用模式的接口设计</span><br><img src="/resources/image/jpg/5dfa3590nc6e927657106&amp;690.jpg" alt=""></p>
<h4 id="4-数据设计"><a href="#4-数据设计" class="headerlink" title="4. 数据设计"></a>4. 数据设计</h4><p>现代的软件系统和信息数据紧密的相连，尤其信息系统主要就是处理各类数据。从本质上来说各类系统都是（信息）收集、转换、处理、再转换、传播的过程。难道不是这样吗？从人体这个系统到我们的电视、手机系统，这些本质过程有差异吗？ 软件系统的数据设计，尤其信息系统，主要包含数据库设计或完成核心（库）表的设计，当然除了数据库设计还包括建立在内存、文件中各种关键的数据也是设计内容。</p>
<ul>
<li>数据库设计：数据库逻辑设计、物理设计、容量设计、数据字典、数据部署设计等等内容。</li>
<li>数据设计：配置文件设计、临时文件设计、内存数据设计（共享数据设计、内容数据结构设计）等内容。</li>
</ul>
<p><span class="text-success">例 数据库设计（E-R图）</span><br><img src="/resources/image/jpg/5dfa3590nc6e928a33fca&amp;690.jpg" alt=""></p>
<p><span class="text-success">例 数据字典</span><br><span class="text-danger">补充</span></p>
<p><span class="text-success">例 内存设计</span><br><span class="text-danger">补充</span></p>
<p><span class="text-success">例 配置文件设计</span><br><span class="text-danger">补充</span></p>
<h3 id="2-详细设计的主要内容"><a href="#2-详细设计的主要内容" class="headerlink" title="2. 详细设计的主要内容"></a>2. 详细设计的主要内容</h3><p>详细设计的是概要设计的延续，这个延续体现在设计粒度上。一般来说，详细设计根据业务要求以及概要设计的内容，确定细化个各类组件的功能、逻辑流程、业务要求、组件接口。 从过程上基本遵循设计的4个主要活动，具体操作一般可以概括为模块组件分割、模块组件设计、设计共通功能3个步骤，其中组件分割是比较关键的。一般的信息系统，主要的组件分类可以包括画面、报表、服务、共同组件。</p>
<p><img src="/resources/image/gif/5dfa3590nc6e9434a998c&amp;690.gif" alt=""></p>
<h4 id="1-画面设计"><a href="#1-画面设计" class="headerlink" title="1. 画面设计"></a>1. 画面设计</h4><p>画面设计是交互性设计的主要内容之一。常见的设计内容包括画面一览对应的画面迁移关系，详细的画面功能。</p>
<p><span class="text-success">例， 画面一览</span><br><img src="/resources/image/jpg/5dfa3590nc6e929d6ab8b&amp;690.jpg" alt=""></p>
<p><span class="text-success">例，画面迁移</span><br><span class="text-muted">画面迁移主要描述画面间的动作关系、定义所有画面的出入口等内容。</span><br><img src="/resources/image/gif/5dfa3590nc6e92af81572&amp;690.gif" alt=""></p>
<p class="bg-primary">单体画面设计</p>

<p><span class="text-success">例 画面的原型</span><br><img src="/resources/image/jpg/5dfa3590nc6e93c23e117&amp;690.jpg" alt=""></p>
<p><span class="text-success">例 画面的动作定义</span><br><img src="/resources/image/jpg/5dfa3590nc6e93cf8d1ab&amp;690.jpg" alt=""></p>
<p><span class="text-success">例 画面要素、处理定义</span><br><img src="/resources/image/jpg/5dfa3590nc6e93e123ffa&amp;690.jpg" alt=""></p>
<h4 id="2-服务设计"><a href="#2-服务设计" class="headerlink" title="2. 服务设计"></a>2. 服务设计</h4><p>服务组件对应软件系统主要通过软件接口实现功能的模块，详细设计中服务设计主要内容包括对应程序模块（package）设计、Class设计、处理逻辑（时序关系）、内外接口、限制条件等等。</p>
<p><span class="text-success">例 处理逻辑</span><br><img src="/resources/image/gif/5dfa3590nc6e93f20511e&amp;690.gif" alt=""></p>
<p><span class="text-success">例 Class设计</span><br><img src="/resources/image/gif/5dfa3590n7a4a8664ac7f&amp;690.gif" alt=""></p>
<h4 id="3-共同设计"><a href="#3-共同设计" class="headerlink" title="3. 共同设计"></a>3. 共同设计</h4><p>详细设计中关键的步骤就是进行共同设计，共同设计的多少往往极大的影响后续开发的工作量。比如一个系统抽取40%的共同和只抽取10%的共同，开发、测试工作量差异很大。建议具体项目中应尽早以及有效的管理共同设计。共同设计可以大体分为业务共同、技术共同。</p>
<ul>
<li>业务共同是同业务相关的，可以根据业务的特征识别并抽象出不同的模型进行设计，不过一些常见共同比较容易识别，比如权限管理、基础(master)数据管理、用户管理、安全管理等等。再如常见的电商系统，包括内容(CMS)管理、推荐引擎、TM、OSS、BI、支付、广告管理等都可以根据情况纳入到共同设计中。</li>
<li>技术共同一般是和计算机技术相关的，比如线程管理、画面各组件、LOG管理、内存管理、文件处理、文字处理、配置管理、加解密、日志、消息、异常、错误处理等。</li>
</ul>
<p><span class="text-success">例 共同设计</span><br><span class="text-danger">补充</span></p>
<p><span class="text-success">例 目录( 配置) 结构的设计</span><br><img src="/resources/image/jpg/5dfa3590n7a4a867ac740&amp;690.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 基本命令]]></title>
      <url>http://zhengdehua.github.io/2016/06/12/essential-git/</url>
      <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>git init</code> </p>
<blockquote>
<p>创建本地仓库，在当前文件夹下创建一个 .git 文件夹，里面有版本信息、标记内容等。</p>
</blockquote>
<p><code>git remote add origin git@github.com:zhengdehua/xxx.git</code></p>
<blockquote>
<p>关联本地仓库和远程仓库, 关联后，每次 push 的时候就不用再指定远程仓库了。</p>
</blockquote>
<p><code>git add</code> 和 <code>git rm</code></p>
<blockquote>
<p>从本地仓库增删文件，结果会保存到本地缓存。</p>
</blockquote>
<p><code>git commit -m &quot;注释&quot;</code></p>
<blockquote>
<p>提交本机缓存中的内容到本地的 HEAD 里面。</p>
</blockquote>
<p><code>git push origin master</code></p>
<blockquote>
<p>把本地的 commit(提交) push 到远程仓库上，origin 就是之前 <code>git remote add origin</code> 里面的 origin, origin 代替了远程仓库的地址: git push git@github.com:zhengdehua/xxx.git master</p>
</blockquote>
<p><code>git pull origin master</code></p>
<blockquote>
<p>从远处仓库 pull 新的改动</p>
</blockquote>
<p><code>git status</code></p>
<blockquote>
<p>查看提交状态，可以看到增删改的文件变化。</p>
</blockquote>
<p><code>git add -A</code></p>
<blockquote>
<p>提交全部修改</p>
</blockquote>
<p><strong>取回远端 master 与本地 master 合并</strong><br><code>git checkout master</code><br><code>git fetch --all</code> 或 <code>git fetch origin master</code><br><code>git reset --hard origin/master</code> 或 <code>git rebase origin/master</code></p>
<p><strong>查找包含某文件的 commit</strong><br><code>git log 文件路径</code><br><code>git show commit_id</code> 或 <code>git log --follow filename(绝对路径)</code></p>
<p><strong>清空 git working copy 还没追踪的文件</strong><br><code>git clena -f</code><br><code>git clean -f -d</code> (删除目录)<br><code>git clean -f -X</code> (删除忽略的文件)<br><code>git clean -f -x</code> (删除忽略和非忽略的文件)</p>
<p><strong>配置 git </strong></p>
<blockquote>
<p>配置 git 用户信息：<br><code>git config --global user.name &quot;xxx&quot;</code> – 配置用户名<br><code>git config --global user.email &quot;xxx&quot;</code> – 配置邮箱<br><code>git config --list</code> – 查看配置列表</p>
<p>配置 sshkey, 上传代码时这个 sshkey 用来确认是否有上传权限<br>以 github 为例:</p>
<ol>
<li>创建本地 ssh: <code>ssh-keygen -t rsa -C &quot;github 注册邮箱&quot;</code></li>
<li>在 github 中添加这个 sshkey:<br>复制 C:\Documents and Settings\Administrator.ssh\id_rsa.pub 文件中的内容;<br>登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；</li>
<li>验证: <code>ssh -T git@github.com</code><br>出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016高考全国一英语]]></title>
      <url>http://zhengdehua.github.io/2016/06/09/English-2016-college-entrance/</url>
      <content type="html"><![CDATA[<h2 id="阅读理解"><a href="#阅读理解" class="headerlink" title="阅读理解"></a>阅读理解</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><blockquote>
<p>You probably know who Marie Curie was,but you may not have heard of Rachel Carson.Of the outstanding ladies listed below,who do youthink was the most important woman of the past 100 years?</p>
<p>Jane Addams(1860-1935)<br>Anyone who has ever been helped by a social worker has Jane Addams to thank.Addans helped the poor and worked for peace. She encouraged a sense of community(社区)by creating shelters and promoting education and services for people in need In 1931,Addams became the first American woman to win the Nobel Peace Prize.</p>
<p>Rachel Carson(1907-1964)<br>If it weren’t for Rachel Carson, the environmental movement might not exist today.Her popular 1962 book Silent Spring raised awareness of the dangers of pollution and the harmful effects of chemicals on humans and on the world’s  lakes and oceans.</p>
<p>Sandra Day O’Connor(1930-present)<br>When Sandra Day O’Connor finished third in her class at Stanford Law School, in 1952,she could not find work at a law firm because she was a woman. She became an Arizona state senator(参议员) and ,in 1981, the first woman to join the  U.S. Supreme Court. O’Connorgave the deciding vote in many important cases during her 24 years on the top court.</p>
<p>Rosa Parks(1913-2005)<br>On December 1,1955,in Montgomery,Alabama,Rasa Parks would not give up her seat on a bus to a passenger. Her simple act landed Parks in prison.But it also set lff the Montgmery bus boycott. It lasted for more than a year, and kicked off the civil-rights movement. “The only tired I was,was tired lr giving in,”said Parks.</p>
<p><strong>What is jane Addams noted for in history?</strong><br>A. Her social work.<br>B. Her lack of proper training in law.<br>C. Her efforts towin a prize.<br>D. Her community background.</p>
<p><strong>What is the reason for O’Connor’s being rejected by the law firm?</strong><br>A. Her lack of proper training in law.<br>B. Her little work experience in court.<br>C. The discrimination against women.<br>D. The poor financial conditions.</p>
<p><strong>Who made agreat contribution to the civil-rights movement in the US?</strong><br>A. JaneAddams.   B. Rachel Carson.     C. Sandra Day O’Connor.</p>
<p><strong>What can we infer about the women mentioned in the text?</strong><br>A. They are highly educated.     B. They are truly creative.<br>C. They are pioneers.           D. They are peace-lovers.</p>
<p>Answer: <strong>A</strong>  <strong>C</strong>  <strong>D</strong>  <strong>C</strong></p>
</blockquote>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><blockquote>
<p>Grandparents Answer a Call<br>As a third generation native of Brownsville, Texas, Mildred Garza never pleased moveaway. Even when her daughter and son asked her to move to San Antonio to help their children, she politely refused . Only after a year of friendly discussion did Ms Gaf finally say yes. That was four years ago. Today all three generations regard the move to a success,giving them a closer relationship than they would have had in separate cities.</p>
<p>No statistics show the number of grandparents like Garza who are moving closer to the children and grandchildren. Yet there is evidence suggesting that the trend is growing. Even President Obama’s mother-in-law, Marian Robinson, has agreed to leave Chicago and into the WhiteHouse to help care for her granddaughters. According to a study grandparents com. 83 percent of the people said Mrs. </p>
<p>Robinson ‘s decision will influence the grandparents in the American family. Two-thirds believe more families will follow the example of Obama’s family.<br>“ in the 1960s we were all a little wild and couldn’t get away from home far enough fsst enough to prove we could do it on our own,”says Christine Crosby, publisher of grate manazine for grandparents .We now realize how important family is and how important”” to be near them, especially when you’re raining children.”</p>
<p>Moving is not for everyone. Almost every grandparent wants to be with his or her grandchildren and is willing to make sacrifices, but sometimes it is wiser to say no and visit frequently instead. Having your grandchildren far away is hard, especially knowing your adult child is struggling, but giving up the life you know may be harder.</p>
<p><strong>Why was Garza’s move a success?</strong><br>A．It strengthened her family ties.<br>B．It improved her living conditions.<br>C．It enabled her make more friends.<br>D．It helped her know more new places.</p>
<p><strong>What was the reaction of the public to Mrs. Robinson’s decision?</strong><br>A．17% expressed their support for it.<br>B．Few people responded sympathetically.<br>C．83% believed it had a bad influence.<br>D．The majority thought it was a trend.</p>
<p><strong>What did Crosby say about people in the 1960s?</strong><br>A．They were unsure of raise more children.<br>B．They were eager to raise more children.<br>C．They wanted to live away from their parents.<br>D．They bad little respect for their grandparent.</p>
<p><strong>What does the author suggest the grandparents do in the lasr paragraph?</strong><br>A. Make decisions in the best interests’ of their own<br>B. Ask their children to pay more visits to them<br>C. Sacrifice for their struggling children<br>D. Get to know themselves better</p>
<p>Answer: <strong>A</strong>  <strong>D</strong>  <strong>C</strong> <strong>A</strong></p>
</blockquote>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><blockquote>
<p>I am peter Hodes ,a volunteer stem courier. Since March 2012, I’ve done 89 trips of those , 51 have been abroad, I have 42 hours to carry stem cells（干细胞）in my little box because I’ve got two ice packs and that’s how long they last, in all, from the time the stem cells are harvested from a donor(捐献者) to the time they can be implanted in the patient, we’ve got 72 hours at most, So I am always conscious of time. </p>
<p>I had one trip last year where I was caught by a hurricane in America. I picked up the stem cells in Providence, Rhode Island, and was meant to fly to Washington then backto London. But when I arrived at the check-in desk at Providence, the lady on the desk said:”Well, I’m really sorry, I’ve got some bad news for you-there are no fights from Washington.”So I took my box and put it on the desk and I said:”In this box are some stem cells that are urgently needed for a patient-please,please, you’ve got to get me back to the United Kingdom.”She just dropped everything. She arranged for a flight on a small  plance to be held for me.re-routed(改道)me through Newark and got me back to the UK even earlier than originally scheduled.</p>
<p>For this courier job, you’re consciously aware than that box you’re got something that is potentially going to save somebody’s life.</p>
<p><strong>Which of thefollowing can replace the underlined word “courier” in Paragraph17</strong><br>A provider                        B delivery man<br>C collector                       D medical doctor</p>
<p><strong>Why does Peter have to complete his trip within 42hours?</strong><br>A. He cannot stay away from his job too long.<br>B. The donor can only wait for that long.<br>C. The operation needs that very much.<br>D. The ice won’t last any longer.</p>
<p><strong>Which flight did the woman put Peter on first?</strong><br>A. To London        B. To NewarkC. To Providence       D. To Washington</p>
<p>Answer: <strong>B</strong>  <strong>D</strong>  <strong>B</strong></p>
</blockquote>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><blockquote>
<p>The meaning of silence varies among cultural groups. Silences may be thoughtful, or they may be empty when a person has nothing to say. A silence in a conversation may also show stubbornness, or worry. Silence may be viewed by some cultural groups as extremely uncomfortable; therefore attempts may be made to fill every gap(隙)with conversation. Persons in other cultural groups value silence and view it as necessary for understanding a person’s needs. </p>
<p>Many Native Americans value silence and feel it is a basic part of communicating among people, just as some traditional Chinese and Thai persons do. Therefore, when a person from one of these cultures is speaking and suddenly stops, what maybe implied(暗示) is that the person wants the listener to consider what has been said before continuing. In these cultures, silence is a call for reflection.</p>
<p>Other cultures may use silence in other ways, particularly when dealing with conflicts among people or in relationships of people with different amounts of power. For example, Russian, French, and Spanish persons may use silence to show agreement between parties about the topic udner discussion. However, Mexicans may use silence when instructions are given by a person in authority rather than be rude to that person by arguing with him or her. In still another use, persons in Asian cultures may view silence as a sign of respect, particularly to an elder or a person in authority.</p>
<p>Nurses and other care-geivers need to be aware of the possible meanings of silence when they come across the personal anxiety their patientsmay be expericencing. Nurses should recognize their own personal and cultural construction of silence so that a patient’s silence is not interrupted too early or allowed to go on unnecessarily. A nurse who understands the healing(治愈) value of silence can use this understanding to assist in the care of patients from their own and from other cultures.</p>
<p><strong>What does the author say about silencein conversations?</strong><br>A.It implies anger.<br>B.It promotes friendship.<br>C.It is culture-specific.<br>D.It is content-based.</p>
<p><strong>Which of the following people mightregard silence as a call for careful thought?</strong><br>A.The Chinese.<br>B.The French.<br>C.The Mexicans.<br>D.The Russians.</p>
<p><strong>What does the author advise nurses todo about silence?</strong><br>A.Let it continue as the patientpleases.<br>B.Break it while treating patients.<br>C.Evaluate its harm to patients.<br>D.Make use of its healing effects.</p>
<p><strong>What may be the best title for thetext?</strong><br>A.Sound and Silence<br>B.What It Means to Be Silent<br>C.Silence to Native Americans<br>D.Speech Is Silver; Silence Is Gold</p>
<p>Answer: <strong>C</strong>  <strong>A</strong>  <strong>D</strong>  <strong>B</strong></p>
</blockquote>
<h2 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h2><blockquote>
<p>Dear Ms Jenkins,<br>    I am writing to you ask you for help. (首句说明来信目的) In order to accumulate some social experience (积累社会经验) and improve my work ability, I am going to take a part-time job during my summer vacation. I am quite interested in a position in a foreign-captured company (对一个外资公司的一个职位感兴趣) and I have already written my application letter and my resume all in English. However, I’m afraid that there might be some grammar mistakes or inappropriate format (语法错误或不适当的格式) in the materials that I prepared. I would be so grateful if you correct the mistakes and improve the format of the application and the resume for me.<br>Your early reply would be highly appreciated. (期待早日回复)</p>
<p>Sincerely yours,<br>Li Hua</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语四六级高频词汇]]></title>
      <url>http://zhengdehua.github.io/2016/06/09/English-CET4-CET6/</url>
      <content type="html"><![CDATA[<h3 id="四六级高频词汇"><a href="#四六级高频词汇" class="headerlink" title="四六级高频词汇"></a>四六级高频词汇</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line">dispose vi. 除掉；处置；解决；处理(of)</span><br><span class="line">bacteria n. 细菌        </span><br><span class="line">breed n. 种，品种 v. 繁殖，产仔</span><br><span class="line">vanish vi. 消灭，不见</span><br><span class="line">suspicion n. 怀疑，疑心</span><br><span class="line">suspicious a. 怀疑的，可疑的</span><br><span class="line">mild a. 温暖的，暖和的；温柔的，味淡的</span><br><span class="line">tender a. 温柔的；脆弱的</span><br><span class="line">nuisance n. 损害，妨害，讨厌(的人或事物)</span><br><span class="line">brake n. 刹车，制动器 v. 刹住(车)</span><br><span class="line">vague a. 模糊的，不明确的</span><br><span class="line">extinct a. 绝灭的，熄灭的</span><br><span class="line">extraordinary a. 不平常的，特别的，非凡的</span><br><span class="line">appeal n. /vi. 呼吁，恳求</span><br><span class="line">approve v. 赞成，同意，批准</span><br><span class="line">tide n. 潮汐；潮流</span><br><span class="line">torture n./vt. 拷打，折磨</span><br><span class="line">wander vi. 漫游，闲逛</span><br><span class="line">wax n. 蜡</span><br><span class="line">weave v. 织，编</span><br><span class="line">cargo n. (船、飞机等装载的)货物</span><br><span class="line">vessel n. 船舶；容器，器皿；血管</span><br><span class="line">oblige v. 迫使，责成；使感激</span><br><span class="line">obscure a. 阴暗，模糊</span><br><span class="line">extent n. 程度，范围，大小，限度</span><br><span class="line">exterior n. 外部，外表 a. 外部的，外表的</span><br><span class="line">external a. 外部的，外表的，外面的</span><br><span class="line">petroleum n. 石油</span><br><span class="line">decay vi. 腐烂，腐朽</span><br><span class="line">decent a. 像样的，体面的</span><br><span class="line">ruin v. 毁坏，破坏 n. 毁灭，[pl.]废墟</span><br><span class="line">sake n. 缘故，理由</span><br><span class="line">tedious a. 乏味道，单调的，</span><br><span class="line">undergo v. 经历，遭受</span><br><span class="line">bachelor n. 学士，学士学位；单身汉</span><br><span class="line">vacant a. 空的，未占用的</span><br><span class="line">vacuum n. 真空，真空吸尘器</span><br><span class="line">optics n. (单、复数同形)光学</span><br><span class="line">excess n. 过分，过量，过剩</span><br><span class="line">expel v. 驱逐，开除，赶出</span><br><span class="line">expenditure n. 支出，消费；经费</span><br><span class="line">personnel n. [总称] 人员，员工；人事部门</span><br><span class="line">the Pacific Ocean 太平洋</span><br><span class="line">the Antarctic Ocean 南冰洋</span><br><span class="line">grand a. 宏伟大，壮丽的，重大的</span><br><span class="line">invade v. 侵入，侵略，侵袭</span><br><span class="line">balcony n. 阳台</span><br><span class="line">impose vt. 把.。.加强(on)；采用，利用</span><br><span class="line">religion n. 宗教，宗教信仰</span><br><span class="line">religious a. 宗教的 </span><br><span class="line">videotape n. 录像磁带 v. 把.。.录在录像带上</span><br><span class="line">interfere v. 干涉，干扰，妨碍</span><br><span class="line">beforehand ad. 预先，事先</span><br><span class="line">racial a. 人种的，种族的</span><br><span class="line">radiation n. 放射物，辐射</span><br><span class="line">radical a。根本的；激进的</span><br><span class="line">wonder n. 惊奇，奇迹 v. 想知道，对.。.感到疑惑</span><br><span class="line">hollow a. 空的，中空的，空虚道</span><br><span class="line">ban vt. 取缔，禁止</span><br><span class="line">valley n. 山谷，峡谷</span><br><span class="line">exploit v. 剥削；利用，开采</span><br><span class="line">precaution n. 预防，防备，警惕</span><br><span class="line">idle a. 懒散的，无所事事的</span><br><span class="line">poverty n. 贫穷</span><br><span class="line">barrel n. 桶</span><br><span class="line">bargain n. 便宜货 vi. 讨价还价</span><br><span class="line">coarse a. 粗的，粗糙的，粗劣的</span><br><span class="line">coil n. 线圈 v. 卷，盘绕</span><br><span class="line">enclose vt. 围住；把.。.装入信封</span><br><span class="line">scandal n. 丑事，丑闻</span><br><span class="line">virtual a. 实际上的，事实上的</span><br><span class="line">orient vt. 使适应，(to, toward)使朝向 n. 东方</span><br><span class="line">portion n. 一部分</span><br><span class="line">illusion n. 错觉</span><br><span class="line">likelihood n. 可能，可能性</span><br><span class="line">stripe n. 条纹</span><br><span class="line">awkward a.尴尬的，笨拙的，棘手的</span><br><span class="line">collision n. 碰撞，冲突</span><br><span class="line">devise vt. 发明，策划，想出</span><br><span class="line">inevitable a. 不可避免的</span><br><span class="line">naval a. 海军的</span><br><span class="line">provision n. [pl.] 给养，口粮；准备，设备，装置</span><br><span class="line">stale a. 不新鲜的，陈腐的</span><br><span class="line">substitute n. 代用品 vt. 代替</span><br><span class="line">discrimination n. 歧视；辨别力</span><br><span class="line">scratch v. /n. 抓，搔，扒</span><br><span class="line">nevertheless ad. 仍然，然而，不过</span><br><span class="line">neutral a. 中立的，中性的</span><br><span class="line">spray v. 喷，(使)溅散</span><br><span class="line">auxiliary a. 辅助的，备用的</span><br><span class="line">competent a. 有能力的，能胜任的</span><br><span class="line">moist a. 潮湿的</span><br><span class="line">moisture n. 潮湿</span><br><span class="line">region n. 地区；范围；幅度</span><br><span class="line">sophisticated a. 老于世故的，老练的；很复杂的</span><br><span class="line">splendid a. 极好的，壮丽的，辉煌的</span><br><span class="line">prospect n. 前景，前途；景象</span><br><span class="line">prosperity n。兴旺，繁荣</span><br><span class="line">cope vi. (with)(成功地)应付，处理</span><br><span class="line">discipline n. 纪律；惩罚；学科</span><br><span class="line">domestic a. 本国的，国内的；家用的；家庭的</span><br><span class="line">cliff n. 悬崖，峭壁</span><br><span class="line">distress n. 痛苦，悲伤 vt. 使痛苦</span><br><span class="line">faculty n. 能力，技能；系，学科，学院；全体教员</span><br><span class="line">mood n. 心情，情绪；语气</span><br><span class="line">prominent a. 突出的</span><br><span class="line">substance n. 物质；实质</span><br><span class="line">substantial a. 可观的；牢固的；实质的</span><br><span class="line">prompt vt. 促使 a. 敏捷的，及时的</span><br><span class="line">vivid a. 生动的</span><br><span class="line">venture n. 风险投资，风险项目 v. 冒险；取于</span><br><span class="line">waist n. 腰，腰部</span><br><span class="line">weld v. /n. 焊接</span><br><span class="line">yawn vi. 打哈欠</span><br><span class="line">yield vi. (to)屈服于；让出，放弃 n. 产量</span><br><span class="line">tense a. 紧张的 v. 拉紧 n. 时态</span><br><span class="line">dash vi. 猛冲，飞奔</span><br><span class="line">entitle vt. 给.。.权利，给.。.资格</span><br><span class="line">regulate vt. 管理，调节</span><br><span class="line">exaggerate v. 夸大，夸张</span><br><span class="line">shrink vi. 起皱，收缩；退缩</span><br><span class="line">suburb n. 市郊</span><br><span class="line">slope n. 斜坡，斜面</span><br><span class="line">reinforce vt. 增强，加强</span><br><span class="line">column n. 柱，圆柱；栏，专栏</span><br><span class="line">comedy n. 喜剧</span><br><span class="line">dumb a. 哑的；沉默的</span><br><span class="line">dump vt. 倾卸，倾倒</span><br><span class="line">principal a. 最重要的 n. 负责人，校长</span><br><span class="line">prohibit vt. 禁止，不准</span><br><span class="line">remedy n. /vt. 补救，医治，治疗</span><br><span class="line">vain a. 徒劳的，无效的</span><br><span class="line">undertake vt. 承担，着手做；同意，答应</span><br><span class="line">obstacle n. 障碍(物)，妨碍</span><br><span class="line">odd a. 奇特的，古怪的；奇数的</span><br><span class="line">omit vt. 省略</span><br><span class="line">opponent n. 敌手，对手</span><br><span class="line">orchestra n. 管弦乐队</span><br><span class="line">semester n. 学期；半年</span><br><span class="line">seminar n. 研讨会</span><br><span class="line">territory n. 领土</span><br><span class="line">architect n. 建筑师</span><br><span class="line">biology n. 生物学</span><br><span class="line">geology n. 地质学</span><br><span class="line">geometry n. 几何(学)</span><br><span class="line">algebra n. 代数</span><br><span class="line">entertainment n. 娱乐；招待，款待</span><br><span class="line">enthusiasm n. 热情，热心</span><br><span class="line">episode n. 插曲，片段</span><br><span class="line">equation n. 方程(式)</span><br><span class="line">restraint n. 抑制，限制</span><br><span class="line">resume v. (中断后)重新开始 n.摘要，简历</span><br><span class="line">severe a. 严重的</span><br><span class="line">simplicity n. 简单；朴素</span><br><span class="line">sorrow n.悲伤，懊悔</span><br><span class="line">stuff n. 原料，材料 vt. 填进，塞满</span><br><span class="line">temptation n. 诱惑，引诱</span><br><span class="line">terror n. 恐怖</span><br><span class="line">thrust v. 挤，推，插</span><br><span class="line">treaty n. 条约，协定</span><br><span class="line">arise vi. 产生，出现，发生；起身</span><br><span class="line">arouse vt. 引起，激起；唤醒</span><br><span class="line">burden n. 重担，负荷</span><br><span class="line">bureau n. 局，办事处</span><br><span class="line">marvelous a. 奇迹般的，惊人的</span><br><span class="line">nonsense n. 胡说，冒失的行动</span><br><span class="line">nucleus n. 核</span><br><span class="line">retail n. /v. /ad. 零售</span><br><span class="line">retain vt. 保留，保持</span><br><span class="line">sponsor n. 发起者，主办者 vt. 发起，主办，资助</span><br><span class="line">spur n. /vt. 刺激，激励</span><br><span class="line">triumph n. 胜利，成功</span><br><span class="line">tuition n. 学费</span><br><span class="line">vibrate v. 振动，摇摆  </span><br><span class="line">wagon n. 四轮马车，铁路货车</span><br><span class="line">bunch n. 群，伙；束，串</span><br><span class="line">chaos n. 混乱，紊乱</span><br><span class="line">erect a. 竖直的 v. 建造，竖立</span><br><span class="line">fax n. /vt. 传真</span><br><span class="line">fertile a. 肥沃的；多产的</span><br><span class="line">fertilizer n. 肥料</span><br><span class="line">gratitude n. 感激</span><br><span class="line">horror n. 恐怖</span><br><span class="line">jungle n. 丛林，密林</span><br><span class="line">knot n. 结 vt. 把.。.打成结</span><br><span class="line">powder n. 粉末</span><br><span class="line">conservation n. 保存，保护</span><br><span class="line">passive a. 被动的，消极的</span><br><span class="line">reluctant a. 不情愿的，勉强的</span><br><span class="line">relief n. 轻松，宽慰；减轻</span><br><span class="line">reputation n. 名气，声誉</span><br><span class="line">shiver vi/n. 发抖</span><br><span class="line">shrug v. /n. 耸肩</span><br><span class="line">utter vt. 说出 a. 完全的，彻底的</span><br><span class="line">variation n. 变化，变动</span><br><span class="line">appliance n. 器具，器械</span><br><span class="line">consent n. 准许，同意 vi (to) 准许，同意</span><br><span class="line">defect n. 缺点，缺陷</span><br><span class="line">delicate a. 易碎的；娇弱的；精美的</span><br><span class="line">evolve v。演变</span><br><span class="line">frown v. /n. 皱眉</span><br><span class="line">guilty a. 内疚的；有罪的</span><br><span class="line">liquor n. 酒，烈性酒</span><br><span class="line">liter/litre n. 升</span><br><span class="line">modest a. 谦虚的</span><br><span class="line">molecule n. 分子</span><br><span class="line">orbit n. 轨道 v. (绕.。.)作轨道运行</span><br><span class="line">particle n. 微粒</span><br><span class="line">respond vi. 回答，答复；反应</span><br><span class="line">sensible a. 明智的</span><br><span class="line">tremble vi. 颤抖</span><br><span class="line">tremendous a. 巨大的；精彩的</span><br><span class="line">deposit n. 存款，定金 v。存放，储蓄</span><br><span class="line">trial n. 审讯；试验</span><br><span class="line">deputy n. 副职，代表</span><br><span class="line">derive vt. 取得，得到；(from)起源于</span><br><span class="line">descend v. 下来，下降</span><br><span class="line">mist n。薄雾</span><br><span class="line">resemble vt. 像，类似于</span><br><span class="line">revenue n. 收入，岁入；税收</span><br><span class="line">shelter n. 掩蔽处；住所</span><br><span class="line">shield n. 防护物，盾 vt. 保护，防护</span><br><span class="line">violet a. 紫色的</span><br><span class="line">weed n. 杂草，野草</span><br><span class="line">welfare n. 福利</span><br><span class="line">whatsoever ad. (用于否定句)任何</span><br><span class="line">whereas conj. 然而，但是，尽管</span><br><span class="line">exceedingly ad. 非常，极其</span><br><span class="line">exclaim v. 呼喊，大声说</span><br><span class="line">excursion n. 远足</span><br><span class="line">flee vi. 逃走</span><br><span class="line">flock n. 羊群，(鸟兽等)一群；一伙人</span><br><span class="line">haste n. 急速，急忙</span><br><span class="line">hatred n. 憎恶，憎恨</span><br><span class="line">incident n. 事件，事变</span><br><span class="line">infant n. 婴儿</span><br><span class="line">inferior a. 劣等的，次的，下级的</span><br><span class="line">infinite a. 无限的</span><br><span class="line">ingredient n. 组成部分</span><br><span class="line">inhabitant n. 居民</span><br><span class="line">jam n. 果酱；拥挤，堵塞</span><br><span class="line">jewel n. 宝石</span><br><span class="line">joint a。连接的；共同的</span><br><span class="line">laser n. 激光</span><br><span class="line">magnet n. 磁铁，磁体</span><br><span class="line">manufacture vt. /n. 制造，加工</span><br><span class="line">marine a. 海的；海产的</span><br><span class="line">mutual a. 相互的</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[25个经典的spring面试问答]]></title>
      <url>http://zhengdehua.github.io/2016/06/09/spring-interview/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用自 <a href="http://www.codeceo.com/article/spring-top-25-interview.html" target="_blank" rel="external">codeceo 网站</a></p>
</blockquote>
<h3 id="问题清单"><a href="#问题清单" class="headerlink" title="问题清单"></a>问题清单</h3><ol>
<li><a href="#answer-1">什么是Spring框架？Spring框架有哪些主要模块？</a></li>
<li><a href="#answer-2">使用Spring框架有什么好处？</a></li>
<li><a href="#answer-3">什么是控制反转（IOC）？什么是依赖注入？</a></li>
<li><a href="#answer-4">请解释下Spring中的IOC？</a></li>
<li><a href="#answer-5">BeanFactory和ApplicationContext有什么区别？</a></li>
<li><a href="#answer-6">将Spring配置到你的应用中共有几种方法？</a></li>
<li><a href="#answer-7">什么基于XML的配置？</a></li>
<li><a href="#answer-8">什么基于Java的配置？</a></li>
<li><a href="#answer-9">怎样用注解的方式配置Spring？</a></li>
<li><a href="#answer-10">描述Spring Bean的生命周期？</a></li>
<li><a href="#answer-11">描述Spring中各种Bean的范围？</a></li>
<li><a href="#answer-12">什么是Spring的嵌入beans？</a></li>
<li><a href="#answer-13">Spring框架中的单例bean是否是线程安全的？</a></li>
<li><a href="#answer-14">请举例说明如何用Spring注入一个Java的集合类？</a></li>
<li><a href="#answer-15">请举例说明如何在Spring的Bean中注入一个java.util.Properties？</a></li>
<li><a href="#answer-16">请解释Spring的Bean的自动生成原理？</a></li>
<li><a href="#answer-17">请辨析自动生成Bean之间模块的区别？</a></li>
<li><a href="#answer-18">如何开启基于基于注解的自动写入？</a></li>
<li><a href="#answer-19">请举例说明@Required注解？</a></li>
<li><a href="#answer-20">请举例说明@Autowired注解？</a></li>
<li><a href="#answer-21">请举例说明@Qualifier注解？</a></li>
<li><a href="#answer-22">请说明构造器注入和setter方法注入之间的区别？</a></li>
<li><a href="#answer-23">Spring框架中不同类型event有什么区别？</a></li>
<li><a href="#answer-24">FileSystemResource和ClassPathResource有何区别？</a></li>
<li><a href="#answer-25">请列举Spring框架中用了哪些设计模式？</a></li>
</ol>
<p></p><h3 id="answer-1"></h3><p></p>
<h3 id="1、什么是Spring框架？Spring框架有哪些主要模块？"><a href="#1、什么是Spring框架？Spring框架有哪些主要模块？" class="headerlink" title="1、什么是Spring框架？Spring框架有哪些主要模块？"></a>1、什么是Spring框架？Spring框架有哪些主要模块？</h3><p>Spring框架是一个为Java应用程序的开发提供了综合、广泛的基础性支持的Java平台。Spring帮助开发者解决了开发中基础性的问题，使得开发人员可以专注于应用程序的开发。Spring框架本身亦是按照设计模式精心打造，这使得我们可以在开发环境中安心的集成Spring框架，不必担心Spring是如何在后台进行工作的。</p>
<p>Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。</p>
<p><img src="/resources/image/png/spring-modules.png" alt="spring-modules"></p>
<p></p><h3 id="answer-2"></h3><p></p>
<h3 id="2、使用Spring框架能带来哪些好处？"><a href="#2、使用Spring框架能带来哪些好处？" class="headerlink" title="2、使用Spring框架能带来哪些好处？"></a>2、使用Spring框架能带来哪些好处？</h3><ol>
<li>Dependency Injection(DI) 方法使得构造器和JavaBean properties文件中的依赖关系一目了然。</li>
<li>与EJB容器相比较，IoC容器更加趋向于轻量级。这样一来IoC容器在有限的内存和CPU资源的情况下进行应用程序的开发和发布就变得十分有利。</li>
<li>Spring并没有闭门造车，Spring利用了已有的技术比如ORM框架、logging框架、J2EE、Quartz和JDK Timer，以及其他视图技术。</li>
<li>Spring框架是按照模块的形式来组织的。由包和类的编号就可以看出其所属的模块，开发者仅仅需要选用他们需要的模块即可。</li>
<li>要测试一项用Spring开发的应用程序十分简单，因为测试相关的环境代码都已经囊括在框架中了。更加简单的是，利用JavaBean形式的POJO类，可以很方便的利用依赖注入来写入测试数据。</li>
<li>Spring的Web框架亦是一个精心设计的Web MVC框架，为开发者们在web框架的选择上提供了一个除了主流框架比如Struts、过度设计的、不流行web框架的以外的有力选项。</li>
<li>Spring提供了一个便捷的事务管理接口，适用于小型的本地事物处理（比如在单DB的环境下）和复杂的共同事物处理（比如利用JTA的复杂DB环境）。</li>
</ol>
<p></p><h3 id="answer-3"></h3><p></p>
<h3 id="3、什么是控制反转-IOC-？什么是依赖注入？"><a href="#3、什么是控制反转-IOC-？什么是依赖注入？" class="headerlink" title="3、什么是控制反转(IOC)？什么是依赖注入？"></a>3、什么是控制反转(IOC)？什么是依赖注入？</h3><p>控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。</p>
<p>控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。</p>
<p>依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？</p>
<p>在Java中依然注入有以下三种实现方式：</p>
<ul>
<li>构造器注入</li>
<li>Setter方法注入</li>
<li>接口注入</li>
</ul>
<p></p><h3 id="answer-4"></h3><p></p>
<h3 id="4、请解释下Spring框架中的IoC？"><a href="#4、请解释下Spring框架中的IoC？" class="headerlink" title="4、请解释下Spring框架中的IoC？"></a>4、请解释下Spring框架中的IoC？</h3><p>Spring中的 <code>org.springframework.beans</code> 包和 <code>org.springframework.context</code> 包构成了Spring框架IoC容器的基础。</p>
<p><code>BeanFactory</code> 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。<code>ApplicationContex</code> 接口对 <code>BeanFactory</code>（是一个子接口）进行了扩展，在 <code>BeanFactory</code> 的基础上添加了其他功能，比如与Spring的AOP更容易集成，也提供了处理 <code>message resource</code> 的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对Web应用的 <code>WebApplicationContext</code>。</p>
<p><code>org.springframework.beans.factory.BeanFactory</code> 是Spring IoC容器的具体实现，用来包装和管理前面提到的各种bean。 <code>BeanFactory</code> 接口是Spring IoC 容器的核心接口。</p>
<p></p><h3 id="answer-5"></h3><p></p>
<h3 id="5、BeanFactory和ApplicationContext有什么区别？"><a href="#5、BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="5、BeanFactory和ApplicationContext有什么区别？"></a>5、BeanFactory和ApplicationContext有什么区别？</h3><p>BeanFactory 可以理解为含有bean集合的工厂类。BeanFactory 包含了种bean的定义，以便在接收到客户端请求时将对应的bean实例化。</p>
<p>BeanFactory还能在实例化对象的时生成协作类之间的关系。此举将bean自身与bean客户端的配置中解放出来。BeanFactory还包含了bean生命周期的控制，调用客户端的初始化方法（initialization methods）和销毁方法（destruction methods）。</p>
<p>从表面上看，application context如同bean factory一样具有bean定义、bean关联关系的设置，根据请求分发bean的功能。但application context在此基础上还提供了其他的功能。</p>
<ul>
<li>提供了支持国际化的文本消息</li>
<li>统一的资源文件读取方式</li>
<li>已在监听器中注册的bean的事件</li>
</ul>
<p>以下是三种较常见的 ApplicationContext 实现方式：</p>
<p>1、ClassPathXmlApplicationContext：从classpath的XML配置文件中读取上下文，并生成上下文定义。应用程序上下文从程序环境变量中取得。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(“bean.xml”);</span><br></pre></td></tr></table></figure></p>
<p>2、FileSystemXmlApplicationContext ：由文件系统中的XML配置文件读取上下文。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(“bean.xml”);</span><br></pre></td></tr></table></figure></p>
<p>3、XmlWebApplicationContext：由Web应用的XML文件读取上下文。</p>
<p></p><h3 id="answer-6"></h3><p></p>
<h3 id="6、Spring有几种配置方式？"><a href="#6、Spring有几种配置方式？" class="headerlink" title="6、Spring有几种配置方式？"></a>6、Spring有几种配置方式？</h3><p>将Spring配置到应用开发中有以下三种方式：</p>
<ol>
<li>基于XML的配置</li>
<li>基于注解的配置</li>
<li>基于Java的配置</li>
</ol>
<p></p><h3 id="answer-7"></h3><p></p>
<h3 id="7、如何用基于XML配置的方式配置Spring？"><a href="#7、如何用基于XML配置的方式配置Spring？" class="headerlink" title="7、如何用基于XML配置的方式配置Spring？"></a>7、如何用基于XML配置的方式配置Spring？</h3><p>在Spring框架中，依赖和服务需要在专门的配置文件来实现，我常用的XML格式的配置文件。这些配置文件的格式通常用 <code>&lt;beans&gt;</code> 开头，然后一系列的bean定义和专门的应用配置选项组成。</p>
<p>SpringXML配置的主要目的时候是使所有的Spring组件都可以用xml文件的形式来进行配置。这意味着不会出现其他的Spring配置类型（比如声明的方式或基于Java Class的配置方式）</p>
<p>Spring的XML配置方式是使用被Spring命名空间的所支持的一系列的XML标签来实现的。Spring有以下主要的命名空间：context、beans、jdbc、tx、aop、mvc和aso。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- JSON Support --&gt;</span><br><span class="line">    &lt;bean name=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot;/&gt;</span><br><span class="line">    &lt;bean name=&quot;jsonTemplate&quot; class=&quot;org.springframework.web.servlet.view.json.MappingJackson2JsonView&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;restTemplate&quot; class=&quot;org.springframework.web.client.RestTemplate&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>下面这个web.xml仅仅配置了DispatcherServlet，这件最简单的配置便能满足应用程序配置运行时组件的需求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;</span><br><span class="line">            &lt;servlet-class&gt;</span><br><span class="line">                org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">            &lt;/servlet-class&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p></p><h3 id="answer-7"></h3><p></p>
<h3 id="8、如何用基于Java配置的方式配置Spring？"><a href="#8、如何用基于Java配置的方式配置Spring？" class="headerlink" title="8、如何用基于Java配置的方式配置Spring？"></a>8、如何用基于Java配置的方式配置Spring？</h3><p>Spring对Java配置的支持是由@Configuration注解和@Bean注解来实现的。由@Bean注解的方法将会实例化、配置和初始化一个新对象，这个对象将由Spring的IoC容器来管理。@Bean声明所起到的作用与<bean> 元素类似。被@Configuration所注解的类则表示这个类的主要目的是作为bean定义的资源。被@Configuration声明的类可以通过在同一个类的内部调用@bean方法来设置嵌入bean的依赖关系。</bean></p>
<p>最简单的@Configuration 声明类请参考下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class AppConfig</span><br><span class="line">&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public MyService myService() &#123;</span><br><span class="line">        return new MyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上面的@Beans配置文件相同的XML配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=&quot;myService&quot; class=&quot;com.howtodoinjava.services.MyServiceImpl&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>上述配置方式的实例化方式如下：<code>利用AnnotationConfigApplicationContext</code> 类进行实例化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">    MyService myService = ctx.getBean(MyService.class);</span><br><span class="line">    myService.doStuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要使用组件组建扫描，仅需用@Configuration进行注解即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages = &quot;com.howtodoinjava&quot;)</span><br><span class="line">public class AppConfig  &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的例子中，com.acme包首先会被扫到，然后再容器内查找被@Component 声明的类，找到后将这些类按照Sring bean定义进行注册。</p>
<p>如果你要在你的web应用开发中选用上述的配置的方式的话，需要用 <code>AnnotationConfigWebApplicationContext</code> 类来读取配置文件，可以用来配置Spring的Servlet监听器 <code>ContrextLoaderListener</code> 或者Spring MVC的 <code>DispatcherServlet</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext</span><br><span class="line">        instead of the default XmlWebApplicationContext --&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextClass&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;</span><br><span class="line">            org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><br><span class="line">        &lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Configuration locations must consist of one or more comma- or space-delimited</span><br><span class="line">        fully-qualified @Configuration classes. Fully-qualified packages may also be</span><br><span class="line">        specified for component-scanning --&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;com.howtodoinjava.AppConfig&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap the root application context as usual using ContextLoaderListener --&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Declare a Spring MVC DispatcherServlet as usual --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext</span><br><span class="line">            instead of the default XmlWebApplicationContext --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextClass&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;</span><br><span class="line">                org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><br><span class="line">            &lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;!-- Again, config locations must consist of one or more comma- or space-delimited</span><br><span class="line">            and fully-qualified @Configuration classes --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;com.howtodoinjava.web.MvcConfig&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- map all requests for /app/* to the dispatcher servlet --&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/app/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p></p><h3 id="answer-9"></h3><p></p>
<h3 id="9、怎样用注解的方式配置Spring？"><a href="#9、怎样用注解的方式配置Spring？" class="headerlink" title="9、怎样用注解的方式配置Spring？"></a>9、怎样用注解的方式配置Spring？</h3><p>Spring在2.5版本以后开始支持用注解的方式来配置依赖注入。可以用注解的方式来替代XML方式的bean描述，可以将bean描述转移到组件类的内部，只需要在相关类上、方法上或者字段声明上使用注解即可。注解注入将会被容器在XML注入之前被处理，所以后者会覆盖掉前者对于同一个属性的处理结果。</p>
<p>注解装配在Spring中是默认关闭的。所以需要在Spring文件中配置一下才能使用基于注解的装配模式。如果你想要在你的应用程序中使用关于注解的方法的话，请参考如下的配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line">   &lt;context:annotation-config/&gt;</span><br><span class="line">   &lt;!-- bean definitions go here --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>&lt;context:annotation-config/&gt;</code> 标签配置完成以后，就可以用注解的方式在Spring中向属性、方法和构造方法中自动装配变量。</p>
<p>下面是几种比较重要的注解类型：</p>
<ol>
<li>@Required：该注解应用于设值方法。</li>
<li>@Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。</li>
<li>@Qualifier：该注解和@Autowired注解搭配使用，用于消除特定bean自动装配的歧义。</li>
<li>JSR-250 Annotations：Spring支持基于JSR-250 注解的以下注解，@Resource、@PostConstruct 和 @PreDestroy。</li>
</ol>
<p></p><h3 id="answer-10"></h3><p></p>
<h3 id="10、请解释Spring-Bean的生命周期？"><a href="#10、请解释Spring-Bean的生命周期？" class="headerlink" title="10、请解释Spring Bean的生命周期？"></a>10、请解释Spring Bean的生命周期？</h3><p>Spring Bean的生命周期简单易懂。在一个bean实例被初始化时，需要执行一系列的初始化操作以达到可用的状态。同样的，当一个bean不在被调用时需要进行相关的析构操作，并从bean容器中移除。</p>
<p>Spring bean factory 负责管理在spring容器中被创建的bean的生命周期。Bean的生命周期由两组回调（call back）方法组成。</p>
<ol>
<li>初始化之后调用的回调方法。</li>
<li>销毁之前调用的回调方法。</li>
</ol>
<p>Spring框架提供了以下四种方式来管理bean的生命周期事件：</p>
<ul>
<li>InitializingBean和DisposableBean回调接口</li>
<li>针对特殊行为的其他Aware接口</li>
<li>Bean配置文件中的Custom init()方法和destroy()方法</li>
<li>@PostConstruct和@PreDestroy注解方式</li>
</ul>
<p>使用customInit()和 customDestroy()方法管理bean生命周期的代码样例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=&quot;demoBean&quot; class=&quot;com.howtodoinjava.task.DemoBean&quot;</span><br><span class="line">            init-method=&quot;customInit&quot; destroy-method=&quot;customDestroy&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>
<p>更多内容请参考：Spring生命周期Spring Bean Life Cycle。</p>
<p></p><h3 id="answer-11"></h3><p></p>
<h3 id="11、Spring-Bean的作用域之间有什么区别？"><a href="#11、Spring-Bean的作用域之间有什么区别？" class="headerlink" title="11、Spring Bean的作用域之间有什么区别？"></a>11、Spring Bean的作用域之间有什么区别？</h3><p>Spring容器中的bean可以分为5个范围。所有范围的名称都是自说明的，但是为了避免混淆，还是让我们来解释一下：</p>
<ol>
<li>singleton：这种bean范围是默认的，这种范围确保不管接受到多少个请求，每个容器中只有一个bean的实例，单例的模式由bean factory自身来维护。</li>
<li>prototype：原形范围与单例范围相反，为每一个bean请求提供一个实例。</li>
<li>request：在请求bean范围内会每一个来自客户端的网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。</li>
<li>Session：与请求范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。</li>
<li>global-session：global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。</li>
</ol>
<p>全局作用域与Servlet中的session作用域效果相同。</p>
<p></p><h3 id="answer-12"></h3><p></p>
<h3 id="12、什么是Spring-inner-beans？"><a href="#12、什么是Spring-inner-beans？" class="headerlink" title="12、什么是Spring inner beans？"></a>12、什么是Spring inner beans？</h3><p>在Spring框架中，无论何时bean被使用时，当仅被调用了一个属性。一个明智的做法是将这个bean声明为内部bean。内部bean可以用setter注入“属性”和构造方法注入“构造参数”的方式来实现。</p>
<p>比如，在我们的应用程序中，一个Customer类引用了一个Person类，我们的要做的是创建一个Person的实例，然后在Customer内部使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Customer</span><br><span class="line">&#123;</span><br><span class="line">    private Person person;</span><br><span class="line"></span><br><span class="line">    //Setters and Getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Person</span><br><span class="line">&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String address;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    //Setters and Getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内部bean的声明方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.howtodoinjava.common.Customer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;person&quot;&gt;</span><br><span class="line">        &lt;!-- This is inner bean --&gt;</span><br><span class="line">        &lt;bean class=&quot;com.howtodoinjava.common.Person&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;name&quot; value=&quot;lokesh&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;address&quot; value=&quot;India&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;age&quot; value=&quot;34&quot; /&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p></p><h3 id="answer-13"></h3><p></p>
<h3 id="13、Spring框架中的单例Beans是线程安全的么？"><a href="#13、Spring框架中的单例Beans是线程安全的么？" class="headerlink" title="13、Spring框架中的单例Beans是线程安全的么？"></a>13、Spring框架中的单例Beans是线程安全的么？</h3><p>Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。但实际上，大部分的Spring bean并没有可变的状态(比如Serview类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。如果你的bean有多种状态的话（比如 View Model 对象），就需要自行保证线程安全。</p>
<p>最浅显的解决办法就是将多态bean的作用域由“singleton”变更为“prototype”。</p>
<p></p><h3 id="answer-14"></h3><p></p>
<h3 id="14、请举例说明如何在Spring中注入一个Java-Collection？"><a href="#14、请举例说明如何在Spring中注入一个Java-Collection？" class="headerlink" title="14、请举例说明如何在Spring中注入一个Java Collection？"></a>14、请举例说明如何在Spring中注入一个Java Collection？</h3><p>Spring提供了以下四种集合类的配置元素：</p>
<ul>
<li><code>&lt;list&gt;</code>:  该标签用来装配可重复的list值。</li>
<li><code>&lt;set&gt;</code>:   该标签用来装配没有重复的set值。</li>
<li><code>&lt;map&gt;</code>:   该标签可用来注入键和值可以为任何类型的键值对。</li>
<li><code>&lt;props&gt;</code>: 该标签支持注入键和值都是字符串类型的键值对。</li>
</ul>
<p>下面看一下具体的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition for javaCollection --&gt;</span><br><span class="line">   &lt;bean id=&quot;javaCollection&quot; class=&quot;com.howtodoinjava.JavaCollection&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- java.util.List --&gt;</span><br><span class="line">      &lt;property name=&quot;customList&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">           &lt;value&gt;INDIA&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;UK&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- java.util.Set --&gt;</span><br><span class="line">     &lt;property name=&quot;customSet&quot;&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">           &lt;value&gt;INDIA&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">           &lt;value&gt;UK&lt;/value&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- java.util.Map --&gt;</span><br><span class="line">     &lt;property name=&quot;customMap&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">           &lt;entry key=&quot;1&quot; value=&quot;INDIA&quot;/&gt;</span><br><span class="line">           &lt;entry key=&quot;2&quot; value=&quot;Pakistan&quot;/&gt;</span><br><span class="line">           &lt;entry key=&quot;3&quot; value=&quot;USA&quot;/&gt;</span><br><span class="line">           &lt;entry key=&quot;4&quot; value=&quot;UK&quot;/&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- java.util.Properties --&gt;</span><br><span class="line">    &lt;property name=&quot;customProperies&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key=&quot;admin&quot;&gt;admin@nospam.com&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;support&quot;&gt;support@nospam.com&lt;/prop&gt;</span><br><span class="line">        &lt;/props&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p></p><h3 id="answer-15"></h3><p></p>
<h3 id="15、如何向Spring-Bean中注入一个Java-util-Properties？"><a href="#15、如何向Spring-Bean中注入一个Java-util-Properties？" class="headerlink" title="15、如何向Spring Bean中注入一个Java.util.Properties？"></a>15、如何向Spring Bean中注入一个Java.util.Properties？</h3><p>第一种方法是使用如下面代码所示的 <code>&lt;props&gt;</code> 标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;adminUser&quot; class=&quot;com.howtodoinjava.common.Customer&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- java.util.Properties --&gt;</span><br><span class="line">    &lt;property name=&quot;emails&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key=&quot;admin&quot;&gt;admin@nospam.com&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;support&quot;&gt;support@nospam.com&lt;/prop&gt;</span><br><span class="line">        &lt;/props&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>
<p>也可用”util:”命名空间来从properties文件中创建出一个propertiesbean，然后利用setter方法注入bean的引用。</p>
<p></p><h3 id="answer-16"></h3><p></p>
<h3 id="16、请解释Spring-Bean的自动装配？"><a href="#16、请解释Spring-Bean的自动装配？" class="headerlink" title="16、请解释Spring Bean的自动装配？"></a>16、请解释Spring Bean的自动装配？</h3><p>在Spring框架中，在配置文件中设定bean的依赖关系是一个很好的机制，Spring容器还可以自动装配合作关系bean之间的关联关系。这意味着Spring可以通过向Bean Factory中注入的方式自动搞定bean之间的依赖关系。自动装配可以设置在每个bean上，也可以设定在特定的bean上。</p>
<p>下面的XML配置文件表明了如何根据名称将一个bean设置为自动装配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;employeeDAO&quot; class=&quot;com.howtodoinjava.EmployeeDAOImpl&quot; autowire=&quot;byName&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>除了bean配置文件中提供的自动装配模式，还可以使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在按照如下的配置方式在Spring配置文件进行配置才可以使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config /&gt;</span><br></pre></td></tr></table></figure>
<p>也可以通过在配置文件中配置 <code>AutowiredAnnotationBeanPostProcessor</code> 达到相同的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class =&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>配置好以后就可以使用@Autowired来标注了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">public EmployeeDAOImpl ( EmployeeManager manager ) &#123;</span><br><span class="line">    this.manager = manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p></p><h3 id="answer-17"></h3><p></p>
<h3 id="17、请解释自动装配模式的区别？"><a href="#17、请解释自动装配模式的区别？" class="headerlink" title="17、请解释自动装配模式的区别？"></a>17、请解释自动装配模式的区别？</h3><p>在Spring框架中共有5种自动装配，让我们逐一分析。</p>
<ol>
<li>no：这是Spring框架的默认设置，在该设置下自动装配是关闭的，开发者需要自行在bean定义中用标签明确的设置依赖关系。</li>
<li>byName：该选项可以根据bean名称设置依赖关系。当向一个bean中自动装配一个属性时，容器将根据bean的名称自动在在配置文件中查询一个匹配的bean。如果找到的话，就装配这个属性，如果没找到的话就报错。</li>
<li>byType：该选项可以根据bean类型设置依赖关系。当向一个bean中自动装配一个属性时，容器将根据bean的类型自动在在配置文件中查询一个匹配的bean。如果找到的话，就装配这个属性，如果没找到的话就报错。</li>
<li>constructor：造器的自动装配和byType模式类似，但是仅仅适用于与有构造器相同参数的bean，如果在容器中没有找到与构造器参数类型一致的bean，那么将会抛出异常。</li>
<li>autodetect：该模式自动探测使用构造器自动装配或者byType自动装配。首先，首先会尝试找合适的带参数的构造器，如果找到的话就是用构造器自动装配，如果在bean内部没有找到相应的构造器或者是无参构造器，容器就会自动选择byTpe的自动装配方式。</li>
</ol>
<p></p><h3 id="answer-18"></h3><p></p>
<h3 id="18、如何开启基于注解的自动装配？"><a href="#18、如何开启基于注解的自动装配？" class="headerlink" title="18、如何开启基于注解的自动装配？"></a>18、如何开启基于注解的自动装配？</h3><p>要使用 @Autowired，需要注册 <code>AutowiredAnnotationBeanPostProcessor</code>，可以有以下两种方式来实现：</p>
<p>1、引入配置文件中的 <code>&lt;bean&gt;</code> 下引入 <code>&lt;context:annotation-config&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;context:annotation-config /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>2、在bean配置文件中直接引入 <code>AutowiredAnnotationBeanPostProcessor</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>
<p></p><h3 id="answer-19"></h3><p></p>
<h3 id="19、请举例解释-Required-annotation？"><a href="#19、请举例解释-Required-annotation？" class="headerlink" title="19、请举例解释@Required annotation？"></a>19、请举例解释@Required annotation？</h3><p>在产品级别的应用中，IoC容器可能声明了数十万个bean，bean与bean之间有着复杂的依赖关系。设值注解方法的短板之一就是验证所有的属性是否被注解是一项十分困难的操作。可以通过在<bean>中设置“dependency-check”来解决这个问题。</bean></p>
<p>在应用程序的生命周期中，你可能不大愿意花时间在验证所有bean的属性是否按照上下文文件正确配置。或者你宁可验证某个bean的特定属性是否被正确的设置。即使是用“dependency-check”属性也不能很好的解决这个问题，在这种情况下，你需要使用@Required 注解。</p>
<p>需要用如下的方式使用来标明bean的设值方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class EmployeeFactoryBean extends AbstractFactoryBean&lt;Object&gt;</span><br><span class="line">&#123;</span><br><span class="line">    private String designation;</span><br><span class="line"></span><br><span class="line">    public String getDesignation() &#123;</span><br><span class="line">        return designation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Required</span><br><span class="line">    public void setDesignation(String designation) &#123;</span><br><span class="line">        this.designation = designation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //more code here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>RequiredAnnotationBeanPostProcessor</code> 是Spring中的后置处理用来验证被@Required 注解的bean属性是否被正确的设置了。在使用 <code>RequiredAnnotationBeanPostProcesso</code> 来验证bean属性之前，首先要在IoC容器中对其进行注册：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>但是如果没有属性被用 @Required 注解过的话，后置处理器会抛出一个 <code>BeanInitializationException</code> 异常。</p>
<p></p><h3 id="answer-20"></h3><p></p>
<h3 id="20、请举例解释-Autowired注解？"><a href="#20、请举例解释-Autowired注解？" class="headerlink" title="20、请举例解释@Autowired注解？"></a>20、请举例解释@Autowired注解？</h3><p>@Autowired注解对自动装配何时何处被实现提供了更多细粒度的控制。@Autowired注解可以像@Required注解、构造器一样被用于在bean的设值方法上自动装配bean的属性，一个参数或者带有任意名称或带有多个参数的方法。</p>
<p>比如，可以在设值方法上使用@Autowired注解来替代配置文件中的 <code>&lt;property&gt;</code> 元素。当Spring容器在setter方法上找到@Autowired注解时，会尝试用byType 自动装配。</p>
<p>当然我们也可以在构造方法上使用@Autowired 注解。带有@Autowired 注解的构造方法意味着在创建一个bean时将会被自动装配，即便在配置文件中使用 <code>&lt;constructor-arg&gt;</code> 元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class TextEditor &#123;</span><br><span class="line">   private SpellChecker spellChecker;</span><br><span class="line"></span><br><span class="line">   @Autowired</span><br><span class="line">   public TextEditor(SpellChecker spellChecker)&#123;</span><br><span class="line">      System.out.println(&quot;Inside TextEditor constructor.&quot; );</span><br><span class="line">      this.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void spellCheck()&#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是没有构造参数的配置方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line">   &lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition for textEditor bean without constructor-arg  --&gt;</span><br><span class="line">   &lt;bean id=&quot;textEditor&quot; class=&quot;com.howtodoinjava.TextEditor&quot;&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition for spellChecker bean --&gt;</span><br><span class="line">   &lt;bean id=&quot;spellChecker&quot; class=&quot;com.howtodoinjava.SpellChecker&quot;&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>
<p></p><h3 id="answer-21"></h3><p></p>
<h3 id="21、请举例说明-Qualifier注解？"><a href="#21、请举例说明-Qualifier注解？" class="headerlink" title="21、请举例说明@Qualifier注解？"></a>21、请举例说明@Qualifier注解？</h3><p>@Qualifier注解意味着可以在被标注bean的字段上可以自动装配。Qualifier注解可以用来取消Spring不能取消的bean应用。</p>
<p>下面的示例将会在Customer的person属性中自动装配person的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Customer</span><br><span class="line">&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面我们要在配置文件中来配置Person类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;customer&quot; class=&quot;com.howtodoinjava.common.Customer&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;personA&quot; class=&quot;com.howtodoinjava.common.Person&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;lokesh&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;personB&quot; class=&quot;com.howtodoinjava.common.Person&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;alex&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>
<p>Spring会知道要自动装配哪个person bean么？不会的，但是运行上面的示例时，会抛出下面的异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException:</span><br><span class="line">    No unique bean of type [com.howtodoinjava.common.Person] is defined:</span><br><span class="line">        expected single matching bean but found 2: [personA, personB]</span><br></pre></td></tr></table></figure></p>
<p>要解决上面的问题，需要使用 @Quanlifier注解来告诉Spring容器要装配哪个bean：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Customer</span><br><span class="line">&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;personA&quot;)</span><br><span class="line">    private Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></p><h3 id="answer-22"></h3><p></p>
<h3 id="22、构造方法注入和设值注入有什么区别？"><a href="#22、构造方法注入和设值注入有什么区别？" class="headerlink" title="22、构造方法注入和设值注入有什么区别？"></a>22、构造方法注入和设值注入有什么区别？</h3><p>请注意以下明显的区别：</p>
<ol>
<li>在设值注入方法支持大部分的依赖注入，如果我们仅需要注入int、string和long型的变量，我们不要用设值的方法注入。对于基本类型，如果我们没有注入的话，可以为基本类型设置默认值。在构造方法注入不支持大部分的依赖注入，因为在调用构造方法中必须传入正确的构造参数，否则的话为报错。</li>
<li>设值注入不会重写构造方法的值。如果我们对同一个变量同时使用了构造方法注入又使用了设置方法注入的话，那么构造方法将不能覆盖由设值方法注入的值。很明显，因为构造方法尽在对象被创建时调用。</li>
<li>在使用设值注入时有可能还不能保证某种依赖是否已经被注入，也就是说这时对象的依赖关系有可能是不完整的。而在另一种情况下，构造器注入则不允许生成依赖关系不完整的对象。</li>
<li>在设值注入时如果对象A和对象B互相依赖，在创建对象A时Spring会抛出 <code>ObjectCurrentlyInCreationException</code> 异常，因为在B对象被创建之前A对象是不能被创建的，反之亦然。所以Spring用设值注入的方法解决了循环依赖的问题，因对象的设值方法是在对象被创建之前被调用的。</li>
</ol>
<p></p><h3 id="answer-23"></h3><p></p>
<h3 id="23、Spring框架中有哪些不同类型的事件？"><a href="#23、Spring框架中有哪些不同类型的事件？" class="headerlink" title="23、Spring框架中有哪些不同类型的事件？"></a>23、Spring框架中有哪些不同类型的事件？</h3><p>Spring的ApplicationContext 提供了支持事件和代码中监听器的功能。</p>
<p>我们可以创建bean用来监听在ApplicationContext 中发布的事件。ApplicationEvent类和在ApplicationContext接口中处理的事件，如果一个bean实现了ApplicationListener接口，当一个ApplicationEvent 被发布以后，bean会自动被通知。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class AllApplicationEventListener implements ApplicationListener &lt; ApplicationEvent &gt;</span><br><span class="line">&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ApplicationEvent applicationEvent)</span><br><span class="line">    &#123;</span><br><span class="line">        //process event</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring 提供了以下5中标准的事件：</p>
<ol>
<li>上下文更新事件（ContextRefreshedEvent）：该事件会在ApplicationContext被初始化或者更新时发布。也可以在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。</li>
<li>上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。</li>
<li>上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。</li>
<li>上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。</li>
<li>请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。</li>
</ol>
<p>除了上面介绍的事件以外，还可以通过扩展ApplicationEvent 类来开发自定义的事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class CustomApplicationEvent extends ApplicationEvent</span><br><span class="line">&#123;</span><br><span class="line">    public CustomApplicationEvent ( Object source, final String msg )</span><br><span class="line">    &#123;</span><br><span class="line">        super(source);</span><br><span class="line">        System.out.println(&quot;Created a Custom event&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了监听这个事件，还需要创建一个监听器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class CustomEventListener implements ApplicationListener &lt; CustomApplicationEvent &gt;</span><br><span class="line">&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(CustomApplicationEvent applicationEvent) &#123;</span><br><span class="line">        //handle event</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后通过applicationContext接口的publishEvent()方法来发布自定义事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomApplicationEvent customEvent = new CustomApplicationEvent(applicationContext, &quot;Test message&quot;);</span><br><span class="line">applicationContext.publishEvent(customEvent);</span><br></pre></td></tr></table></figure>
<p></p><h3 id="answer-24"></h3><p></p>
<h3 id="24、FileSystemResource和ClassPathResource有何区别？"><a href="#24、FileSystemResource和ClassPathResource有何区别？" class="headerlink" title="24、FileSystemResource和ClassPathResource有何区别？"></a>24、FileSystemResource和ClassPathResource有何区别？</h3><p>在FileSystemResource 中需要给出spring-config.xml文件在你项目中的相对路径或者绝对路径。在ClassPathResource中spring会在ClassPath中自动搜寻配置文件，所以要把ClassPathResource 文件放在ClassPath下。</p>
<p>如果将spring-config.xml保存在了src文件夹下的话，只需给出配置文件的名称即可，因为src文件夹是默认。</p>
<p>简而言之，ClassPathResource在环境变量中读取配置文件，FileSystemResource在配置文件中读取配置文件。</p>
<p></p><h3 id="answer-25"></h3><p></p>
<h3 id="25、Spring-框架中都用到了哪些设计模式？"><a href="#25、Spring-框架中都用到了哪些设计模式？" class="headerlink" title="25、Spring 框架中都用到了哪些设计模式？"></a>25、Spring 框架中都用到了哪些设计模式？</h3><p>Spring框架中使用到了大量的设计模式，下面列举了比较有代表性的：</p>
<ul>
<li>代理模式—在AOP和remoting中被用的比较多。</li>
<li>单例模式—在spring配置文件中定义的bean默认为单例模式。</li>
<li>模板方法—用来解决代码重复的问题。<br>比如. RestTemplate, JmsTemplate, JpaTemplate。</li>
<li>前端控制器—Srping提供了DispatcherServlet来对请求进行分发。</li>
<li>视图帮助(View Helper )—Spring提供了一系列的JSP标签，高效宏来辅助将分散的代码整合在视图里。</li>
<li>依赖注入—贯穿于BeanFactory / ApplicationContext接口的核心理念。</li>
<li>工厂模式—BeanFactory用来创建对象的实例。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[14个常见的hibernate面试问答]]></title>
      <url>http://zhengdehua.github.io/2016/06/09/hibernate-interview/</url>
      <content type="html"><![CDATA[<h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><p><a href="#answer-1">1. Hibernate中get和load有什么不同之处?</a><br><a href="#answer-2">2. Hibernate中save、persist和saveOrUpdate这三个方法的不同之处？</a><br><a href="#answer-3">3. Hibernate中的命名SQL查询指的是什么?</a><br><a href="#answer-4">4. Hibernate中的SessionFactory有什么作用? SessionFactory是线程安全的吗？</a><br><a href="#answer-5">5. Hibernate中的Session指的是什么? 可否将单个的Session在多个线程间进行共享？</a><br><a href="#answer-6">6. hibernate中sorted collection和ordered collection有什么不同?</a><br><a href="#answer-7">7. Hibernate中transient、persistent、detached对象三者之间有什么区别？</a><br><a href="#answer-8">8. Hibernate中Session的lock()方法有什么作用?</a><br><a href="#answer-9">9. Hibernate中二级缓存指的是什么？</a><br><a href="#answer-10">10. Hibernate中的查询缓存指的是什么？</a><br><a href="#answer-11">11. 为什么在Hibernate的实体类中要提供一个无参数的构造器这一点非常重要？</a><br><a href="#answer-12">12. 可不可以将Hibernate的实体类定义为final类?</a><br><a href="#answer-13">13. Hibernate pessimistic locking</a><br><a href="#answer-14">14. 6 条提高 JDBC 性能的建议</a></p>
<p></p><h3 id="answer-1"></h3><p></p>
<h3 id="1-Hibernate中get和load有什么不同之处"><a href="#1-Hibernate中get和load有什么不同之处" class="headerlink" title="1. Hibernate中get和load有什么不同之处?"></a>1. Hibernate中get和load有什么不同之处?</h3><blockquote>
<p>参考 <a href="http://www.cnblogs.com/binjoo/articles/1621254.html" target="_blank" rel="external">http://www.cnblogs.com/binjoo/articles/1621254.html</a></p>
</blockquote>
<p>get和load方式是根据id取得一个记录<br>下边详细说一下get和load的不同，因为有些时候为了对比也会把find加进来。</p>
<p>1.从返回结果上对比：<br>load方式检索不到的话会抛出org.hibernate.ObjectNotFoundException异常<br>get方法检索不到的话会返回null</p>
<p>2.从检索执行机制上对比： get方法和find方法都是直接从数据库中检索 而load方法的执行则比较复杂首先查找session的persistent Context中是否有缓存，如果有则直接返回 如果没有则判断是否是lazy，如果不是直接访问数据库检索，查到记录返回，查不到抛出异常 如果是lazy则需要建立代理对象，对象的initialized属性为false，target属性为null 在访问获得的代理对象的属性时,检索数据库，如果找到记录则把该记录的对象复制到代理对象的target上，并将initialized=true，如果找不到就抛出异常。</p>
<p>3.根本区别说明<br>如果你使用load方法，hibernate认为该id对应的对象（数据库记录）在数据库中是一定存在的，所以它可以放心的使用，它可以放心的使用代理来 延迟加载该对象。在用到对象中的其他属性数据时才查询数据库，但是万一数据库中不存在该记录，那没办法，只能抛异常。所说的load方法抛异常是指在使用 该对象的数据时，数据库中不存在该数据时抛异常，而不是在创建这个对象时(注意：这就是由于“延迟加载”在作怪)。</p>
<p>由于session中的缓存对于hibernate来说是个相当廉价的资源，所以在load时会先查一下session缓存看看该id对应的对象是否存在，不存在则创建代理。所以如果你知道该id在数据库中一定有对应记录存在就可以使用load方法来实现延迟加载。</p>
<p>对于get方法，hibernate会确认一下该id对应的数据是否存在，首先在session缓存中查找，然后在二级缓存中查找，还没有就查数据库，数据库中没有就返回null。</p>
<p>对于load和get方法返回类型：虽然好多书中都这么说：“get()永远只返回实体类”，但实际上这是不正确的，get方法如果在 session缓存中找到了该id对应的对象，如果刚好该对象前面是被代理过的，如被load方法使用过，或者被其他关联对象延迟加载过，那么返回的还是 原先的代理对象，而不是实体类对象，如果该代理对象还没有加载实体数据（就是id以外的其他属性数据），那么它会查询二级缓存或者数据库来加载数据，但是 返回的还是代理对象，只不过已经加载了实体数据。</p>
<p>get方法首先查询session缓存，没有的话查询二级缓存，最后查询数据库；反而load方法创建时首先查询session缓存，没有就创建代理，实际使用数据时才查询二级缓存和数据库。</p>
<p>4.简单总结</p>
<p>总之对于get和load的根本区别，一句话，hibernate对于load方法认为该数据在数据库中一定存在，可以放心的使用代理来延迟加载，如果在使用过程中发现了问题，只能抛异常；而对于get方法，hibernate一定要获取到真实的数据，否则返回null。</p>
<p></p><h3 id="answer-2"></h3><p></p>
<h3 id="2-Hibernate中save、persist和saveOrUpdate这三个方法的不同之处？"><a href="#2-Hibernate中save、persist和saveOrUpdate这三个方法的不同之处？" class="headerlink" title="2. Hibernate中save、persist和saveOrUpdate这三个方法的不同之处？"></a>2. Hibernate中save、persist和saveOrUpdate这三个方法的不同之处？</h3><ol>
<li><p>Hibernate 中 save 和 saveOrUpdate 的区别<br>两者的主要区别是 save 会生成新的对象标识并往数据库插入一条记录，而 saveOrUpdate 根据对象是否存在于数据库中选择插入或者更新。很明显用的时候 saveOrUpdate 更加灵活，它基于 INSERT 和 UPDATE SQL 语句来执行。 save 通过 INSERT SQL 来执行，生成新的标识并返回 Serializable identifier.</p>
</li>
<li><p>Hibernate 中 save 和 persist 的区别</p>
</li>
</ol>
<ul>
<li>save 的返回类型是 Serializable object, 而 persist 返回类型是 void.</li>
<li>save 和 persist 都会使一个 transient 实例持久化，但是，persist 不保证会立即给持久化的实例分配 identifier value, 这样的赋值可能发生在 flush 的时候。</li>
<li>如果在 transaction boundaries 之外，persist 不会执行 INSERT 语句，但是 save 会立即执行，无论是否在 transaction 中。</li>
<li>因为对 transaction 关系的不同，persist 会通过一个 extended Session context 保留长期的会话，save 则不会。</li>
</ul>
<p></p><h3 id="answer-3"></h3><p></p>
<h3 id="3-Hibernate中的命名SQL查询指的是什么"><a href="#3-Hibernate中的命名SQL查询指的是什么" class="headerlink" title="3. Hibernate中的命名SQL查询指的是什么?"></a>3. Hibernate中的命名SQL查询指的是什么?</h3><blockquote>
<p>参考 <a href="http://www.journaldev.com/3451/hibernate-named-query-example-tutorial-namedquery-annotation-join-hql-native-sql" target="_blank" rel="external">http://www.journaldev.com/3451/hibernate-named-query-example-tutorial-namedquery-annotation-join-hql-native-sql</a></p>
</blockquote>
<ol>
<li><p>使用场景<br>在 Hibernate 项目中，如果我们要使用 HQL 或者 SQL 这样的 QUERY, 很多时候是在代码中写的，这样如果有很多 query 的话，会看起来很乱。 Hibernate 允许我们使用 Named Query 来定义这些 QUERY, 并且可以在任何地方使用它们。</p>
</li>
<li><p>使用方式<br>Hibernate Named Queries 可以在 Hibernate mapping files 中定义，也可以用 JPA 注解 <code>@NamedQuery</code> 和 <code>@NamedNativeQuery</code>.</p>
</li>
</ol>
<p>下面我们建立一个简单的工程，使用注解的方式作为 hibernate mapping，然后在 mapping files 和 entity bean 类中分别创建 named queries.<br>最终的项目结构如下图。</p>
<p><img src="/resources/image/png/Hibernate-Named-Query-Example.png" alt="" title="Hibernate-Named-Query-Example"></p>
<p><strong>Hibernate Configuration XML</strong></p>
<p>hibernate.cfg.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">  &lt;!DOCTYPE hibernate-configuration SYSTEM &quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">    &lt;session-factory&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.password&quot;&gt;pankaj123&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost/TestDB&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.username&quot;&gt;pankaj&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;mapping class=&quot;com.journaldev.hibernate.model.Employee&quot; /&gt;</span><br><span class="line">        &lt;mapping class=&quot;com.journaldev.hibernate.model.Address&quot; /&gt;</span><br><span class="line">        &lt;mapping resource=&quot;named-queries.hbm.xml&quot; /&gt;</span><br><span class="line">    &lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>Hibernate Named Query XML</strong></p>
<p>有一个 mapping file，包括了 HQL named queries 和 Native SQL named queries.</p>
<p>named-queries.hbm.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">    &quot;http://hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">     </span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">    &lt;query name=&quot;HQL_GET_ALL_EMPLOYEE&quot;&gt;from Employee&lt;/query&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;query name=&quot;HQL_GET_EMPLOYEE_BY_ID&quot;&gt;</span><br><span class="line">        &lt;![CDATA[from Employee where emp_id = :id]]&gt;</span><br><span class="line">    &lt;/query&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;query name=&quot;HQL_GET_EMPLOYEE_BY_SALARY&quot;&gt;</span><br><span class="line">        &lt;![CDATA[from Employee where emp_salary &gt; :salary]]&gt;</span><br><span class="line">    &lt;/query&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;sql-query name=&quot;SQL_GET_ALL_EMPLOYEE&quot;&gt;</span><br><span class="line">        &lt;![CDATA[select emp_id, emp_name, emp_salary from Employee]]&gt;</span><br><span class="line">    &lt;/sql-query&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;sql-query name=&quot;SQL_GET_ALL_EMP_ADDRESS&quot;&gt;</span><br><span class="line">        &lt;![CDATA[select &#123;e.*&#125;, &#123;a.*&#125; from Employee e join Address a ON e.emp_id=a.emp_id]]&gt;</span><br><span class="line">        &lt;return alias=&quot;e&quot; class=&quot;com.journaldev.hibernate.model.Employee&quot; /&gt;</span><br><span class="line">        &lt;return-join alias=&quot;a&quot; property=&quot;e.address&quot;&gt;&lt;/return-join&gt;</span><br><span class="line">    &lt;/sql-query&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>query</code> 元素用于 HQL named queries，<code>sql-query</code> 元素用于 native sql named queries. <code>return</code> 元素用于声明实体的结果集匹配。<br><code>return-join</code> 在多表查询的情况下匹配结果集。 <code>CDATA</code> 是为了让我们的 queries 作为 data 处理，忽略对 <code>&lt;and&gt;、&amp;</code> 这些字符的处理。</p>
<p><strong>Hibernate Named Query Annotation</strong></p>
<p>我们有两个 model 类, <code>Employee</code> 和 <code>Address</code>. 我们在 <code>Address</code> 中定义 named queries 如下.</p>
<p>Address.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">package com.journaldev.hibernate.model;</span><br><span class="line"> </span><br><span class="line">import javax.persistence.Column;</span><br><span class="line">import javax.persistence.Entity;</span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.NamedNativeQueries;</span><br><span class="line">import javax.persistence.NamedNativeQuery;</span><br><span class="line">import javax.persistence.NamedQueries;</span><br><span class="line">import javax.persistence.NamedQuery;</span><br><span class="line">import javax.persistence.OneToOne;</span><br><span class="line">import javax.persistence.PrimaryKeyJoinColumn;</span><br><span class="line">import javax.persistence.Table;</span><br><span class="line"> </span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line">import org.hibernate.annotations.Parameter;</span><br><span class="line"> </span><br><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;ADDRESS&quot;)</span><br><span class="line">@NamedQueries(&#123; @NamedQuery(name = &quot;@HQL_GET_ALL_ADDRESS&quot;, </span><br><span class="line">            query = &quot;from Address&quot;) &#125;)</span><br><span class="line">@NamedNativeQueries(&#123; @NamedNativeQuery(name = &quot;@SQL_GET_ALL_ADDRESS&quot;, </span><br><span class="line">            query = &quot;select emp_id, address_line1, city, zipcode from Address&quot;) &#125;)</span><br><span class="line">public class Address &#123;</span><br><span class="line"> </span><br><span class="line">    @Id</span><br><span class="line">    @Column(name = &quot;emp_id&quot;, unique = true, nullable = false)</span><br><span class="line">    @GeneratedValue(generator = &quot;gen&quot;)</span><br><span class="line">    @GenericGenerator(name = &quot;gen&quot;, strategy = &quot;foreign&quot;, parameters = &#123; @Parameter(name = &quot;property&quot;, value = &quot;employee&quot;) &#125;)</span><br><span class="line">    private long id;</span><br><span class="line"> </span><br><span class="line">    @Column(name = &quot;address_line1&quot;)</span><br><span class="line">    private String addressLine1;</span><br><span class="line"> </span><br><span class="line">    @Column(name = &quot;zipcode&quot;)</span><br><span class="line">    private String zipcode;</span><br><span class="line"> </span><br><span class="line">    @Column(name = &quot;city&quot;)</span><br><span class="line">    private String city;</span><br><span class="line"> </span><br><span class="line">    @OneToOne</span><br><span class="line">    @PrimaryKeyJoinColumn</span><br><span class="line">    private Employee employee;</span><br><span class="line"> </span><br><span class="line">    public long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getAddressLine1() &#123;</span><br><span class="line">        return addressLine1;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setAddressLine1(String addressLine1) &#123;</span><br><span class="line">        this.addressLine1 = addressLine1;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getZipcode() &#123;</span><br><span class="line">        return zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setZipcode(String zipcode) &#123;</span><br><span class="line">        this.zipcode = zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getCity() &#123;</span><br><span class="line">        return city;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setCity(String city) &#123;</span><br><span class="line">        this.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee getEmployee() &#123;</span><br><span class="line">        return employee;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setEmployee(Employee employee) &#123;</span><br><span class="line">        this.employee = employee;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;AddressLine1= &quot; + addressLine1 + &quot;, City=&quot; + city</span><br><span class="line">                + &quot;, Zipcode=&quot; + zipcode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>测试程序</strong></p>
<p>HibernateNamedQueryExample.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package com.journaldev.hibernate.main;</span><br><span class="line"> </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.hibernate.Query;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.SessionFactory;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line"> </span><br><span class="line">import com.journaldev.hibernate.model.Address;</span><br><span class="line">import com.journaldev.hibernate.model.Employee;</span><br><span class="line">import com.journaldev.hibernate.util.HibernateUtil;</span><br><span class="line"> </span><br><span class="line">public class HibernateNamedQueryExample &#123;</span><br><span class="line"> </span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">        // Prep work</span><br><span class="line">        SessionFactory sessionFactory = HibernateUtil.getSessionFactory();</span><br><span class="line">        Session session = sessionFactory.getCurrentSession();</span><br><span class="line">        Transaction tx = session.beginTransaction();</span><br><span class="line"> </span><br><span class="line">        //HQL Named Query Example</span><br><span class="line">        Query query = session.getNamedQuery(&quot;HQL_GET_ALL_EMPLOYEE&quot;);</span><br><span class="line">        List&lt;Employee&gt; empList = query.list();</span><br><span class="line">        for (Employee emp : empList) &#123;</span><br><span class="line">            System.out.println(&quot;List of Employees::&quot; + emp.getId() + &quot;,&quot;</span><br><span class="line">                    + emp.getAddress().getCity());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        query = session.getNamedQuery(&quot;HQL_GET_EMPLOYEE_BY_ID&quot;);</span><br><span class="line">        query.setInteger(&quot;id&quot;, 2);</span><br><span class="line">        Employee emp = (Employee) query.uniqueResult();</span><br><span class="line">        System.out.println(&quot;Employee Name=&quot; + emp.getName() + &quot;, City=&quot;</span><br><span class="line">                + emp.getAddress().getCity());</span><br><span class="line"> </span><br><span class="line">        query = session.getNamedQuery(&quot;HQL_GET_EMPLOYEE_BY_SALARY&quot;);</span><br><span class="line">        query.setInteger(&quot;salary&quot;, 200);</span><br><span class="line">        empList = query.list();</span><br><span class="line">        for (Employee emp1 : empList) &#123;</span><br><span class="line">            System.out.println(&quot;List of Employees::&quot; + emp1.getId() + &quot;,&quot;</span><br><span class="line">                    + emp1.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        query = session.getNamedQuery(&quot;@HQL_GET_ALL_ADDRESS&quot;);</span><br><span class="line">        List&lt;Address&gt; addressList = query.list();</span><br><span class="line">        for (Address addr : addressList) &#123;</span><br><span class="line">            System.out.println(&quot;List of Address::&quot; + addr.getId() + &quot;::&quot;</span><br><span class="line">                    + addr.getZipcode() + &quot;::&quot; + addr.getEmployee().getName());</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //Native SQL Named Query Example</span><br><span class="line">        query = session.getNamedQuery(&quot;@SQL_GET_ALL_ADDRESS&quot;);</span><br><span class="line">        List&lt;Object[]&gt; addressObjArray = query.list();</span><br><span class="line">        for(Object[] row : addressObjArray)&#123;</span><br><span class="line">            for(Object obj : row)&#123;</span><br><span class="line">                System.out.print(obj + &quot;::&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        query = session.getNamedQuery(&quot;SQL_GET_ALL_EMP_ADDRESS&quot;);</span><br><span class="line">        addressObjArray = query.list();</span><br><span class="line">        for(Object[] row : addressObjArray)&#123;</span><br><span class="line">            Employee e = (Employee) row[0];</span><br><span class="line">            System.out.println(&quot;Employee Info::&quot;+e);</span><br><span class="line">            Address a = (Address) row[1];</span><br><span class="line">            System.out.println(&quot;Address Info::&quot;+a);</span><br><span class="line">        &#125;</span><br><span class="line">        // rolling back to save the test data</span><br><span class="line">        tx.commit();</span><br><span class="line"> </span><br><span class="line">        // closing hibernate resources</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Hibernate Named Query 的4点总结</strong></p>
<ul>
<li>帮助我们将 queries 与代码分隔开。</li>
<li>当 hibernate session factory 创建时，会对 named query 做语法检查，因此，有语法错误，应用会启动失败。</li>
<li>named query 是全局的，可以在应用的任何地方使用。</li>
<li>缺点是很难调试，因为需要知道它定义的地方。</li>
</ul>
<blockquote>
<p>上述程序的 sample，<a href="/downloads/code/HibernateNamedQueryExamples.zip">HibernateNamedQueryExamples.zip</a></p>
</blockquote>
<p></p><h3 id="answer-4"></h3><p></p>
<h3 id="4-Hibernate中的SessionFactory有什么作用-SessionFactory是线程安全的吗？"><a href="#4-Hibernate中的SessionFactory有什么作用-SessionFactory是线程安全的吗？" class="headerlink" title="4. Hibernate中的SessionFactory有什么作用? SessionFactory是线程安全的吗？"></a>4. Hibernate中的SessionFactory有什么作用? SessionFactory是线程安全的吗？</h3><p>这也是Hibernate框架的常见面试问题。顾名思义，SessionFactory就是一个用于创建Hibernate的Session对象的工厂。SessionFactory通常是在应用启动时创建好的，应用程序中的代码用它来获得Session对象。作为一个单个的数据存储，它也是 线程安全的，所以多个线程可同时使用同一个SessionFactory。Java JEE应用一般只有一个SessionFactory，服务于客户请求的各线程都通过这个工厂来获得Hibernate的Session实例，这也是为什么SessionFactory接口的实现必须是线程安全的原因。还有，SessionFactory的内部状态包含着同对象关系影射有关的所有元数据，它是 不可变的，一旦创建好后就不能对其进行修改了。</p>
<p></p><h3 id="answer-5"></h3><p></p>
<h3 id="5-Hibernate中的Session指的是什么-可否将单个的Session在多个线程间进行共享？"><a href="#5-Hibernate中的Session指的是什么-可否将单个的Session在多个线程间进行共享？" class="headerlink" title="5. Hibernate中的Session指的是什么? 可否将单个的Session在多个线程间进行共享？"></a>5. Hibernate中的Session指的是什么? 可否将单个的Session在多个线程间进行共享？</h3><p>前面的问题问完之后，通常就会接着再问这两个问题。问完SessionFactory的问题后就该轮到Session了。Session代表着Hibernate所做的一小部分工作，它负责维护者同数据库的链接而且 不是线程安全的，也就是说，Hibernage中的Session不能在多个线程间进行共享。虽然Session会以主动滞后的方式获得数据库连接，但是Session最好还是在用完之后立即将其关闭。</p>
<p></p><h3 id="answer-6"></h3><p></p>
<h3 id="6-hibernate中sorted-collection和ordered-collection有什么不同"><a href="#6-hibernate中sorted-collection和ordered-collection有什么不同" class="headerlink" title="6. hibernate中sorted collection和ordered collection有什么不同?"></a>6. hibernate中sorted collection和ordered collection有什么不同?</h3><p>这个是你会碰到的所有Hibernate面试问题中比较容易的问题。sorted collection是通过使用 Java的Comparator在内存中进行排序的，ordered collection中的排序用的是数据库的order by子句。对于比较大的数据集，为了避免在内存中对它们进行排序而出现 Java中的OutOfMemoryError，最好使用ordered collection。</p>
<p></p><h3 id="answer-7"></h3><p></p>
<h3 id="7-Hibernate中transient、persistent、detached对象三者之间有什么区别？"><a href="#7-Hibernate中transient、persistent、detached对象三者之间有什么区别？" class="headerlink" title="7. Hibernate中transient、persistent、detached对象三者之间有什么区别？"></a>7. Hibernate中transient、persistent、detached对象三者之间有什么区别？</h3><p>在Hibernate中，对象具有三种状态：transient、persistent和detached。同Hibernate的session有关联的对象是persistent对象。对这种对象进行的所有修改都会按照事先设定的刷新策略，反映到数据库之中，也即，可以在对象的任何一个属性发生改变时自动刷新，也可以通过调用Session.flush()方法显式地进行刷新。如果一个对象原来同Session有关联关系，但当下却没有关联关系了，这样的对象就是detached的对象。你可以通过调用任意一个session的update()或者saveOrUpdate()方法，重新将该detached对象同相应的seesion建立关联关系。Transient对象指的是新建的持久化类的实例，它还从未同Hibernate的任何Session有过关联关系。同样的，你可以调用persist()或者save()方法，将transient对象变成persistent对象。可要记住，这里所说的transient指的可不是 Java中的transient关键字，二者风马牛不相及。</p>
<p></p><h3 id="answer-8"></h3><p></p>
<h3 id="8-Hibernate中Session的lock-方法有什么作用"><a href="#8-Hibernate中Session的lock-方法有什么作用" class="headerlink" title="8. Hibernate中Session的lock()方法有什么作用?"></a>8. Hibernate中Session的lock()方法有什么作用?</h3><blockquote>
<p>参考 <a href="http://www.intertech.com/Blog/hibernate-lock-to-reattach-detached-objects/" target="_blank" rel="external">http://www.intertech.com/Blog/hibernate-lock-to-reattach-detached-objects/</a></p>
<p>Hibernate 提供 <a href="#answer-13">pessimistic locking</a> 选项来做并发控制。 Hibernate 的 pessimistic lock 实际上是底层数据库的功能。Hibernate 不会真的锁内存中的对象。<br>Hibernate 通过以下的操作请求数据库的锁:</p>
<ul>
<li>session.get(classType, objectId, lockOptions)</li>
<li>session.load(classType, objectId, lockOptions)</li>
<li>session.refresh(objectReference, lockOptions)</li>
<li>session.buildLockRequest(lockOptions).lock(objectRef)<ul>
<li>这是替代了现在已经禁用的 session.lock(objectRef, lockMode) 操作</li>
</ul>
</li>
<li>调用用适当的 setLockOptions(lockOptions) 来执行 query</li>
<li>调用用适当的 setLockOptions(lockOptions) 来执行 criteria </li>
</ul>
</blockquote>
<p><strong>用 lock() 将游离态对象变成持久态对象</strong><br>lock() 方法在考虑 pessimistic 操作时很重要，但它还有另外一个鲜为人知的用途。 lock() 方法和 LockOptions.NONE 能将一个 detached 对象关联到一个 session 上，并且把它加进 persistence context. 重要的是，它不用像 update() 或 saveOrUpdate() 一样需要执行数据库的 update 操作。 用 LockOptions.NONE, 它不必获取数据库锁，甚至也不用进行一次对数据库的 version check. 重要的是，在调用 lock() with LockOptions.NONE 之前，detached 对象已经改变了，可是不会同步到数据库。所以，你得知道在 persistence context 之外对 detached 对象仅仅调用 lock() 方法是不会有变化的。</p>
<p></p><h3 id="answer-9"></h3><p></p>
<h3 id="9-Hibernate中二级缓存指的是什么？"><a href="#9-Hibernate中二级缓存指的是什么？" class="headerlink" title="9. Hibernate中二级缓存指的是什么？"></a>9. Hibernate中二级缓存指的是什么？</h3><p>这是同Hibernate的缓存机制相关的第一个面试问题，不出意外后面还会有更多这方面的问题。二级缓存是在SessionFactory这个级别维护的缓存，它能够通过节省几番数据库调用往返来提高性能。还有一点值得注意，二级缓存是针对整个应用而不是某个特定的session的。</p>
<p></p><h3 id="answer-10"></h3><p></p>
<h3 id="10-Hibernate中的查询缓存指的是什么？"><a href="#10-Hibernate中的查询缓存指的是什么？" class="headerlink" title="10. Hibernate中的查询缓存指的是什么？"></a>10. Hibernate中的查询缓存指的是什么？</h3><p>查询缓存实际上保存的是sql查询的结果，这样再进行相同的sql查询就可以之间从缓存中拿到结果了。为了改善性能，查询缓存可以同二级缓存一起来使用。Hibernate支持用多种不同的开源缓存方案，比如EhCache，来实现查询缓存。</p>
<p></p><h3 id="answer-11"></h3><p></p>
<h3 id="11-为什么在Hibernate的实体类中要提供一个无参数的构造器这一点非常重要？"><a href="#11-为什么在Hibernate的实体类中要提供一个无参数的构造器这一点非常重要？" class="headerlink" title="11. 为什么在Hibernate的实体类中要提供一个无参数的构造器这一点非常重要？"></a>11. 为什么在Hibernate的实体类中要提供一个无参数的构造器这一点非常重要？</h3><p>每个Hibernate实体类必须包含一个 无参数的构造器, 这是因为Hibernate框架要使用Reflection API，通过调用Class.newInstance()来创建这些实体类的实例。如果在实体类中找不到无参数的构造器，这个方法就会抛出一个InstantiationException异常。</p>
<p></p><h3 id="answer-12"></h3><p></p>
<h3 id="12-可不可以将Hibernate的实体类定义为final类"><a href="#12-可不可以将Hibernate的实体类定义为final类" class="headerlink" title="12. 可不可以将Hibernate的实体类定义为final类?"></a>12. 可不可以将Hibernate的实体类定义为final类?</h3><p>是的，你可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把实体类定义成final类之后，因为 Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升性能的手段。不过，如果你的持久化类实现了一个接口而且在该接口中声明了所有定义于实体类中的所有public的方法轮到话，你就能够避免出现前面所说的不利后果。</p>
<p></p><h3 id="answer-13"></h3><p></p>
<h3 id="13-Hibernate-pessimistic-locking"><a href="#13-Hibernate-pessimistic-locking" class="headerlink" title="13. Hibernate pessimistic locking"></a>13. Hibernate pessimistic locking</h3><p>一般不用太担心锁的策略问题，通常在指定了 JDBC 连接的 isolation level 后就可以放手去工作了。但是，部分高级人员希望在开始一个新 transaction 前拿到 exlclusive pessimistic locks 或者 重新获取锁。</p>
<p>Hibernate 使用数据库的锁机制，但是不会在内存中 lock objects.</p>
<p>Hibernate 的 LockMode 类定义了不同的 lock level, 如下：</p>
<ul>
<li>LockMode.WRITE 在 Hibernate update 或 insert 时自动获取。</li>
<li>LockMode.UPGRADE 可以在 explicit user request 使用 SELECT …… FOR UPDATE (数据库支持该语法情况下) 时获取。</li>
<li>LockMode.UPGRADE_NOWAIT 可以在 explicit user request 使用 SELECT …… FOR UPDATE NOWAIT (oracle 数据库支持) 时获取。</li>
<li>LockMode.READ 在 Hibernate 读取数据 (要求 Repeatable Read 或者 Serializable 的隔离级别) 时自动获取，也可以被 explicit user request 重复获取。</li>
<li>LockMode.NONE 表示空锁，在一个 transaction 结束后所有对象会回到这个锁，对象通过调用 update() 或者 saveOrUpdate() 关联 session 也是从这个锁开始的。</li>
</ul>
<p>上文中的 “explicit user request” 是指下面这些情形的一种:</p>
<ul>
<li>A call to Session.load(), specifying a LockMode.</li>
<li>A call to Session.lock().</li>
<li>A call to Query.setLockMode().</li>
</ul>
<p>如果 Session.load() 在 UPGRADE 或者 UPGRADE_NOWAIT 锁下被调用，并且请求的对象还没有被 session 加载，那这个对象是用 SELECT …… FOR UPDATE 加载的。如果 load() 多次加载一个已经在 less restrictive lock 下加载的对象，hibernate 会对该对象调用 lock().</p>
<p>如果指定的 lock mode 是 READ, UPGRADE or UPGRADE_NOWAIT, Session.lock() 会进行一个 version number check. 在 UPGRADE 或 UPGRADE_NOWAIT 情况下，会用 SELECT …… FOR UPDATE.</p>
<p>如果数据库不支持请求的锁，Hibernate 会用一个适当的 mode 代替，而不是抛出异常，这是为了确保应用的可移植性。</p>
<p></p><h3 id="answer-14"></h3><p></p>
<h3 id="14-6-条提高-JDBC-性能的建议"><a href="#14-6-条提高-JDBC-性能的建议" class="headerlink" title="14. 6 条提高 JDBC 性能的建议"></a>14. 6 条提高 JDBC 性能的建议</h3><ol>
<li><p>使用缓存，频繁建立数据库连接的代价是很大的，因为这需要重复的 connection prepared 和 network round trip. 如果可以使用缓存中的值，会大大提高应用的性能，这在高访问量的场景下表现显著。</p>
</li>
<li><p>使用数据库索引，这个在建立表时就需要考虑到日后的需要，对于常用的字段建立索引，是起码的认识。</p>
</li>
<li><p>使用 PreparedStatement 和 Stored Procedure 进行查询会比一般的 statement 效率高，因为数据库可以 pre-compile 它们，还可以缓存查询计划。看以下这个例子：</p>
<p> <i class="fa fa-check"> parametric form of Prepared Statement:</i></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;select * from table where id = ?&quot;</span><br></pre></td></tr></table></figure>
<p> <i class="fa fa-close"> Prepared Statement but not parametrized.</i></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;select * from table where id = &apos;&quot; + id + &quot;&apos;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数据库连接池，是把一定数量的连接缓存在池中，也是利用缓存的作用。</p>
</li>
<li><p>使用 JDBC Batch Update.</p>
</li>
<li><p>禁用 auto commit.</p>
</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
